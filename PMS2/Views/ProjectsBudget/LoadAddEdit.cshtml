@model PMS.Models.ProjectsBudgetViewModel
@{
    Layout = null;
}
<style>
    .redborder {
        border: solid 1px #ff0000;
    }

    .k-grid-add {
        float: right;
    }
</style>


    <div class="modal-header">
        <h4 class="modal-title">Add/Edit Budgeted Cost</h4>
        <button type="button" class="close" data-dismiss="modal" onclick="CloseModal();">&times;</button>

    </div>
    <div class="modal-body">
        <form class="form-horizontal" id="frmProjectBudget" name="frmProjectBudget">
            <div class="row">
                <div class="col-md-5 col-sm-5">
                    <div class="form-group row">
                        <label class="control-label col-sm-3" for="pwd">Zip Code:</label>
                        <div class="col-sm-9">
                            @*@Html.DropDownListFor(o => o.ProjectSalesmenId, Model.SalesmenList, new { @class = "form-control", onchange = "FilterAddressBySalesman();" })*@
                            @if (Model.Zip_CodeId > 0)
                            {
                                <select name="ZipCodeId" id="ZipCodeId" class="form-control">
                                    <option selected value="@Model.Zip_CodeId">@Model.Zip_CodeId</option>
                                </select>
                            }
                            else
                            {
                                <select name="ZipCodeId" id="ZipCodeId" class="form-control" onchange="onChangeZipCode();">
                                    <option selected value="@Model.Zip_CodeId">@Model.Zip_CodeId</option>
                                </select>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-7  col-sm-7">
                    <div class="form-group row">
                        <label class="control-label col-sm-4" for="pwd">Unit Number :</label>
                        <div class="col-sm-8">
                            @*@Html.DropDownListFor(o => o.project_id, Model.projectList, new { @class = "form-control chosen-select", @tabindex = "1", style = "width:200px" })
                                @Html.ValidationMessageFor(o => o.project_id, "", new { @class = "text-error" })*@
                            @if (Model.Unit_CodeId != "")
                            {
                                <select name="UnitCodeId" id="UnitCodeId" class="form-control">
                                    <option selected value="@Model.Unit_CodeId">@Model.Unit_CodeId</option>
                                </select>

                            }
                            else
                            {
                                <select name="UnitCodeId" id="UnitCodeId" class="form-control" onchange="BindSalesmenAndAddressSite();">
                                    <option selected value="@Model.Unit_CodeId">@Model.Unit_CodeId</option>
                                </select>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-5 col-sm-5">
                    <div class="form-group row">
                        <label class="control-label col-sm-3" for="pwd">Salesman:</label>
                        <div class="col-sm-9">
                            @*@Html.DropDownListFor(o => o.ProjectSalesmenId, Model.SalesmenList, new { @class = "form-control", onchange = "FilterAddressBySalesman();" })*@
                            @if (Model.ProjectSalesmenId > 0)
                            {
                                <select name="SalesmenId" id="SalesmenId" class="form-control">
                                    <option selected value="@Model.ProjectSalesmenId">@Model.SalesmenName</option>
                                </select>
                            }
                            else
                            {
                                <select name="SalesmenId" id="SalesmenId" class="form-control select2" required="required" onchange="BindAddressSite();">
                                    <option selected value="">@Model.ProjectSalesmenId</option>
                                </select>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-7  col-sm-7">
                    <div class="form-group row">
                        <label class="control-label col-sm-4" for="pwd">Address/Site (Contract No) :</label>
                        <div class="col-sm-8">
                            @*@Html.DropDownListFor(o => o.project_id, Model.projectList, new { @class = "form-control chosen-select", @tabindex = "1", style = "width:200px" })
                                @Html.ValidationMessageFor(o => o.project_id, "", new { @class = "text-error" })*@
                            @if (Model.project_id > 0)
                            {
                                <select name="AddressId" id="AddressId" class="form-control">
                                    <option selected value="@Model.project_id">@Model.AddressSitName</option>
                                </select>
                            }
                            else
                            {
                                <select name="AddressId" id="AddressId" class="form-control select2" required="required">

                                    @*<option selected value="">@Model.project_id</option>*@
                                </select>
                            }
                        </div>
                    </div>
                </div>
                <input type="hidden" id="hdnProjectID" value="@ViewData["ProjectID"]" />
                <input type="hidden" id="hdnproject_budget_id" value="@ViewData["project_budget_id"]" />
                <input type="hidden" id="project_budget_id" value="@ViewData["project_budget_id"]" />
            </div>
        </form>
        @*<div class="row">
                <div class="col-md-12">
                    <div id="grid1" class="accordion"></div>

                </div>
            </div>*@<div class="row">
            <div class="col-md-12">
                <div id="grid1" class="accordion"></div>

            </div>
        </div>
    </div>
    <input type="hidden" id="hdnId" name="hdnId" value="@Model.id" />
    <!--<div class="modal-footer">-->
    @*@if (@Model.id != 0)
        {
            <button id="btnSave" name="btnSave" type="submit" class="btn btn-primary" onclick="SaveForm();">Update</button>
        }
        else
        {
            <button id="btnSave" name="btnSave" type="submit" class="btn btn-primary" onclick="SaveForm();">Save</button>
        }*@
    <!--<button id="btnClose" name="btnClose" type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseModal();">Close</button>
        <input type="hidden" id="hdnZipCodeId" name="hdnZipCodeId" value="@Model.Zip_CodeId" />
        <input type="hidden" id="hdnUnitCodeId" name="hdnUnitCodeId" value="@Model.Unit_CodeId" />
        <input type="hidden" id="hdnSalesmenId" name="hdnSalesmenId" value="@Model.ProjectSalesmenId" />
        <input type="hidden" id="hdnAddressId" name="hdnAddressId" value="'@Model.project_id" />
    </div>-->

    <script>
    var uploadInput = '<form method="post" action="#"><div><input name="upload" id="upload" type="file" /></div></form>';
    function CloseModal() {
        window.location = '@Url.Action("", "ProjectsBudget")';
    }

    function SaveForm() {

    }

    $(document).ready(function () {
        debugger;
        BindGridAdd();
        var _id = $("#hdnId").val();
        if (_id == "0") {
            BindZipCode();
            BindUnitCode();
            BindSalesmenAndAddressSite();
        }
        else {
            $("#ZipCodeId").prop("disabled", true)
            $("#UnitCodeId").prop("disabled", true)
            $("#SalesmenId").prop("disabled", true)
            $("#AddressId").prop("disabled", true)
        }
        /*BindAddressSite();*/
        //BindSalesMan();
        //getEditDocumentPath();
    });

    function BindZipCode() {
		$.get('@Url.Action("BindZipCode", "Master")', function (list) {
            debugger;
            if (list != null) {
                debugger;
				var items = [];
				// items.push("<option value=" + 0 + ">" + "--Select Customer--" + "</option>");
				var i;
				for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].ZipCode_id + ">" + list.data[i].ZipCode_Name + "</option>");
				}
                //items.push("<option selected value=" + selectedUnitCodeId + ">" + selectedUnitCodeText + "</option>");
                $("#ZipCodeId").html(items.join(' '));
                $('#ZipCodeId').select2();
			}
			else {
				var items = [];
				//items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#ZipCodeId").html(items.join(' '));
                $('#ZipCodeId').select2();
			}
        });
    }

    //$("#ZipCodeId").change(function () {
    //    var end = this.value;
    //    BindUnitCode();
    //});

    function onChangeZipCode() {
        BindUnitCode();
        BindSalesmenAndAddressSite();
    }

    function BindUnitCode() {
        var selectedZipCodeId = $("#ZipCodeId").val();
        debugger;
        $.get('@Url.Action("BindUnitCode", "Master")?ZipCodeId=' + selectedZipCodeId, function (list) {
            debugger;
			if (list != null) {
				var items = [];
				var i;
				for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].UnitCode_id + ">" + list.data[i].UnitCode_Name + "</option>");
				}
                $("#UnitCodeId").html(items.join(' '));
                $('#UnitCodeId').select2();
                $("#AddressId").html('');
                $("#SalesmenId").html('');

			}
			else {
				var items = [];
                $("#UnitCodeId").html(items.join(' '));
                $('#UnitCodeId').select2();
            }
        });
    }

    //$("#UnitCodeId").change(function () {
    //    debugger;
    //    var end = this.value;
    //    BindSalesmenAndAddressSite();
    //});

    function BindSalesmenAndAddressSite() {
        debugger;
        var selectedZipCodeId = $("#ZipCodeId").val();
        var selectedUnitCodeId = $("#UnitCodeId").val();
        var SalesmanId = $('#SalesmenId').val();
        debugger;
        $.get('@Url.Action("BindSalesmenAndAddressSite", "Master")?ZipCodeId=' + selectedZipCodeId + '&UnitCodeId=' + selectedUnitCodeId + '&SalesmanId=' + SalesmanId, function (list) {
            debugger
            if (list.data != null) {
				var items = [];
				var i;
				for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].id + ">" + list.data[i].salesmen_name + "</option>");
				}
                $("#SalesmenId").html(items.join(' '));
                $('#SalesmenId').select2();
			}
			else {
				var items = [];
                $("#SalesmenId").html(items.join(' '));
                $('#SalesmenId').select2();
            }

            if (list.addreessSite != null) {
                var items = [];
                var i;
                for (i = 0; i < list.addreessSite.length; i++) {
                    items.push("<option value=" + list.addreessSite[i].AddressSite_id + ">" + list.addreessSite[i].AddressSite_Name + "</option>");
                }
                $("#AddressId").html(items.join(' '));
                $('#AddressId').select2();
            }
            else {
                var items = [];
                //items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#AddressId").html(items.join(' '));
                $('#AddressId').select2();
            }
		});
    }

    function BindSalesMan() {
        debugger;
        var selectedSalesmenId = $("#SalesmenId").val();
        var selectedSalesmentext = $("#SalesmenId").text();
        $.get('@Url.Action("BindSalesmen", "Master")', function (list) {
            //debugger;
            if (list != null) {
                var items = [];
                items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                var i;
                for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].id + ">" + list.data[i].salesmen_name + "</option>");
                }
                /*items.push("<option selected value=" + selectedSalesmenId + ">" + selectedSalesmentext + "</option>");*/
                $("#SalesmenId").html(items.join(' '));
                $('#SalesmenId').select2();
                $('#SalesmenId').val('@Model.ProjectSalesmenId').trigger('change')
            }
            else {
                var items = [];
                items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#SalesmenId").html(items.join(' '));
                $('#SalesmenId').select2();
            }
            @*//debugger;
            var role = '@Model.role';
            if (role == "Salesman") {
                $("#SalesmenId").val('@Model.id').trigger('change');
                $('#SalesmenId').prop('disabled', true);
            }
            else {
                $('#SalesmenId').prop('disabled', false);
            }*@
            //BindCustomerPaymentGrid();
        });


    }

    function BindAddressSite() {
        debugger;;
        var SalesmenId = $("#SalesmenId").val();
       // var SalesmenId = 0;//
        if (SalesmenId == null || SalesmenId == "") {
            SalesmenId = 0;
        }
        // var Project_Id = $("#AddressId").val();
        @*var selectedZipCodeId = $("#ZipCodeId").val();
        var selectedUnitCodeId = $("#UnitCodeId").val();

        $.get('@Url.Action("BindAddressSiteBySalesman", "Master")?ZipCodeId=' + selectedZipCodeId + '&UnitCodeId=' + selectedUnitCodeId + '&SalesmanId =' + SalesmenId"", function (list) {*@
         var Project_Id = 0;//;
        if (Project_Id == null || Project_Id == "") {
            Project_Id = 0;
        }
        $.get('@Url.Action("BindAddressSiteByStatus", "Master")?Project_Id=' + Project_Id + '&Salesmen_Id=' + SalesmenId, function (list) {
        //debugger;
            if (list != null) {
                var items = [];
                items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                var i;
                for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].id + ">" + list.data[i].AddressSite + "</option>");
                }
                $("#AddressId").html(items.join(' '));
                $('#AddressId').select2();
                $('#AddressId').val('@Model.project_id').trigger('change')
            }
            else {
                var items = [];
                items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#AddressId").html(items.join(' '));
                $('#AddressId').select2();
            }

        });

    }

    function BindAddressSiteBySalesman() {
        debugger;
        var selectedZipCodeId = $("#ZipCodeId").val();
        var selectedUnitCodeId = $("#UnitCodeId").val();
        debugger;
        $.get('@Url.Action("BindSalesmenAndAddressSite", "Master")?ZipCodeId=' + selectedZipCodeId + '&UnitCodeId=' + selectedUnitCodeId, function (list) {
            debugger
            if (list.addreessSite != null) {
                var items = [];
                var i;
                for (i = 0; i < list.addreessSite.length; i++) {
                    items.push("<option value=" + list.addreessSite[i].AddressSite_id + ">" + list.addreessSite[i].AddressSite_Name + "</option>");
                }
                $("#AddressId").html(items.join(' '));
                $('#AddressId').select2();
                $('#AddressId').val('@Model.project_id');
            }
            else
            {
                var items = [];
                //items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#AddressId").html(items.join(' '));
                $('#AddressId').select2();
            }
		});
    }

    function BindGridAdd() {
        debugger;
        var IsEditMode = '@ViewBag.IsEdit';
        if (IsEditMode == 'EDIT')
            IsEditMode = true;
        else
            IsEditMode = false;
       // var project_budget_id = $('#project_budget_details_id').val();
        //var project_id = $('#project_id').val();
        dataSource = new kendo.data.DataSource({
            transport: {

                read: function (options) {
                    debugger
                    var hdnprID = "@ViewData["ProjectID"]";//$("#hdnProjectID").val();
                    var hdnprj_budget_id = "@ViewData["project_budget_id"]"; //$("#hdnproject_budget_id").val();
                    var project_budget_id = hdnprj_budget_id; //20914;
                    var project_id = hdnprID;
                   // var project_id = $('#AddressId').val();

                    if (project_budget_id == 0) {
                        $.ajax({
                        //url: '@Url.Action("Get_Project_Budget_DetailsById", "ProjectsBudget")?project_budget_id=' + project_budget_id + '&project_id=' + project_id,
                        url: '@Url.Action("LoadAddEdit", "ProjectsBudget")?Id=0',
                        type: "GET",
                        dataType: "json",
                            success: function (result) {
                                debugger;
                            options.success(result);
                        },
                        error: function (result) {
                            debugger;
                            options.error(result);
                        }
                    });
                    }
                    else {
                        $.ajax({
                        //url: '@Url.Action("Get_Project_Budget_DetailsById", "ProjectsBudget")?project_budget_id=' + project_budget_id + '&project_id=' + project_id,
                        url: '@Url.Action("Get_Project_Budget_DetailsByIdNew", "ProjectsBudget")?project_budget_id=' + project_budget_id + '&project_id=' + project_id,
                        type: "GET",
                        dataType: "json",
                        success: function (result) {
                            options.success(result);
                        },
                        error: function (result) {
                            debugger;
                            options.error(result);
                        }
                    });
                    }
                },
				create: function (options) {
                    debugger;
					CalculateGSTTotalAmountSave(options);
                    var SalesmenId = $('#SalesmenId').val();
                    var project_id = $('#AddressId').val();
                    var ZipCodeId = $("#ZipCodeId").val();
                    if (ZipCodeId == "" || ZipCodeId == null) {
                        ZipCodeId = 0;
                    }
                    var UnitCodeId = $("#UnitCodeId").val();
                    if (UnitCodeId == "" || UnitCodeId == null) {
                        UnitCodeId = "";
                    }
                    var isValid = ValidationForCreate();
                    debugger;
                    var fileUpload = $('[name = "upload"]').get(0);
                    var files = fileUpload.files;
                  //  var fileData = new FormData();
                  //  fileData.append(files[0].name, files[0]);
                    if (files.length > 0) {
                        var fileData = new FormData();
                        fileData.append(files[0].name, files[0]);
                    }
                    else {
                        notify("Please Select Files", "error");
                        $('div.k-loading-mask').css('display', 'none');
                        return false;
                    }
                    var isGSTValid = false;
                    if (options.data.models[0].GSTPercent == "0" || options.data.models[0].GSTPercent == "7") {
                        isGSTValid = true;
                    }
                    var ProjectBudgetid = $('#project_budget_id').val();
                    if (ProjectBudgetid > 0) {
                        options.data.models[0].project_budget_id = ProjectBudgetid;
                    }
                    if (!isGSTValid) {
                        notify("GST Percent should be 0 or 7", "error");
                        $('div.k-loading-mask').css('display', 'none');
                        return false;
                    }
                    if (isValid) {
                        debugger;
                        $.loader({ content: "<table><tr><td><h5>Saving Of Budget Cost is in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
                        $.ajax({
                            url: '@Url.Action("AddBudgetDetails", "ProjectsBudget")?JsonBudget=' + encodeURIComponent(JSON.stringify(options.data.models[0])) + '&SalesmenId=' + SalesmenId + '&project_id=' + project_id + '&ZipCodeId=' + ZipCodeId + '&UnitCodeId=' + UnitCodeId/*+ '&files=' + files*/,
                            //url: '@Url.Action("AddBudgetDetails", "ProjectsBudget")',
                            type: "POST",
                            dataType: "json",
                            processData: false, //remember to set processData and ContentType to false, otherwise you may get an error
                            contentType: false,
                            data: fileData,
                            //contentType: 'application/json; charset=utf-8',
                            success: function (result) {
                                $.loader('close');
                                debugger;
                                options.success(result);
                                if (result.data.Result > 0) {
                                    debugger;
                                    $('#project_budget_details_id').val(result.data.Id);
                                    $('#ProjectId').val(project_id);
                                    $('#project_budget_id').val(result.data.project_budget_id);
                                    //'@ViewBag.Project_Budget_Id' = result.data.project_budget_id;
                                     notify(result.data.Errormessage, "success");
                                }
                                $("#grid1").data('kendoGrid').dataSource.read();
                                $("#grid1").data('kendoGrid').refresh();

                            },
                            error: function (result) {
                                //debugger;
                                //notify(result.data.Errormessage, "error");
                                options.error(result);
                            }
                        });
                    }
                    else {
                        $('div.k-loading-mask').css('display', 'none');
                    }
                    },
                update: function (options) {
					debugger;
					CalculateGSTTotalAmountSave(options);
                    var SalesmenId = $('#SalesmenId').val();
                    var project_id = $('#AddressId').val();
                    var ZipCodeId = $("#ZipCodeId").val();
                    @*if (ZipCodeId == "" || ZipCodeId == null) {
                        if (@Model.Zip_CodeId != null || @Model.Zip_CodeId != "") {
                            ZipCodeId = @Model.Zip_CodeId;
                        }
                        else {
                            ZipCodeId = 0;
                        }
                    }*@
                    var UnitCodeId = $("#UnitCodeId").val();
                    @*if (UnitCodeId == "" || UnitCodeId == null) {
                        if (@Model.Unit_CodeId.Length > 0 || @Model.Unit_CodeId != "") {

                            UnitCodeId = @Model.Unit_CodeId.ToString();
                        }
                        else {
                            UnitCodeId = "";
                        }
                    }*@
                    var isValid = ValidationForCreate();
                    debugger;
                    var fileUpload = $('[name = "upload"]').get(0);
                    var files = fileUpload.files;
                    if (files.length > 0) {
                        var fileData = new FormData();
                        fileData.append(files[0].name, files[0]);


                    }
                    else {
                        notify("Please Select Files", "error");
                        $('div.k-loading-mask').css('display', 'none');
                        return false;
                    }
                    var ProjectBudgetid = $('#project_budget_id').val();
                    if (ProjectBudgetid > 0) {
                        options.data.models[0].project_budget_id = ProjectBudgetid;
                    }
                   //fileData = "";
                   // files = "";
                    if (isValid) {
                        options.data.models[0].project_name = "";
                        $.loader({ content: "<table><tr><td><h5>Update Of Budget Cost is in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
                        $.ajax({
                            url: '@Url.Action("AddBudgetDetails", "ProjectsBudget")?JsonBudget=' + encodeURIComponent(JSON.stringify(options.data.models[0])) + '&SalesmenId=' + SalesmenId + '&project_id=' + project_id + '&ZipCodeId=' + ZipCodeId + '&UnitCodeId=' + UnitCodeId/*+ '&files=' + files*/,

                            type: "POST",
                            dataType: "json",
                            processData: false, //remember to set processData and ContentType to false, otherwise you may get an error
                            contentType: false,
                            data: fileData,
                            //contentType: 'application/json; charset=utf-8',
                            success: function (result) {
                                debugger;
                                $.loader('close');
                                if (result.data.Result > 0) {
                                    $('#project_budget_details_id').val(result.data.Id);
                                    $('#project_budget_id').val(result.data.project_budget_id);
                                    notify(result.data.Errormessage, "success");
                                }
                                $("#grid1").data('kendoGrid').dataSource.read();
                                $("#grid1").data('kendoGrid').refresh();
                                options.success(result);
                            },
                            error: function (result) {
                                //debugger;
                                // notify(result.data.Errormessage, "error");
                                options.error(result);
                            }
                        });
                    }
                    else
                    {
                        $('div.k-loading-mask').css('display', 'none');
                    }
                },
                 destroy: function (options) {
                    debugger
                     var project_budget_details_id = options.data.models[0].project_budget_details_id;
                    $.ajax({
                        url: '@Url.Action("Remove_Project_Budget_Detail", "ProjectsBudget")?project_budget_details_id=' + project_budget_details_id,
                        type: "POST",
                        dataType: "json",
                        data: {},
                        success: function (result) {
                            debugger
                            $("#grid1").data('kendoGrid').dataSource.read();
                            $("#grid1").data('kendoGrid').refresh();
                            if (result.data.Result > 0) {
                                notify(result.data.Errormessage, "success");
                            }
                            else {
                                notify(result.data.Errormessage, "error");
                            }
                            options.success(result);
                        },
                        error: function (result) {
                            debugger
                            options.error(result);
                        }
                    });
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                }
            },
            batch: true,
            pageSize: 20,
            schema: {
                data: "data.Items", total: "data.TotalCount",
                model: {
                    project_budget_details_id: "project_budget_details_id",
                    project_budget_id:"project_budget_id",
                    fields: {
                        project_budget_details_id: { type: "number", defaultValue: 0 },
                        project_budget_id: { type: "number", defaultValue: 0 },
                        supplier: { defaultValue: { Supplier_id: 0, Supplier_Name: "--select--" }, validation: { required: true } },
                        InvoiceNumber: { validation: { required: true } },
                        InvoiceAmtWithGST: { type: "number",validation: { required: true }},
                        GSTPercent: { type: "number",validation: { required: true },defaultValue: 7 },
                        GSTAmount: { type: "number", validation: { required: true } },
                        budget_amount: { type: "number", validation: { required: true } },
                        BudgetCostType: { defaultValue: { BudgetCostType_id: 1, BudgetCostType_type: "Invoice" }, validation: { required: true } },
                        StatusId: { validation: { required: false }, editable: false },

                    }
                }
            }
        });

        $("#grid1").kendoGrid({
            dataSource: dataSource,
            dataBound: function (e) {
                $("input[type='file']").kendoUpload();
            },
			navigatable: true,
            toolbar: ["create"],
            pageable: {
                pageSizes: [10, 20, 30, 50, "all"]
            },
            sortable: true,
            autoSync: true,
            columns: [



                { field: "project_budget_details_id", hidden: true },
                { field: "project_budget_id", hidden: true },
                { field: "supplier", title: "Supplier", editor: SupplierDropDownEditor, template: "#=supplier.Supplier_Name#"},
                { field: "BudgetCostType", title: "Type", editor: BudgetCostTypeDropDownEditor, template: "#=BudgetCostType.BudgetCostType_type#" },
                { field: "InvoiceNumber", title: "Inv No" },
				{ field: "InvoiceAmtWithGST", title: "Inv Amt with GST", format: "{0:c}", attributes: { style: "text-align:right;" } },
                { field: "GSTPercent", title: "GST %"  },
                { field: "GSTAmount", title: "GST Amt", format: "{0:c}", attributes: { style: "text-align:right;" }},
                { field: "budget_amount", title: "Amount", format: "{0:c}", attributes: { style: "text-align:right;" } },
                { field: "StatusId", title: "Status", editable: false, hidden: true },
                {
                    title: "Upload",
                    filterable: false,
                    sortable: false,
                    template: "#= uploadInput #"
                },
                {
                    command: [
                        { name: "preview", text: "", className: "view_icon", iconClass: "k-icon ", click: InvoiceFilePreview }
                    ], title: "view Invoice", width: "115px", hidden: !IsEditMode
                },
                {
                    command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
                    { name: "destroy", text: " ", iconClass: "k-icon k-i-delete" }], title: "Action", width: "100px"
                },

                /*{ field: "", title: "Upload", template: "<input type=\"file\" class=\"form-control-file\" name=\"file\" >"},*/
            ],
            editable: "inline",
			edit: function (e) {

				CalculateGSTTotalAmount(e);
			}
        }).data("kendoGrid");

        $("#grid1").kendoTooltip({
            filter: ".k-grid-update",
            autoHide: true,
            content: function (e) {
                return "Update Item";
            }
        });
    }

    function BudgetCostTypeDropDownEditor(container, options) {
        $('<input required name="' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                            filter: "contains",
                        autoBind: false,
                        optionLabel: "Select Invoice Type",
                        dataTextField: "BudgetCostType_type",
                        dataValueField: "BudgetCostType_id",
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: '@Url.Action("BindBudgetCostType", "Master")',
                                        type: "GET",
                                        dataType: "json",
                                        contentType: "application/json; charset=utf-8"
                                    }
                                },
                                parameterMap: function (options, operation) {
                                    if (operation !== "read" && options.models) {
                                        return { models: kendo.stringify(options.models) };
                                    }
                                },
                            schema: {
                                data: "data"
                                },
                                sort: { field: "BudgetCostType_type", dir: "asc" },
                        },
                    });
    }

    function SupplierDropDownEditor(container, options) {
        debugger;
	$('<input required name="' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                            filter: "contains",
                        autoBind: false,
                        optionLabel: "Select Supplier",
                        dataTextField: "Supplier_Name",
                        dataValueField: "Supplier_id",
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: '@Url.Action("BindSupplier", "Master")',
                                        type: "GET",
                                        dataType: "json",
                                        contentType: "application/json; charset=utf-8"
                                    }
                                },
                                parameterMap: function (options, operation) {
                                    if (operation !== "read" && options.models) {
                                        return { models: kendo.stringify(options.models) };
                                    }
                                },
                            schema: {
                                data: "data"
                                },
                                sort: { field: "Supplier_Name", dir: "asc" },
                        },
                    });
    }

    function CalculateGSTTotalAmount(e) {
        debugger;
        var InvoiceAmtWithGSTEditor = e.container.find("input[name=InvoiceAmtWithGST]").data("kendoNumericTextBox");
        var GSTPercentEditor = e.container.find("input[name=GSTPercent]").data("kendoNumericTextBox");
        var GSTAmountEditor = e.container.find("input[name=GSTAmount]").data("kendoNumericTextBox");
        var budget_amountEditor = e.container.find("input[name=budget_amount]").data("kendoNumericTextBox");
        var BudgetType = e.container.find("input[name=BudgetCostType]");
        InvoiceAmtWithGSTEditor.bind("change", function (e) {

            //debugger;

            var InvoiceAmtWithGST = this.value();
            var GSTPercent = GSTPercentEditor.value();

            var tolalamount = parseFloat(InvoiceAmtWithGST);

            var gPer = 0;
            if (GSTPercent > 0) {
                gPer = parseFloat(GSTPercent);
            }

            var gstp = parseFloat(gPer / 100) + 1;
            if (String(tolalamount).length > 0 && String(gstp).length > 0) {
                var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
                var GST = parseFloat(tolalamount - CAmount).toFixed(2);
                if (String(GST) == "NaN") {
                    GST = "0.00";
                }
                if (String(CAmount) == "NaN") {
                    CAmount = "0.00";
                }
                GSTAmountEditor.value(GST);
                budget_amountEditor.value(CAmount);
                var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
                var row = e.sender.element.closest("tr");
                var dataItem = grid.dataItem(row);
                console.log(dataItem);
                dataItem.set('GSTAmount', GST);
                dataItem.set('budget_amount', CAmount);
            }

        });
        GSTPercentEditor.bind("change", function (e) {

            //debugger;

            var GSTPercent = this.value();
            var InvoiceAmtWithGST = InvoiceAmtWithGSTEditor.value();

            var tolalamount = parseFloat(InvoiceAmtWithGST);

            var gPer = 0;
            if (GSTPercent > 0) {
                gPer = parseFloat(GSTPercent);
            }

            var gstp = parseFloat(gPer / 100) + 1;
            if (String(tolalamount).length > 0 && String(gstp).length > 0) {
                var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
                var GST = parseFloat(tolalamount - CAmount).toFixed(2);
                if (String(GST) == "NaN") {
                    GST = "0.00";
                }
                if (String(CAmount) == "NaN") {
                    CAmount = "0.00";
                }
                GSTAmountEditor.value(GST);

                budget_amountEditor.value(CAmount);
                var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
                var row = e.sender.element.closest("tr");
                var dataItem = grid.dataItem(row);
                console.log(dataItem);
                dataItem.set('GSTAmount', GST);
                dataItem.set('budget_amount', CAmount);
            }

        });
    }

    function CalculateGSTTotalAmountSave(options) {
        //debugger;
        var InvoiceAmtWithGST = options.data.models[0].InvoiceAmtWithGST;
        var GSTPercent = options.data.models[0].GSTPercent;
        var GSTAmountEditor = options.data.models[0].GSTAmount;
        var budget_amountEditor = options.data.models[0].budget_amount;
        var budgetType = options.data.models[0].BudgetCostType.BudgetCostType_id;
        var tolalamount = parseFloat(InvoiceAmtWithGST);
        var gPer = 0;
        if (GSTPercent > 0) {
            gPer = parseFloat(GSTPercent);
        }
        var gstp = parseFloat(gPer / 100) + 1;
        if (String(tolalamount).length > 0 && String(gstp).length > 0) {
            
            var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
            var GST = parseFloat(tolalamount - CAmount).toFixed(2);
            if (budgetType == 2) {
                CAmount = CAmount * (-1);
                GST = GST * (-1);
                tolalamount = tolalamount * (-1);
            }
            if (String(GST) == "NaN") {
                GST = "0.00";
            }
            if (String(CAmount) == "NaN") {
                CAmount = "0.00";
            }
            //GSTAmountEditor.value(GST);
            //budget_amountEditor.value(CAmount);
            options.data.models[0].GSTAmount = GST;
            options.data.models[0].budget_amount = CAmount;
            options.data.models[0].InvoiceAmtWithGST = tolalamount;
        }
    }

    function ValidationForCreate() {
        //debugger;;
        var SalesmenId = $('#SalesmenId').val();
        var project_id = $('#AddressId').val();
        if (SalesmenId == "" || SalesmenId == null || SalesmenId == "0") {
            notify("Please select Salesmen", "error");
            return false;
        }
        else if (project_id == "" || project_id == null || project_id == "0") {
            notify("Please select Address/Site", "error");
            return false;
        }
        else {
            return true;
        }
    }

    //function getEditDocumentPath() {
    //    var project_id = $('#hdnProjectID').val();

    //    $.ajax({
    //        type: "POST",
    //        url: "/ProjectsBudget/GetFilePathById", // the URL of the controller action method
    //        data: { "ProjectId": project_id, "IdType": 10 },
    //        dataType: 'Json',
    //        success: function (list) {
    //            debugger;
    //            $('#upload').val(list.data);
    //        },
    //        error: function (jqXHR, textStatus, errorThrown) {
    //            $.loader('close');
    //            notify("Fail", "error");
    //            notify(jqXHR, "error");
    //        }
    //    });
    //}

    </script>
