
@{
    ViewBag.Title = "Packages";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .k-grid .k-grid-toolbar .k-grid-add,
    .k-grid tbody .k-grid-edit,
    .k-grid tbody .k-grid-update,
    .k-grid tbody .k-grid-cancel,
    .k-grid tbody .k-grid-delete {
        min-width: 0;
    }

        .k-grid .k-grid-toolbar .k-grid-add .k-icon,
        .k-grid tbody .k-grid-edit .k-icon,
        .k-grid tbody .k-grid-update .k-icon,
        .k-grid tbody .k-grid-cancel .k-icon,
        .k-grid tbody .k-grid-delete .k-icon {
            margin: 0;
        }

    .text_capitalize {
        text-transform: capitalize
    }

    .isactive {
        color: white;
        background: #64aee9;
    }
    .active_btn {
        /*background: #64aee9;*/
        /*color: #64aee9;*/
        color: green;
        border: 1px solid green;
        background: #1cc34363;
    }
    
</style>
<div class="modal" tabindex="-1" id="ModelForCopyPackagedetailID" role="dialog">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Clone Package Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 form-group">
                        <label class="control-label" for="from_date"><span class="data_inline_label">Plan</span></label>
                        <div class="clone_select2_dropdown">
                            <select name="PlanId" id="PlanId" class="form-control" required="required">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 form-group">
                        <label class="control-label" for="from_date"><span class="data_inline_label">Package</span></label>
                        <div class="clone_select2_dropdown">
                            <select name="PackageTypeId" id="PackageTypeId" class="form-control" required="required">
                            </select>
                        </div>
                    </div>

                    <div class="col-md-12 form-group">
                        <label class="control-label" for="from_date"><span class="data_inline_label">Floor</span></label>
                        <div class="clone_select2_dropdown">
                            <select name="FloorId" id="FloorId" class="form-control" required="required">
                            </select>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <label for="from_date" class="control-label text-right "><span class="data_inline_label">Valid From</span></label>
                        <div class="input-group">
                            <input type="text" id="date_range" name="date_range" class="form-control date_form_control" readonly />
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <input type="checkbox" id="chkIsGlobal" />&nbsp;&nbsp;&nbsp;<label for="from_date" class="control-label text-right "><span class="data_inline_label">Is Global Package</span></label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="save_header" onclick="CreatePackageWithDetails()">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="ClearPackage()">Close</button>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="ExistingPackageId" class="form-control col-8" />

<div class="panel box-shadow-none content-header">
    <div class="panel-body">
        <div class="row">
            <div class="col-md-6 col-6">
                <h3 class="animated fadeInLeft text-primary">Packages List</h3>
            </div>
            <div class="col-md-6 col-6 ">
                <button type="button" onclick="AddNewPackage();" class='btn btn-primary pull-right'>
                    <i class="fa fa-plus" aria-hidden="true"></i><span style="padding-left:10px;">
                        Add New Package
                    </span>
                </button>
            </div>
        </div>

    </div>
</div>
<div class="row mx-3">
    <div class="col-md-12">
        <div class="responsive-table">
            <div id="Packagegrid"></div>
        </div>
    </div>
</div>

<div id="modalWindow">
    @*<h2>Are you sure to Delete?</h2>*@
    <h6> You want to print quantity column?</h6>
    @*<span class="k-label">Reason For Deletion</span> <input id="txtReasonForChange" class="k-textbox" />*@
    <button id="yes" class="btn btn-primary pull-right ml-2 mb-2">Yes</button>
    <button id="no" class="btn btn-primary pull-right ml-2 mb-2">No</button>
    @*<span id="validationRFC" class="k-label alert-danger"></span>*@
</div>

<script>
    function CreatePackageWithDetails() {
        //debugger;
        var isValid = ValidationCreatePackage();
        if (isValid) {
        var PlanId = $('#PlanId').val();
        var package_type_id = $('#PackageTypeId').val();
        var FloorId = $('#FloorId').val();
        var valid_from = $('#date_range').data('daterangepicker').startDate;
        var valid_to = $('#date_range').data('daterangepicker').endDate;
        var ExistingPackageId = $('#ExistingPackageId').val();
        var IsGlobalPkg = $('#chkIsGlobal').prop('checked');

        var Values = {
            plan: { plan_id: PlanId },
            package: { package_type_id: package_type_id },
            floor: { floor_id: FloorId },
            valid_from: valid_from,
            valid_to: valid_to,
            ExistingPackageId: ExistingPackageId,
            isGlobalpkg: IsGlobalPkg
        };
        var JsonValues = JSON.stringify(Values);
         $.ajax({
                type: 'POST',
                url: '@Url.Action("Upsert_Package_For_Clone", "Package")',
             data: { "JsonPackage": JsonValues },
                dataType: 'Json',
                success: function (data) {
                    var Result = data.data.Result;
                    var Errormessage = data.data.Errormessage;
                    var NewPackageId = data.data.Id;
                    if (Result >0) {
                        //ClearPackage();
                       // notify(Errormessage, "success");
                        $('#save_header').prop('disabled', true);
                        $('#NewPackage').css('display', 'block');
                       // $('#PackageId').val(PackageId);
                        window.location = '@Url.Action("PackageDetail", "Package")?PackageId=' + NewPackageId;
                    }
                    else {
                        notify(Errormessage, "error");
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    notify("Fail", "error");
                    notify(jqXHR, "error");
                }
         });
        }
    }
    function ValidationCreatePackage() {
        if ($('#PlanId').val() == 0) {
            notify("Please Select Plan", "error");
        }
        else if ($('#PackageTypeId').val() == 0) {
            notify("Please Select Package", "error");
        }
        else if ($('#FloorId').val() == 0) {
            notify("Please Select Floor", "error");
        }
        else {
            return true;
        }
    }
    function ClearPackage() {
        //debugger
        $("#PlanId").select2("val", "0");
        $("#PackageTypeId").select2("val", "0");
        $("#FloorId").select2("val", "0");
        $('#save_header').prop('disabled', false);
        $('#NewPackage').css('display', 'none');
    }
    function AddNewPackage() {
        window.location = '@Url.Action("NewPackage", "Package")';
    }
    function FetchDatesFromDateRangePicker() {
        //debugger;
        $('#date_range').daterangepicker({

            "autoUpdateInput": true,
            "autoApply": true,
            locale: {
                format: 'DD/MM/YYYY',
                cancelLabel: 'Clear'
            },
            ranges: {
                //'Today': [moment(), moment()],
                //'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'Last 3 Months': [moment().subtract(3, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'Last 6 Months': [moment().subtract(6, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'Last 1 Year': [moment().subtract(12, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            },
            "alwaysShowCalendars": true,
        });

        $('#date_range').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY'));
        });

        $('#date_range').on('cancel.daterangepicker', function (ev, picker) {
            $(this).val('');
        });

        $('#date_range + .input-group-append').click(function () {
            $('#date_range').trigger("focus");
        });
        //Nithin Start Added Defaultly 1 month from present date in DateRangePicker
        //debugger
        var present_date = new Date();
        var previous_date = new Date();
        var date = previous_date.setFullYear(present_date.getFullYear() + 4, present_date.getMonth(), present_date.getDate() - 1)
        var previous_date = new Date(date);
        //var previous_date = present_date.setMonth(present_date.getMonth() - 1);
        $('#date_range').data('daterangepicker').setStartDate(present_date);
        $('#date_range').data('daterangepicker').setEndDate(previous_date);
        //Nithin End Added Defaultly 1 month from present date in DateRangePicker
    }
    $(document).ready(function () {
        wnd = $("#modalWindow").kendoWindow({
            title: "Quantity Confirmation",
            modal: true,
            visible: false,
            resizable: false,
            width: 300
        }).data("kendoWindow");
        BindPlan();
        BindFloor();
        BindPackageType();
        FetchDatesFromDateRangePicker();
        var GetDate = new Date();
    /* GetDate.setFullYear(GetDate.getFullYear() + 4)*/
        GetDate.setFullYear(GetDate.getFullYear() + 4, GetDate.getMonth(), GetDate.getDate() - 1)
        var NewDate = GetDate.toLocaleDateString('en-US', { day: "2-digit", month: "2-digit", year: "numeric" })
        NewDate = new Date(GetDate);

        kendo.ui.Grid.fn.onAddClearFilter = function () {
            //debugger
            var grid = this;
            grid.wrapper.find(".k-grid-add").on("click", function (e) {
                //console.log('onaddclearfilter');
                //send to first page if it's not already
                if (grid.pager) grid.pager.page(1);
                //clear the filter
                if (grid.dataSource) grid.dataSource.filter([]);
            });
        }

        dataSource = new kendo.data.DataSource({
                        transport: {
                            read: function (options) {
                                $.ajax({
                                    url: '@Url.Action("PackagesList", "Package")',
                                    type: "GET",
                                    dataType: "json",
                                    success: function (result) {
                                     //debugger
                                        options.success(result);                                       
                                           
                                    },
                                    error: function (result) {
                                        //debugger
                                        options.error(result);
                                    }
                                });
                            },
                            create: function (options) {
                                //debugger
                                $.ajax({
                                    url: '@Url.Action("CreatePackage", "Package")',
                                    type: "POST",
                                    dataType: "json",
                                    data: { JsonPackage: JSON.stringify(options.data.models[0]) },
                                    success: function (result) {
                                        //debugger
                                        $("#Packagegrid").data('kendoGrid').dataSource.read();
                                        $("#Packagegrid").data('kendoGrid').refresh();
                                        //kendo.alert(result.data.Errormessage);
                                        if (result.data.Result > 0) {

                                            notify(result.data.Errormessage, "success");
                                        }
                                        else {
                                            notify(result.data.Errormessage, "error");
                                        }
                                        options.success(result);
                                    },
                                    error: function (result) {
                                        //debugger
                                        options.error(result);
                                    }
                                });
                            },
                            update: function (options) {
                                //debugger
                                $.ajax({
                                    url: '@Url.Action("CreatePackage", "Package")',
                                    type: "POST",
                                    dataType: "json",
                                    data: { JsonPackage: JSON.stringify(options.data.models[0]) },
                                    success: function (result) {
                                        //debugger
                                        $("#Packagegrid").data('kendoGrid').dataSource.read();
                                        $("#Packagegrid").data('kendoGrid').refresh();
                                        //kendo.alert(result.data.Errormessage);
                                    /*if (result.data.Result == '2' || result.data.Result == '3') {*/
                                        if (result.data.Result > 0) {

                                            notify(result.data.Errormessage, "success");
                                        }
                                        else {
                                            notify(result.data.Errormessage, "error");
                                        }
                                        options.success(result);
                                    },
                                    error: function (result) {
                                        //debugger
                                        options.error(result);
                                    }
                                });
                            },
                                destroy: function (options) {
                                //debugger
                                    var package_id = options.data.models[0].package_id;
                                $.ajax({
                                    url: '@Url.Action("DeletePackages", "Package")?package_id=' + package_id,
                                    type: "POST",
                                    dataType: "json",
                                    success: function (result) {
                                        //debugger
                                        $("#Packagegrid").data('kendoGrid').dataSource.read();
                                        $("#Packagegrid").data('kendoGrid').refresh();
                                        if (result.data.Result > 0) {
                                            notify(result.data.Errormessage, "success");
                                        }
                                        else {
                                            notify(result.data.Errormessage, "error");
                                        }
                                        options.success(result);
                                    },
                                    error: function (result) {
                                        //debugger
                                        options.error(result);
                                    }
                                });
                            },

                            parameterMap: function (options, operation) {
                                if (operation !== "read" && options.models) {
                                    return { models: kendo.stringify(options.models) };
                                }
                            }
                        },
                        batch: true,
                        pageSize: 15,

                        schema: {
                            data: "data.Items", total: "data.TotalCount",
                            model: {
                                id: "package_id",
                                fields: {
                                    package_id: { editable: false, nullable: true },
                                    package_cd: { editable: false, nullable: true },//validation: { required: true }
                                    package: { type: "object", defaultValue: { package_type_id: 0, package_name: "-- Select --" } },
                                    plan: { type: "object",defaultValue: { plan_id: 0, plan_name: "-- Select --" }},
                                    floor: { type: "object",defaultValue: { floor_id: 0, floor_name: "-- Select --" }},
                                    valid_from: { validation: { required: true }, type: "date" },
                                    valid_to: { validation: { required: true }, type: "date", defaultValue: NewDate },
                                    total_amount: { validation: { required: true }, type: "number" },
                                    isactive: { editable: false, validation: { required: false }, type: "boolean"},
                                }
                            }
                        }
                        //,
                        //aggregate: [
                        //    { field: "total_amount", aggregate: "sum" }
                        //]

        });
        ///Nithin Commented

        var Packagegrid = $("#Packagegrid").kendoGrid({
            dataSource: dataSource,
            navigatable: true,
            pageable: true,

            toolbar: [{ name: "excel", text: "Export to Excel " }, { name: "search" },{ template: '   <a type="button" class="k-button" onclick="return  clearAllFilters()" style="float:right;" >Clear All Filters</a>' }, ],

            //toolbar: [
            //    { name: "create", text: "Add new Package" }
            //],
            //toolbar: [
            //    {
            //        template: '<a onclick="NewPackage()" class="k-button">Add New Package</a>'
            //       /* template: '<a class="k-button" href="\\#" onclick="return NewPackage()">Add</a>'*/
            //    }
            //],
            excel: {
                fileName: "Packages List.xlsx",
                allPages: true,
            },
            //Nithin Added For Filter Ascending Order
            filterMenuInit: function (e) {
                //debugger
                if (e.field === "total_amount" || e.field === "package_cd"  ) {
                    var filterMultiCheck = this.thead.find("[data-field=" + e.field + "]").data("kendoFilterMultiCheck")
                    filterMultiCheck.container.empty();
                    filterMultiCheck.checkSource.sort({ field: e.field, dir: "asc" });

                    // uncomment the following line to handle any grouping from the original dataSource:
                    // filterMultiCheck.checkSource.group(null);

                    filterMultiCheck.checkSource.data(filterMultiCheck.checkSource.view().toJSON());
                    filterMultiCheck.createCheckBoxes();
                }
            },
            filterable: true,
            //filter: function (e) {
            //    if (e.field == "package" && e.filter !== null) {
            //        var currentfilter = []
            //        var filterscount = e.filter.filters[0].length
            //        var value = e.filter.filters[0].value
            //        if (e.sender.datasource.filter() !== undefined) {
            //            currentfilter = e.sender.datasource.filter().filters // retain the other filters
            //        }
            //        currentfilter.push({ field: "package.package_name", operatot: "eq", value: value })
            //        e.preventdefault()
            //        e.sender.datasource.filter(currentfilter)
            //    }
            //},
            sortable: true,
            autoSync: true,
            resizable: true,
            reorderable: true,
            pageable: {
                pageSize: 15,
                buttonCount: 15,
                pageSizes: [5, 15, 30, 60, 100, 500],
                refresh: true,
                messages: {
                    display: "{0} - {1} of {2} packages", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
                    empty: "No packages to display",
                    page: "Page",
                    of: "of {0}", //{0} is total amount of pages
                    itemsPerPage: "packages per page",
                    first: "Go to the first page",
                    previous: "Go to the previous page",
                    next: "Go to the next page",
                    last: "Go to the last page",
                    refresh: "Refresh"
                }
            },

            dataBound: function (e) {
                debugger
                //Nithin Added for styling activate button 

                        var grid = $("#Packagegrid").data("kendoGrid");
                        var gridData = grid.dataSource.view();
                        for (var i = 0; i < gridData.length; i++) {
                            var currentUid = gridData[i].uid;
                            if (gridData[i].isactive == true) {
                                debugger
                                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                                var editButton = $(currenRow).find(".k-grid-Active");
                                editButton.addClass("active_btn");
                            } else {
                                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                                var editButton = $(currenRow).find(".k-grid-Active");
                              //  editButton.hide();
                                editButton.removeClass("active_btn");
                            }

                        }

             

                
            },
       
            //            $(".k-grid-Active").find("span").removeClass().addClass("fa fa-pencil btn-primary");

            columns: [
                {
                    command: [
                        //{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },

                        { name: "editdetails", text: " ", iconClass: "k-icon k-i-pencil", click: NewPackage },
                        { name: "copy", text: " ", iconClass: "k-icon k-i-copy", click: CopyPackageDetails },
                        { name: "Print", text: "", iconClass: "k-icon k-i-print", click: PrintPreview },
                        { name: 'Active', text: " ", iconClass: "k-icon k-i-checkmark", id: "Active123", click: ActDeactPackage, className: "active_btn",},
                        { name: "destroy", text: " ", iconClass: "k-icon k-i-delete" },

                        /*{ template: "<div id = 'ActDeact' class='btn grid-action-btn btn-xs' title='Click here to change status for this package' onclick= \"ActDeactPackage()\"><i class='fa fa-user'></i></div> " }*/], title: "Action", width: "125px"
                },//k-i-checkmark-outline

                { field: "package_id", hidden: true },
                /*  { field: "package_cd", hidden: true },*/
                { field: "package_cd", title: "Code", width: "110px", filterable: { multi: true, search: true }, editable: false },
                { field: "plan.plan_name", title: "Plan", width: "90px", editor: PlanDropDownEditor, template: "#=plan.plan_name#", filterable: { multi: true, search: true } },
                { field: "package.package_name", title: "Package", width: "180px", editor: PackageDropDownEditor, template: "#=package.package_name#", filterable: { multi: true, search: true } },
                { field: "floor.floor_name", title: "Floor", width: "80px", editor: FloorDropDownEditor, template: "#=floor.floor_name#", filterable: { multi: true, search: true } },
                { field: "valid_from", title: "Valid From", width: "100px", format: "{0:dd-MMM-yyyy}", filterable: { multi: true, search: true } },
                { field: "valid_to", title: "Valid To", width: "100px", format: "{0:dd-MMM-yyyy}", filterable: { multi: true, search: true } },
                { field: "total_amount", title: "Total Amt ($)", width: "100px", format: "{0:c}", attributes: { style: "text-align:right;" }, filterable: { multi: true, search: true } },
                { field: "isactive", title: "Is Active", width: "90px", filterable: { multi: true, search: true }, attributes: { style: "text-align:center;", "class": "text_capitalize" }, editable: false }],
                         editable: "inline"
        }).data("kendoGrid");
        Packagegrid.onAddClearFilter();

 
   
      
           function PlanDropDownEditor(container, options) {
           /*$('<input required name="' + options.field + '"/>')*/
               $('<input data-bind="value:plan"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            filter: "contains",
                            autoBind: false,
                            dataTextField: "plan_name",
                            dataValueField: "plan_id",
                               dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: '@Url.Action("PlanDropDownList", "Master")',
                                            type: "GET",
                                            dataType: "json",
                                            contentType: "application/json; charset=utf-8"
                                        }
                                   },
                                   parameterMap: function (options, operation) {
                                       if (operation !== "read" && options.models) {
                                           return { models: kendo.stringify(options.models) };
                                       }
                                   },
                                schema: {
                                    data: "data"
                                   }
                            },
                            noDataTemplate: $("#PlanTemplate").html()
                        });
           }

           function PackageDropDownEditor(container, options) {
               //$('<input required name="' + options.field + '"/>')
               $('<input data-bind="value:package"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            filter: "contains",
                            autoBind: false,
                            dataTextField: "package_name",
                            dataValueField: "package_type_id",
                               dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: '@Url.Action("PackageDropDownList", "Master")',
                                            type: "GET",
                                            dataType: "json",
                                            contentType: "application/json; charset=utf-8"
                                        }
                                   },
                                   parameterMap: function (options, operation) {
                                       if (operation !== "read" && options.models) {
                                           return { models: kendo.stringify(options.models) };
                                       }
                                   },
                                schema: {
                                    data: "data"
                                }
                            },
                            noDataTemplate: $("#PackageTypeTemplate").html()
                        });
           }

           function FloorDropDownEditor(container, options) {
           /*$('<input required name="' + options.field + '"/>')*/
               $('<input data-bind="value:floor"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            filter: "contains",
                            autoBind: false,
                            dataTextField: "floor_name",
                            dataValueField: "floor_id",
                               dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: '@Url.Action("FloorDropDownList", "Master")',
                                            type: "GET",
                                            dataType: "json",
                                            contentType: "application/json; charset=utf-8"
                                        }
                                   },
                                   parameterMap: function (options, operation) {
                                       if (operation !== "read" && options.models) {
                                           return { models: kendo.stringify(options.models) };
                                       }
                                   },
                                schema: {
                                    data: "data"
                                }
                            },
                            noDataTemplate: $("#FloorTemplate").html()
                        });
        }
    
       });

    function NewPackage(e) {
        //debugger;
        var tr = $(e.target).closest("tr");    // get the current table row (tr)
        var item = this.dataItem(tr);          // get the date of this row
      //  $.ajax({ url: '@Url.Action("NewPackage", "Package")', data: { PackageId: item.package_cd } });
        window.location = '@Url.Action("PackageDetail", "Package")?PackageId=' + item.package_id;
        @*document.location = '@Url.Action("NewPackage", "Package" )';*@
    }

    function ActDeactPackage(e) {
        //debugger;
        var tr = $(e.target).closest("tr");    // get the current table row (tr)
        var item = this.dataItem(tr);
        var PackageId = item.package_id;// get the date of this row
        var ActDeactId = item.isactive;
        var Reason = "";
        if (ActDeactId === true) {
           // debugger
            ActDeactId = false;
               // $('a.k-grid-Active').removeClass('active_btn');
          
           // debugger
        }
        else {
            ActDeactId = true;


        }
        var Values = {
            package_id: PackageId,
            isActive: ActDeactId,
            Reason: Reason,
        };
        var JsonValues = JSON.stringify(Values);
        $.ajax({
            type: "POST",
            url: "/Package/Update_ActDeactPackage", // the URL of the controller action method
            data: { "JsonPackage": JsonValues },
            dataType: 'Json',
            success: function (data) {
                //debugger;
                var Result = data.data.Result;
                var Errormessage = data.data.Errormessage;
                if (Result > 0) {
                    //debugger;
                    $("#Packagegrid").data('kendoGrid').dataSource.read();
                    $("#Packagegrid").data('kendoGrid').refresh();
                    notify(Errormessage, "success");
                }
                else {
                    notify(Errormessage, "error");
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $.loader('close');
                notify("Fail", "error");
                notify(jqXHR, "error");
            }
        });
    }
 
    function CopyPackageDetails(e) {
        //debugger;
        var tr = $(e.target).closest("tr");    // get the current table row (tr)
        var item = this.dataItem(tr);
        var PackageId = item.package_id;
        $('#ExistingPackageId').val(PackageId);
        $('#ModelForCopyPackagedetailID').modal('show');
    }
    function BindPlan() {
        $.get('@Url.Action("PlanDropDownList", "Master")', function (list) {
            /*//debugger*/
            if (list != null) {
                var items = [];
                items.push("<option value=" + 0 + ">" + "Select Plan" + "</option>");
                var i;
                for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].plan_id + ">" + list.data[i].plan_name + "</option>");
                }
                $("#PlanId").html(items.join(' '));
                $('#PlanId').select2();
            }
            else {
                var items = [];
               // items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#PlanId").html(items.join(' '));
                $('#PlanId').select2();
            }
        });

    }

       function BindFloor() {
        $.get('@Url.Action("FloorDropDownList", "Master")', function (list) {
            /*//debugger*/
            if (list != null) {
                var items = [];
                items.push("<option value=" + 0 + ">" + "Select Floor" + "</option>");
                var i;
                for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].floor_id + ">" + list.data[i].floor_name + "</option>");
                }
                $("#FloorId").html(items.join(' '));
                $('#FloorId').select2();
            }
            else {
                var items = [];
               // items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#FloorId").html(items.join(' '));
                $('#FloorId').select2();
            }
        });

    }

    function BindPackageType() {
        //debugger;
        $.get('@Url.Action("PackageDropDownList", "Master")', function (list) {
            /*//debugger*/
            if (list != null) {
                var items = [];
                items.push("<option value=" + 0 + ">" + "Select Package" + "</option>");
                var i;
                for (i = 0; i < list.data.length; i++) {
                    items.push("<option value=" + list.data[i].package_type_id + ">" + list.data[i].package_name + "</option>");
                }
                $("#PackageTypeId").html(items.join(' '));
                $('#PackageTypeId').select2();
            }
            else {
                var items = [];
               // items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
                $("#PackageTypeId").html(items.join(' '));
                $('#PackageTypeId').select2();
            }
        });

    }


    
    //Tooltips For Kendogrid Action Btn

    $("#Packagegrid").kendoTooltip({
        filter: ".k-grid-copy",
        autoHide: true,
        content: function (e) {
            return "Package Clone";
        }
    });
    $("#Packagegrid").kendoTooltip({
        filter: ".k-grid-editdetails",
        autoHide: true,
        content: function (e) {
            return "Edit Package Details";
        }
    });
    $("#Packagegrid").kendoTooltip({
        filter: ".k-grid-delete",
        autoHide: true,
        content: function (e) {
            return "Delete Package";
        }
    });
    $("#Packagegrid").kendoTooltip({
        filter: ".k-grid-Active",
        autoHide: true,
        content: function (e) {
            return "Activate / Deactivate Package";
        }
    });
    $("#Packagegrid").kendoTooltip({
        filter: ".k-grid-Print",
        autoHide: true,
        content: function (e) {
            return "Print Package";
        }
    });

</script>
<script id="FloorTemplate" type="text/x-kendo-tmpl">
    <div>
        No data found. Do you want to add new item - '#: instance.filterInput.val() #' ?
    </div>
    <br />
    <button class="k-button" onclick="addNewFloor('#: instance.filterInput.val() #' )">Add new Floor</button>
</script>
<script id="PackageTypeTemplate" type="text/x-kendo-tmpl">
    <div>
        No data found. Do you want to add new item - '#: instance.filterInput.val() #' ?
    </div>
    <br />
    <button class="k-button" onclick="addNewPackageType('#: instance.filterInput.val() #' )">Add new Package Type</button>
</script>
<script id="PlanTemplate" type="text/x-kendo-tmpl">
    <div>
        No data found. Do you want to add new item - '#: instance.filterInput.val() #' ?
    </div>
    <br />
    <button class="k-button" onclick="addNewPlan('#: instance.filterInput.val() #' )">Add new Plan</button>
</script>
<script>
    function addNewFloor(name) {
        var List = new Array();
        var Values = {
            floor_id: 0,//$('#category_Id').val(),
            floor_name: name,
            floor_description:name,
            isactive:1
        };
        List.push(Values);
        var JsonValues = JSON.stringify(List);
         $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateNewFloor", "Master")',
             data: { "JsonValues": JsonValues },
                dataType: 'Json',
                success: function (data) {
                    var Result = data.Result;
                    if (Result == "1") {
                    }
                    else {

                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Fail');
                    alert(jqXHR);
                }
            });
    }
     function addNewPackageType(name) {
        var List = new Array();
        var Values = {
            package_type_id: 0,
            package_name: name,
            package_description:name,
            isactive:1
        };
        List.push(Values);
        var JsonValues = JSON.stringify(List);
         $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateNewPackageType", "Master")',
             data: { "JsonValues": JsonValues },
                dataType: 'Json',
                success: function (data) {
                    var Result = data.Result;
                    if (Result == "1") {
                    }
                    else {

                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Fail');
                    alert(jqXHR);
                }
            });
    }
    function addNewPlan(name) {
        var List = new Array();
        //debugger;
        var Values = {
            plan_id: 0,
           // plan_cd: "",
            plan_name: name,
            plan_description: name,
            isactive:1
        };
        List.push(Values);
        var JsonValues = JSON.stringify(List);
         $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateNewPlan", "Master")',
             data: { "JsonValues": JsonValues },
                dataType: 'Json',
                success: function (data) {
                    var Result = data.Result;
                    if (Result == "1") {
                    }
                    else {

                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Fail');
                    alert(jqXHR);
                }
            });
    }
    function PrintPreview(e) {
        //debugger;
        var tr = $(e.target).closest("tr");    // get the current table row (tr)
        var item = this.dataItem(tr);
        wnd.center().open();
        $("#yes").click(function () {
            //debugger
           @*// location.href = '@Url.Action("PrintPreview", "Package")?Id=' + item.package_id + "&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + true;*@
             window.open('@Url.Action("PrintPreview", "Package")?Id=' + item.package_id + "&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + true, "socialPopupWindow",
                 "location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
            //routes.MapRoute(
            //    "Package",
            //    "{Package}/{PrintPreview}/{id}",
            //    new { controller = "Package", action = "PrintPreview", id =  item.package_id }
            wnd.close();
        });
        $("#no").click(function () {
            //debugger
          @*//  location.href = '@Url.Action("PrintPreview", "Package")?Id=' + item.package_id + "&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + false;*@
                window.open('@Url.Action("PrintPreview", "Package")?Id=' + item.package_id + "&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + false, "socialPopupWindow",
					"location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
            wnd.close();
        });
    }

    //Nithin Added to clear all filterrs
    function clearAllFilters() {
        $("#Packagegrid").data("kendoGrid").dataSource.filter({});
        $(".k-grid-search input").val("").trigger("input");
    }
</script>










