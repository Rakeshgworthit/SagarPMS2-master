@model PMS.Models.ReceiptsViewModel
@{
    Layout = null;
}
<div class="modal-header">
    <h4 class="modal-title">Add/Edit Customer Payment</h4>
    <button type="button" class="close" data-dismiss="modal">&times;</button>

</div>



<div class="modal-body">
    <form class="form-horizontal" id="frmReceipt" name="frmReceipt">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="pwd">Address/Site:</label>
                        <div class="col-sm-8">
                            @if (Model.isProjectClosed)
                            {
                                @Html.DropDownListFor(o => o.project_id, Model.projectList, new { @class = "form-control", @tabindex = "1", onchange = "ChkPayment();", @disabled = "disabled" })
                            }
                            else
                            {
                                @Html.DropDownListFor(o => o.project_id, Model.projectList, new { @class = "form-control", @tabindex = "1", onchange = "ChkPayment();" })
                            }
                            @Html.ValidationMessageFor(o => o.project_id, "", new { @class = "text-error" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="name">Receipt Date:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(o => o.receipt_date, "{0:dd/MM/yyyy}", new { @class = "form-control", @tabindex = "2" })
                            @Html.ValidationMessageFor(o => o.receipt_date, "", new { @class = "text-error" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="pwd">Mode of Payment:</label>
                        <div class="col-sm-8">
                            @Html.DropDownListFor(o => o.mode_of_payment_id, Model.mode_of_paymentList, new { @class = "form-control", @tabindex = "3" })
                            @Html.ValidationMessageFor(o => o.mode_of_payment_id, "", new { @class = "text-error" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="email">Bank:</label>
                        <div class="col-sm-8">
                            @Html.DropDownListFor(o => o.bank_id, Model.bankList, new { @class = "form-control", @tabindex = "4" })
                            @*@Html.ValidationMessageFor(o => o.bank_id, "", new { @class = "text-error" })*@

                            <span class="text-error bankvalidation field-validation-error" style="display:none;" data-valmsg-replace="true"><span for="bank_validation" class="">Please select bank.</span></span>


                        </div>
                    </div>

                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="email">Cheque Details:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(o => o.cheque_details, new { @class = "form-control", @tabindex = "5" })


                            <span class="text-error chequenumbervalidation field-validation-error" style="display:none;" data-valmsg-replace="true"><span for="cheque_number" class="">Please enter cheque number.</span></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="pwd">Invoice Amount with GST:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(o => o.total_amount, "{0:0.00}", new { @class = "form-control amount", @tabindex = "6" })
                            @Html.ValidationMessageFor(o => o.total_amount, "", new { @class = "text-error" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="email">Gst Percentage:</label>
                        <div class="input-group col-sm-8">
                                        @Html.DropDownListFor(o => o.gst_percentage,Model.GSTList, new { @class = "form-control amount", @tabindex = "7" })
                            @*<div class="input-group-append">
                                <span class="input-group-text">%</span>
                            </div>*@

                                        @Html.ValidationMessageFor(o => o.gst_percentage, "", new { @class = "text-error" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="pwd">Gst Amount:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(o => o.gst_amount, "{0:0.00}", new { @class = "form-control amount", @tabindex = "8" })
                            @Html.ValidationMessageFor(o => o.gst_amount, "", new { @class = "text-error" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <label class="control-label col-sm-4" for="email">Amount:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(o => o.amount, "{0:0.00}", new { @class = "form-control amount", @tabindex = "9" })
                            @Html.ValidationMessageFor(o => o.amount, "", new { @class = "text-error" })

                        </div>
                    </div>
                    @*<div class="form-group">
                            <label class="control-label col-sm-4" for="email">Is Active:</label>
                            <div class="col-sm-8">
                                @Html.DropDownListFor(o => o.isactive, Model.IsActiveList, new { @class = "form-control", @tabindex = "8" })
                            </div>
                        </div>*@
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group row">
                    <label class="control-label col-sm-2" for="email">Remarks:</label>
                    <div class="col-sm-10">
                        @Html.TextAreaFor(o => o.remarks, new { @class = "form-control", @tabindex = "10" })
                    </div>
                </div>
            </div>
        </div>


        @Html.HiddenFor(o => o.isactive)
        @Html.HiddenFor(o => o.project_id)
        @Html.HiddenFor(o => o.id)
        @Html.HiddenFor(o => o.created_date)
        @Html.HiddenFor(o => o.created_by)
    </form>
</div>
<div class="modal-footer">

    @*<button type="button" id="btnLoadSMS"  class='btn btn-primary'>
            SMS Preview
        </button>*@
    @if (@Model.id != 0)
    {
        <button id="btnSave" name="btnSave" type="submit" class="btn btn-primary" onclick="SaveForm();">Update & SMS</button>
    }
    else
    {
        <button id="btnSave" name="btnSave" type="submit" class="btn btn-primary" onclick="SaveForm();">Save & SMS</button>
    }
    <button id="btnClose" name="btnClose" type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseModal();">Close</button>
</div>

<script type="text/javascript">
   function CloseModal() {
        window.location = '@Url.Action("", "Receipts")';
    }
</script>

<script>
    //$(document).ready(function () {
    //    $("#btnLoadSMS").click(function () {
    //        var id=$("#project_id").val();
    //        openModelpop('/Receipts/LoadSMS', 'projectId', id);
    //    });
    //});
    $(function () {
        $("#project_id").chosen();
        //$("#project_id_chosen").width(260);

        $("#receipt_date").datepicker({ changeMonth: true, changeYear: true, dateFormat: "dd/mm/yy" });
        $('#receipt_date').removeAttr("data-val-date");


        $("#total_amount").blur(function () {
            CalculateGSTTotalAmount();
        });
        $("#gst_percentage").blur(function () {
            CalculateGSTTotalAmount();
        });
        $("#gst_percentage").keydown(function () {
            CalculateGSTTotalAmount();
        });
        $("#gst_percentage").keyup(function () {
            CalculateGSTTotalAmount();
        });

    });

    $("#gst_percentage").change(function () {
        debugger;
        CalculateGSTTotalAmount();
    });

    function CalculateGSTTotalAmount() {
        var tolalamount = parseFloat($("#total_amount").val());

        var gPer = 0;
        if ($("#gst_percentage").val() > 0) {
            gPer = parseFloat($("#gst_percentage").val());
        }

        var gstp = parseFloat(gPer / 100) + 1;
        if (String(tolalamount).length > 0 && String(gstp).length > 0) {
            var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
            var GST = parseFloat(tolalamount - CAmount).toFixed(2);
            if (String(GST) == "NaN") {
                GST = "0.00";
            }
            if (String(CAmount) == "NaN") {
                CAmount = "0.00";
            }

            $("#gst_amount").val(GST);
            $("#amount").val(CAmount)
        }


    }

    //function CalculateGSTTotalAmount() {
    //    var camount = $("#amount").val();

    //    $("#total_amount").val(camount);
    //    var gstp = $("#gst_percentage").val();
    //    if (String(camount).length > 0 && String(gstp).length > 0) {
    //        var GST = parseFloat((camount * gstp) / 100).toFixed(2);
    //        $("#gst_amount").val(GST);
    //        var totalamt = (parseFloat(camount) + parseFloat(GST)).toFixed(2);
    //        $("#total_amount").val(totalamt);
    //    }

    //}

    function SaveForm() {
        debugger;
        var form = $('#frmReceipt');
        var chval = false;
        if (String($("#mode_of_payment_id").val()) == "4" && $("#cheque_details").val() == "" && ($("#bank_id").val() == "" || $("#bank_id").val() == "0")) {
            $(".chequenumbervalidation").show();
            $(".bankvalidation").show();
            chval = true;
        }
        else if (String($("#mode_of_payment_id").val()) == "4" && $("#cheque_details").val() == "") {
            $(".chequenumbervalidation").show();
            $(".bankvalidation").hide();
            chval = true;
        } else if (String($("#mode_of_payment_id").val()) == "4" && ($("#bank_id").val() == "" || $("#bank_id").val() == "0")) {
            $(".bankvalidation").show();
            $(".chequenumbervalidation").hide();
            chval = true;
        } else {
            chval = false;
            $(".chequenumbervalidation").hide();
            $(".bankvalidation").hide();
        }
        $.validator.unobtrusive.parse(form);
        $("#project_id_chosen").next(".field-validation-valid").html('');
        if ($("#project_id").val() <= 0) {
            $("#project_id_chosen").next(".field-validation-valid").html('Please select a project');
            form.valid();
            return false;
        }
        if (form.valid() && chval == false) {
            debugger;
            var MOP_id = $("#mode_of_payment_id").val();
            var bank_id = $("#bank_id").val();
            var id = $("#project_id").val();
            var Values = {
                id: $("#id").val(),
                receipt_date: $("#receipt_date").val(),
                mode_of_payment: { MOP_id: MOP_id },//$("#mode_of_payment_id").val(),
                cheque_details: $("#cheque_details").val(),
                remarks: $("#remarks").val(),
                project_name: { id: id },//$("#project_id").val(),
                Banks: { bank_id: bank_id },// $("#bank_id").val(),
                amount: $("#amount").val(),
                gst_percentage: $("#gst_percentage").val(),
                gst_amount: $("#gst_amount").val(),
                total_amount: $("#total_amount").val(),
                isactive: $("#isactive").val(),
                branch_id: $("#branch_id").val()
            }

            var JsonValues = JSON.stringify(Values);
            $.loader({ content: "<table><tr><td><h5>Saving of Customer Payment In Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
            $.ajax({
                type: "POST",
                url: "/Receipts/UpsertCustomerPayments",//UpsertCustomerPayments // the URL of the controller action method
                //data: {
                //    id: $("#id").val(),
                //    receipt_date: $("#receipt_date").val(),
                //    mode_of_payment_id: $("#mode_of_payment_id").val(),
                //    cheque_details: $("#cheque_details").val(),
                //    remarks: $("#remarks").val(),
                //    project_id: $("#project_id").val(),
                //    bank_id: $("#bank_id").val(),
                //    amount: $("#amount").val(),
                //    gst_percentage: $("#gst_percentage").val(),
                //    gst_amount: $("#gst_amount").val(),
                //    total_amount: $("#total_amount").val(),
                //    isactive: $("#isactive").val(),
                //    branch_id: $("#branch_id").val()
                //}, // optional data
                data: { "JsonCustomerPayments": JsonValues },
                success: function (result) {
                    debugger;
                    $.loader('close');
                    if (result.data.Result > 0) {
                        notify(result.data.Errormessage, "success");
                        $("#id").val(result.data.Id);
                    }
                    else {
                        notify(result.data.Errormessage, "error");
                    }
                    //if (result.cls == "error") {
                    //    notify(result.msg, result.cls);
                    //} else {
                    //    //openModelpop('/Receipts/LoadSMS', 'projectId', $("#project_id").val());
                    //    loadGrid();
                    //    notify(result.msg, result.cls);
                    //}
                },
                error: function (req, status, error) {
                    // do something with error
                    notify(error, "error");
                }
            });
        }
    }

    function ChkPayment() {
        if ($("#project_id").val() > 0 && $("#id").val() == 0) {
            $("#project_id_chosen").next(".field-validation-valid").html('');
            $.ajax({
                type: "GET",
                url: "/Receipts/CheckReceipt", // the URL of the controller action method
                data: {
                    projectId: $("#project_id").val()
                },
                success: function (result) {
                    $("#remarks").html("Receipt - " + result);
                },
                error: function (req, status, error) {

                }
            });
        } else {
            if ($("#id").val() == 0) {
                $("#remarks").html("");
            }
        }
    }
</script>


