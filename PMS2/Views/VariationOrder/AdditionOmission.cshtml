
@{
    ViewBag.Title = "AdditionDetail";
}
<style>
    .data_inline {
        font-size: 1rem;
        font-weight: 500;
    }

    .data_inline_label {
        font-size: 1rem;
        font-weight: bold;
    }

    #discount {
        text-align: right;
        onBlurDiscount(): 0px;
        width: 120px;
    }

    .currency {
        text-align: right;
    }

    .negative_field {
        color: red;
        font-weight: bold;
    }

    .positive_field {
        color: green;
        font-weight: bold;
    }

    .collapse_header {
        background: #64aee9;
        color: white;
        font-weight: bold;
    }

    #discount, #discount_percentage {
        text-align: right;
        padding-right: 0px;
        width: 120px;
        padding: 10px;
    }
    /*.card-header:after {
        font-family: 'FontAwesome';
        content: "\f068";
        float: right;
    }

    .card-header.collapsed:after {*/
    /* symbol for "collapsed" panels */
    /*content: "\f067";
    }*/
</style>
<div class="panel box-shadow-none content-header">
    <div class="panel-body">
        <div class="row">
            <div class="col-md-6 col-7">
                <h3 class="animated fadeInLeft text-primary">Addition Omission</h3>
            </div>
            <div class="col-md-6 col-5 text-right ">
                <button type="button" onclick="VOList();" class='btn btn-primary ml-2 mb-2'>
                    Variation Order List
                </button>
                @*<button type="button" onclick="ContractList();" class='btn btn-primary ml-2 mb-2'>
                        <span>Contract List</span>
                    </button>*@
            </div>
        </div>
    </div>
</div>

<div class="row mx-1">
    <div class="col-md-12">
        <input type="hidden" id="date_range" name="date_range" class="form-control date_form_control" />
        <input type="hidden" id="ProjectId" class="form-control col-8" value="@ViewBag.ProjectId" />

        <input type="hidden" id="ProjDetailId" class="form-control " />

        <input type="hidden" id="VODetailId" class="form-control " />
        <input type="hidden" id="ParentTaskId" name="ParentTaskId" class="form-control" />


        <input type="hidden" id="hdnVODate" name="hdnVODate" class="form-control" value="@Model.project_number" />
        <input type="hidden" id="hdnCustomerName" name="hdnCustomerName" class="form-control" value="@Model.customer" />
        <input type="hidden" id="hdnSalesmenName" name="hdnSalesmenName" class="form-control" value=">@Model.salesmen" />
        <input type="hidden" id="hdnCustomerAddress" name="hdnCustomerAddress" class="form-control" value="@Model.project_name" />
        <input type="hidden" id="hdnProjectId" name="hdnProjectId" class="form-control" value="@Model.project_id" />


        <input type="hidden" id="VO_ID" class="form-control col-8" value="@ViewBag.vo_id" />
        @if (ViewBag.ShowHide == true)
        {

            <div class="card">
                <div class="card-header collapse_header" role="button" data-toggle="collapse" data-target="#contract_details" aria-expanded="true" aria-controls="contract_details" style="display:inline-block;">
                    @*<h5><a hre data-toggle="collapse" data-target="#contract_details" role="button" aria-expanded="false">Contract Details</h5>*@
                    <div class="row">
                        <div class="col-md-6 col-6">
                            <h4 class="mb-0">
                                Contract Details
                            </h4>
                        </div>
                        <div class="col-md-6 col-6 text-right">
                            <h4 class="text-right mb-0"><i class="fa fa-plus"></i></h4>
                        </div>

                    </div>
                </div>
                <div class="card-body collapse " id="contract_details">

                    <div class="row">
                        @*<div class="col-md-12">
                            <h4 class="animated fadeInLeft text-primary">Contract Details</h4>
                        </div>*@
                        <div class="col-md-3 col-sm-6">

                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Salesmen : </span></label>
                                <label class="control-label"><span class="data_inline">@Model.salesmen</span></label>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Customer : </span></label>
                                <label class="control-label"><span class="data_inline">@Model.customer</span></label>

                            </div>
                        </div>
                        <div class="col-md-4 col-sm-6">
                            <div class="form-group  ">
                                <label class="control-label" for="project_name"><span class="data_inline_label" style="font-size:20px">Address/Site :</span></label>
                                <label class="control-label"><span class="data_inline">@Model.project_name</span></label>

                            </div>
                        </div>
                        <div class="col-md-2 col-sm-6 ">
                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Status :</span></label>
                                <label class="control-label" id="StatusId"><span class="data_inline">@Model.status</span></label>

                            </div>
                        </div>


                    </div>
                    <div class="row ">
                        <div class="col-md-3 col-sm-6">
                            <div class="form-group">
                                <label for="from_date" class="control-label"><span class="data_inline_label" style="font-size:20px">Contr No: </span></label>
                                <label class="control-label">
                                    <span class="data_inline">@Model.project_number</span>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <label for="from_date" class="control-label"><span class="data_inline_label" style="font-size:20px">Contr Date: </span></label>
                            <label class="control-label">
                                <span class="data_inline">
                                    @Model.shortForwardDate
                                </span>
                            </label>
                        </div>
                        <div class="col-md-3 col-sm-6 ">
                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Amount :</span></label>
                                <label class="control-label"><span class="data_inline"><strong>$@Model.total_amount.ToString("#,##0.00")</strong></span></label>

                            </div>
                        </div>


                    </div>



                    <div id="VOAdditionGrid" class="accordion">
                    </div>

                    <br />

                    @* Start We need to have for Each Task Total*@
                    <br />
                    <br />
                    <div class="row justify-content-end ">
                        <div class="col-md-4 mr-4">
                            <table class="table task_total_amount_tables">
                                <tbody>
                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Sub Total :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="sub_total_amount_contr" name="sub_total_amount_contr">
                                                    $@Model.contract_amount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Discount %:</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="lbl_discount_percentage" name="lbl_discount_percentage">
                                                    $@Model.discount_percentage.ToString()
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Discount Amount:</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="discount_contr" name="discount_contr">
                                                    $@Model.discount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles"> Total :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="total_afterDiscount_contr" name="total_afterDiscount_contr">
                                                </label>
                                            </p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td align="right">

                                            <p class="task_total_amount_titles">
                                                <label class="task_total_amount_titles" id="gst_percentage_contr" name="gst_percentage_contr">
                                                    @Model.gst_percentage % GST :
                                                </label>
                                            </p>
                                        </td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="gst_amount_contr" name="gst_amount_contr">
                                                    $@Model.gst_amount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Grand Total :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                @*<span><i class="fa fa-dollar mr-2"></i></span>*@ <label id="grand_total_amount_contr" name="grand_total_amount_contr">
                                                    $@Model.total_amount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    @*VO-Addition details*@
                </div>
            </div>



        }

        <div class="row mt-3">
            <div class="col-md-12">
                <h3 class="animated fadeInLeft text-primary">Variation Order Details</h3>
            </div>

        </div>
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class=" col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Salesmen :</span></label>
                            @*<input type="text" class="form-control" value="@Model.salesmen" readonly />*@
                            <label class="control-label"><span class="data_inline">@Model.salesmen</span></label>
                        </div>

                        @*<label class="control-label"><span class="data_inline"></span></label>*@
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Customer : </span></label>
                            @*<input type="text" class="form-control" value="@Model.customer" readonly />*@

                            <label class="control-label"><span class="data_inline">@Model.customer</span></label>
                        </div>
                    </div>
                    <div class=" col-lg-4 col-md-4 col-sm-6">
                        <div class="form-group">
                            <label class="control-label" for="project_name"><span class="data_inline_label">Address/Site :</span></label>
                            <label class="control-label"><span class="data_inline">@Model.project_name</span></label>
                            @*<input type="text" class="form-control" id="VO_Date" value="@Model.project_name" readonly />*@

                        </div>

                    </div>


                    <div class="col-lg-2 col-md-2 col-sm-6 ">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Status :</span></label>
                            @*<input type="text" class="form-control" id="status" value="Draft" readonly />*@
                            <label class="control-label" id="status"><span class="data_inline">@Model.status</span></label>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class=" col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="from_date" class="control-label"><span class="data_inline_label">VO No : </span></label>

                            @*<input type="text" class="form-control" id="VO_Number" value="@Model.project_number" readonly />*@
                            <label class="control-label" id="VO_Number">
                                <span class="data_inline">@Model.project_number</span>
                            </label>
                        </div>
                    </div>
                    <div class=" col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="from_date" class="control-label"><span class="data_inline_label">VO Date : </span></label>
                            @*<input type="text" class="form-control" id="VO_Date" value="@Model.shortForwardDate" readonly />*@
                            <label class="control-label" id="VO_Date">
                                <span class="data_inline">
                                    @Model.shortForwardDate
                                </span>
                            </label>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-3 col-sm-6 ">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Amount :</span></label>

                            @*<input type="text" class="form-control" id="total_amount" value="$@Model.total_amount.ToString("#,##0.00")" readonly />*@

                            <label class="control-label" id="total_amount"><span class="data_inline"><strong>$@Model.total_amount.ToString("#,##0.00")</strong></span></label>
                        </div>
                    </div>

                    @*<div class="col-lg-3 col-md-3 col-sm-6 ">
                        <div class="form-group">
                            <button type="button" id="btnSendMail" onclick="OnClickSendMail();" class='btn btn-primary mb-2'>
                                <i class="fa fa-envelope"></i><span class="ml-2">Email</span>
                            </button>
                        </div>
                    </div>*@

                    <div class="col-md-3  px-2 text-box text-center">
                        <button type="button" id="btnSendMail" onclick="OnClickSendMail();" class='btn btn-primary'>
                            <i class="fa fa-envelope"></i><span class="ml-2">Email</span>
                        </button>
                        <button type="button" id="print_preview" onclick="PrintPreview();" class='btn btn-success'>
                            <i class="fa fa-print"></i><span class="ml-2">Print</span>
                        </button>
                        <button type="button" id="btnConfirm" class="btn btn-primary" data-toggle="modal" data-target="#signature_modal">
                            Confirmed
                        </button>
                        <button type="button" id="btnNewVO" class="btn btn-primary" onclick="OnclickNewVO();">
                            Add New VO
                        </button>
                    </div>



                </div>
                    </div>
                </div>
        <br />


        <h6 class="text-danger" id="lblnewVO"><b>Note :</b> If User want to add New VO then click on Add New VO .</h6>

        <div id="AdditionOmissionGrid" class="accordion mt-3">
        </div>
        <br />
        <div class="row justify-content-end mx-0">
            <div class="col-md-4 mr-3">
                <table class="table task_total_amount_tables">
                    <tbody>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Sub Total (A) :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="sub_total_amount_A" name="sub_total_amount_A">
                                        $0.00 @*$@Model.addition_Amount.ToString("#,##0.00")*@
                                    </label>
                                </p>
                            </td>
                        </tr>

                    </tbody>
                </table>
            </div>
        </div>
        <br />
        <div class="row justify-content-end mx-0">
            <div class="col-md-4 mr-3">
                <table class="table task_total_amount_tables">
                    <tbody>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Sub Total (-O) :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="sub_total_amount_B" name="sub_total_amount_B">
                                        $0.00@*$@Model.omission_Amount.ToString("#,##0.00")*@
                                    </label>
                                </p>
                            </td>
                        </tr>

                    </tbody>
                </table>
            </div>
        </div>
        <br />
        <div class="row justify-content-end mx-0">
            <div class="col-md-4 mr-3">
                <table class="table task_total_amount_tables">
                    <tbody>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Sub Total (A-O) :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="sub_total_amount" name="sub_total_amount">
                                        $0.00@*$@Model.contract_amount.ToString("#,##0.00")*@
                                    </label>
                                </p>
                            </td>
                        </tr>

                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Discount % :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                   <input type="text" id="discount_percentage" name="discount_percentage" class="form-control decimal-restrict" value="@Model.discount_percentage" onchange="OnChangeDiscountPercentage()" onblur="onBlurDiscount('')" />
                                </p>
                            </td>
                        </tr>

                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Discount Amount :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <input type="text" id="discount" name="discount" class="form-control decimal-restrict" value="@Model.discount" onblur="onBlurUpdate('')" />
                                </p>
                            </td>
                        </tr>

                        <tr>
                            <td align="right"><p class="task_total_amount_titles"> Total :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="total_afterDiscount" name="total_afterDiscount">
                                        $0.00   @*$@Model.contract_amount.ToString("#,##0.00")*@
                                    </label>
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <td align="right">
                                <p class="task_total_amount_titles">
                                    <label class="task_total_amount_titles" id="gst_percentage" name="gst_percentage">
                                        @Model.gst_percentage % GST :
                                    </label>
                                </p>
                            </td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="gst_amount" name="gst_amount">
                                        $@Model.gst_amount.ToString("#,##0.00")
                                    </label>
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Grand Total :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="grand_total_amount" name="grand_total_amount">
                                        $@Model.total_amount.ToString("#,##0.00")
                                    </label>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>


        <div class="row">
            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Created By</label>
                            <div class="created_updated_card_content" id="createdBy">@*@Model.createdBy*@</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Created On</label>
                            <div class="created_updated_card_content" id="created_date">@*@Model.created_date*@</div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Updated By</label>
                            <div class="created_updated_card_content" id="modified_by">@*@Model.modified_by*@</div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Updated on</label>
                            <div class="created_updated_card_content" id="modified_date">@*@Model.modified_date*@</div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>




<!-- signature Modal -->
<div class="modal fade" id="signature_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Variation Order Signature </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="row" id="sign_wrapper">
                    <div class="col-lg-6">
                        <div id="salesman-surface-container">
                            <h6>Salesman Signature </h6>
                            <div style=" border: 1px solid black;">
                                <div class="content-wrapper">

                                    <div id="salesman_surface" style="width: 320px; height: 260px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div id="customer-surface-container">
                            <h6>Customer Signature </h6>
                            <div style=" border: 1px solid black;">
                                <div class="content-wrapper">
                                    <div id="customer_surface" style="width: 320px; height: 260px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*<button class='export-svg k-button'>Export as SVG</button>*@


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button class='btn btn-primary clear'>Clear Canvas</button>
                @*<button class='export-img k-button'>Export as Image</button>*@
                <button type="button" class="btn btn-primary" onclick="SaveSignature();">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!--Print Quantity Modal-->
<div id="modalWindow">
    <h6> You want to print quantity column?</h6>
    <button id="yes" class="btn btn-primary pull-right ml-2 mb-2">Yes</button>
    <button id="no" class="btn btn-primary pull-right ml-2 mb-2">No</button>
</div>
<script>

	var ProjectId = $('#ProjectId').val();
	var VO_ID = $('#VO_ID').val();
	var TaskId = '00000000-0000-0000-0000-000000000000';
	var AdditionRecordType = 1;
	var OmissionRecordType = 2;
	function onBlurDiscount(ErrorMessage) {
		debugger

		var SubTotal = $("#sub_total_amount").text().replace('$', '').trim();
		var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
		var discount = parseFloat($("#discount").val().replace(',', '').replace('$', '').trim());

		if ( String(sub_total_amount) !== "0.00")
		{
			if (String(discount) === "" || String(discount) === "NaN") {
				return false;
			}
			else if (sub_total_amount > 0 && sub_total_amount < discount)
			{
				notify("Discount should be less than SubTotal", "error");
				$("#discount").val('0.00');
				return false;
			}
			else
			{
				OnChangeDiscountPercentage();
				CalculateGSTTotalAmountAfterDiscount();
				UpdateVO(1, ErrorMessage);
			}

		}


	}

    function onBlurUpdate(ErrorMessage) {
        debugger
        var SubTotal = $("#sub_total_amount").text().replace('$', '').trim();
        var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
        var discount = parseFloat($("#discount").val().replace(',', '').replace('$', '').trim());
        if (sub_total_amount > discount && String(sub_total_amount) !== "0.00") {
            if (String(discount) === "" || String(discount) === "NaN") {
                return false;
            }
            else {
                CalculateGSTTotalAmountAfterDiscount();
                UpdateVO(1, ErrorMessage);
            }
        }
        else {
            notify("Discount should be less than Sub Total", "error");
            $("#discount").val('0.00');
            return false;
        }
    }

	function CalculateGSTTotalAmountAfterDiscount() {
		debugger;
		var SubTotal = $("#sub_total_amount").text().replace('$','').trim();
	   // var discount_val = parseFloat($("#discount").val());
		var discount = parseFloat($("#discount").val().replace(',', '').replace('$', '').trim());
		if (String(discount) === "" || String(discount) == "NaN") {
			return false;
		}
	   // var sub_total_amount = parseFloat(SubTotal);
		var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
		var tolalamount = sub_total_amount - discount;
		var gstPercentage = parseFloat($("#gst_percentage").text().replace("% GST", ""));

		var gPer = 0;
		if (gstPercentage > 0) {
			gPer = gstPercentage;
		}
		var gstp = parseFloat(gPer / 100);/// + 1;
		if (String(tolalamount).length > 0 && String(gstp).length > 0) {
			//var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
			//var GST = parseFloat(tolalamount - CAmount).toFixed(2);
			var GST1= parseFloat(tolalamount * gstp);
			var CAmount = parseFloat(tolalamount + GST1).toFixed(2);
			var GST = GST1.toFixed(2);
			if (String(GST) == "NaN") {
				GST = "0.00";
			}
			if (String(CAmount) == "NaN") {
				CAmount = "0.00";
			}
			$("#gst_amount").text(formatCurrency((GST)));
			$("#grand_total_amount").text(formatCurrency((CAmount)));
			$("#total_afterDiscount").text(formatCurrency((tolalamount)));
			$('#total_amount').text(formatCurrency((CAmount)));
			$("#discount").val(formatCurrency((discount)));
		   // $("#sub_total_amount").text(formatCurrency((sub_total_amount)));
		}


	}
	 function UpdateVO(IsdiscountRelated, Det_ErrorMessage) {
		 debugger;
		 //GetVODetailsByProjectId();
         var Discount_Percentage = parseFloat($("#discount_percentage").val().replace(',', '').replace('$', ''));
		 var Vo_Id = $('#VO_ID').val();//VO_ID;
		var Discount_Amount = parseFloat($("#discount").val().replace(',', '').replace('$', ''));
		var SubTotal = $("#sub_total_amount").text().replace('$', '');
		var Gst_amount=$("#gst_amount").text().replace('$', '');
		var GrandTotal = $("#grand_total_amount").text().replace('$', '');
		var Total_afterDiscount = $("#total_afterDiscount").text();
		var project_id = ProjectId;
		var vo_date = @*@Model.shortForwardDate;//*@$('#date_range').data('daterangepicker').startDate;
		 var statusId = $("#status").text();
		 if (statusId == "Confirmed") {
			 statusId = 5;

		 }
		 else {
			 statusId = 1;
		 }
		var isactive = 1;
		var Values = {
			project_id: project_id,
			Vo_date: vo_date,
			contract_amount: SubTotal,
			gst_amount: Gst_amount,
			discount: Discount_Amount,
            discount_percentage: Discount_Percentage,
			total_amount: GrandTotal,
			status_id: 1,
			isactive: isactive,
			Vo_Id: Vo_Id,
			remarks:""
		};
		var JsonValues = JSON.stringify(Values);
		 $.ajax({
				type: 'POST',
				url: '@Url.Action("UpsertVO", "VariationOrder")',
			 data: { "JsonVO": JsonValues },
				dataType: 'Json',
			 success: function (data) {
				 debugger;
					var Result = data.data.Result;
				 var Errormessage = data.data.Errormessage;
				 var Id = data.data.Id;
					if (IsdiscountRelated == 0) {
						if (Result > 0) {
							notify(Errormessage, "success");
						}
						else {
							notify(Errormessage, "error");
						}
					}
					else {
						if (Result > 0) {
							if (Det_ErrorMessage == "") {
								Det_ErrorMessage = Errormessage;//"Updated Successfully";
							}
							notify(Det_ErrorMessage, "success");
						}
						else {
							if (Det_ErrorMessage == "") {
								Det_ErrorMessage = Errormessage;//"Updation Failed";
							}
							notify(Det_ErrorMessage, "error");
						}
					}
				},
				error: function (jqXHR, textStatus, errorThrown) {
					notify("Fail", "error");
					notify(jqXHR, "error");
				}
		 });

	}
	function DateRangePicker() {
		$('#date_range').daterangepicker({
			"singleDatePicker": true,
			"autoUpdateInput": true,
			"autoApply": true,
			locale: {
				format: 'DD/MM/YYYY',
				cancelLabel: 'Clear'
			},
			ranges: {
				'Today': [moment(), moment()],
				'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
				'Last 7 Days': [moment().subtract(6, 'days'), moment()],
				'Last 30 Days': [moment().subtract(29, 'days'), moment()],
				'This Month': [moment().startOf('month'), moment().endOf('month')],
				'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
			},
			"alwaysShowCalendars": true,
		});

		$('#date_range').on('apply.daterangepicker', function (ev, picker) {
			$(this).val(picker.startDate.format('DD/MM/YYYY') /*+ ' - ' + picker.endDate.format('DD/MM/YYYY')*/);
		});

		$('#date_range').on('cancel.daterangepicker', function (ev, picker) {
			$(this).val('');
		});

		$('#date_range + .input-group-append').click(function () {
			$('#date_range').trigger("focus");
		});
	}

	function GetRowsCountByVo_Id() {
		debugger;
		var VOID = $('#VO_ID').val();
		if (VOID == "") {
			$('#btnConfirm').css('display', 'none');
		}
		else {
			$.ajax({
				url: '@Url.Action("Get_VODetails_RowsCount", "VariationOrder")',
				type: "POST",
				dataType: "json",
				data: { VO_Id: VOID },
				success: function (result) {
					debugger

					if (result.data.Result > 0) {
						debugger;
						var ContractStatusId =@Model.status_id;
						if (ContractStatusId == 6) {
							$('#btnConfirm').css('display', 'none');
						}
                        else {
                            $('#btnConfirm').css('display', 'inline-block');
						}

					}
					else {
						$('#btnConfirm').css('display', 'none');
					}
				},
				error: function (result) {
					debugger

					options.error(result);
				}
			});
		}
	}
	function GetVODetailsByProjectId() {
		var VO_ID = $('#VO_ID').val();
		$.ajax({
				type: 'POST',
			url: '@Url.Action("GetVODetailsByProjectId", "VariationOrder")?ProjectId=' + ProjectId + '&VO_Id=' + VO_ID,
			 data: { },
				dataType: 'Json',
				success: function (data) {
				debugger;
					var VO_Number = data.data.vo_number;
					$("#VO_Number").text(VO_Number);



					$("#status").text(data.data.status);
					if (data.data.status == "Confirmed") {
						$("#btnConfirm").prop("disabled", true);
						$(".k-grid-add").css("display", "none");
						$("#discount").prop("disabled", true);
						$("#discount_percentage").prop("disabled", true);
                        $("#discount_percentage").off("onchange");
                        $("#discount_percentage").off("onblur");
					}
					$('#sub_total_amount').text(formatCurrency(data.data.amount));
					$('#total_amount').text(formatCurrency(data.data.total_amount));
					$('#gst_percentage').text(data.data.gst_percentage + '% GST :');
					$('#gst_amount').text(formatCurrency(data.data.gst_amount));
					$('#grand_total_amount').text(formatCurrency(data.data.total_amount));
					$('#sub_total_amount').text(formatCurrency(data.data.amount));
					$('#sub_total_amount_A').text(formatCurrency(data.data.addition_Amount));
					$('#sub_total_amount_B').text(formatCurrency(data.data.omission_Amount));
					$("#createdBy").text(data.data.createdBy);
					$("#created_date").text(data.data.created_date);
					$("#modified_by").text(data.data.modified_by);
					$("#modified_date").text(data.data.modified_date);
					$("#VO_ID").val(data.data.vo_id);
					$('#date_range').data('daterangepicker').setStartDate(data.data.created_date);
					debugger;
					var VO_SubTotal= data.data.amount; //$("#sub_total_amount").text().replace("$", "");
					var VO_Discount = data.data.discount_amount;//$("discount").val();
					//if (VO_Discount == undefined || VO_Discount == "") {
					//    VO_Discount = "0.00";
					//}


					if (data.data.discount_percentage != 0 && data.data.discount_percentage == null) {
                        $("#discount_percentage").val(data.data.discount_percentage);
					}
                    var VO_totalAmount = VO_SubTotal - VO_Discount;
                    $("#discount").val(formatCurrency(VO_Discount));

					$("#total_afterDiscount").text(formatCurrency(VO_totalAmount));
					if (data.data.vo_id == "" || data.data.vo_id == null) {
						$('#AdditionOmissionGrid').css('display', 'none');
						$('#btnNewVO').css('display', 'inline-block');
						$('#btnConfirm').css('display', 'none');
						$("#VO_Date").text('');
					}
					else {
						$('#AdditionOmissionGrid').css('display', 'block');
						$('#btnNewVO').css('display', 'none');
						$("#lblnewVO").css('display', 'none');
						$("#VO_Date").text(data.data.voDate);
						GetRowsCountByVo_Id();


					}
					var ContractStatusId =@Model.status_id;
					if (ContractStatusId == 6) {
						$('#btnConfirm').css('display', 'none');
						$(".k-grid-add").css("display", "none");
					}

                    //$(elem).unbind();

				},
				error: function (jqXHR, textStatus, errorThrown) {
					notify("Fail", "error");
					notify(jqXHR, "error");
				}
		 });
	}

	$(document).ready(function () {
		debugger;

		GetVODetailsByProjectId();
		var VO_ID = $('#VO_ID').val();
	   // GetRowsCountByVo_Id();
		var SubTotal = @Model.contract_amount;
		var discount =  @Model.discount;
		var totalAmount = SubTotal - discount;
		$("#total_afterDiscount_contr").text(formatCurrency(totalAmount));
		$("#discount_contr").val(@Model.discount);
		$("#discount_percentage").val(@Model.discount_percentage);
        $('#sub_total_amount').text(formatCurrency(SubTotal));
	   // $("#total_afterDiscount").text(formatCurrency(totalAmount));
			// $("#discount").val(@Model.discount);
			debugger;
			DateRangePicker();

			wnd = $("#modalWindow").kendoWindow({
				title: "Quantity Confirmation",
				modal: true,
				visible: false,
				resizable: false,
				width: 300
			}).data("kendoWindow");

		$('#VOAdditionGrid').kendoGrid({
			dataSource: {
				transport: {
					read: function (options) {
								$.ajax({
									url: '@Url.Action("GetContractTasksItem", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + TaskId,
									type: "GET",
									dataType: "json",
									success: function (result) {
										debugger
										options.success(result);
									},
									error: function (result) {
										debugger
										options.error(result);
									}
								});
							},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					}
				},
				batch: true,
				pageSize: 6,
				schema: {
					data: "data.Items", total: "data.TotalCount",
					model: {
						id: "Task_Id",
						fields: {
						 Task: { defaultValue: { Task_Id: 0, Task_Name: "Select Task" } },

						}
					}
				}

			},
			pageable: true,
			toolbar: [
				/*{ name: "create", text: "Add new Quotation Task" },*/ { template: '<a class="k-button"  onclick="return  collapse_all()"  style="float:right" >Collapse All</a>' }, { template: '<a class="k-button"  onclick="return  expand_all()"  style="float:right">Expand All</a>' }
			],
			detailInit: detailInit,
			dataBound: function () {
				this.expandRow(this.tbody.find("tr.k-master-row").first());
			},
			pageable: {
				pageSize: 10,
				buttonCount: 10,
				pageSizes: [5, 10, 20, 50, 100, 500],
				messages: {
					display: "{0} - {1} of {2} tasks", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
					empty: "No tasks to display",
					page: "Page",
					of: "of {0}", //{0} is total amount of pages
					itemsPerPage: "tasks per page",
					first: "Go to the first page",
					previous: "Go to the previous page",
					next: "Go to the next page",
					last: "Go to the last page",
					refresh: "Refresh"
				}
			},
			columns: [
				{ field: "Task", title: " ", attributes: { style: "text-align:left;font-size: 20px;" }, editor: GetContractTasksListItem, template: "#=Task.Task_Name#" },
			],
			editable: "inline"

		});
		AdditionOmissionGrid(TaskId);
		bindTerms();
	});

	function detailInit(e) {
		debugger;
		$("<div id='VOchildGrid'/>").appendTo(e.detailCell).kendoGrid({
				dataSource: {
						transport: {
							read: function (options) {
								$.ajax({
									url: '@Url.Action("GetContractTasksItemDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id,
									type: "GET",
									dataType: "json",
									success: function (result) {
										debugger
										options.success(result);
									},
									error: function (result) {
										debugger
										options.error(result);
									}
								});
						},
							 update: function (options) {
								debugger
								$.ajax({
									url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + e.data.Task.Task_Name,
									type: "POST",
									dataType: "json",
									data: { JsonContractDetails: JSON.stringify(options.data.models[0]) },
									success: function (result) {
										debugger
										$("#VOAdditionGrid").data('kendoGrid').dataSource.read();
										$("#VOAdditionGrid").data('kendoGrid').refresh();
										if (result.data.Result > 0) {
											notify(result.data.Errormessage, "success");
										}
										else {
											notify(result.data.Errormessage, "error");
										}
										options.success(result);
									},
									error: function (result) {
										debugger
										notify(result.data.Errormessage, "error");
										options.error(result);
									}
								});
						},
							 create: function (options) {
								debugger
								$.ajax({
									url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + e.data.Task.Task_Name,
									type: "POST",
									dataType: "json",
									data: { JsonContractDetails: JSON.stringify(options.data.models[0]) },
									success: function (result) {
										debugger
										$("#VOAdditionGrid").data('kendoGrid').dataSource.read();
										$("#VOAdditionGrid").data('kendoGrid').refresh();
										if (result.data.Result > 0) {
											notify(result.data.Errormessage, "success");
										}
										else {
											notify(result.data.Errormessage, "error");
										}
										options.success(result);
									},
									error: function (result) {
										debugger
										notify(result.data.Errormessage, "error");
										options.error(result);
									}
								});
							},

							destroy: {
								 url: '@Url.Action("", "Contract")',
										type: "POST",
								dataType: "json"
							},


							parameterMap: function (options, operation) {
								if (operation !== "read" && options.models) {
									return { models: kendo.stringify(options.models) };
								}
							}
						},
						batch: true,
						pageSize: 10,
						schema: {
							data: "data.Items", total: "data.TotalCount",
							model: {
								id: "project_id",
								fields: {
									project_id: { editable: false },
									project_det_Id: { editable: false },
									Task_Id: { editable: false },
									Category: { defaultValue: { category_Id: 0, category_name: "-- Select --" } },
									Item: { defaultValue: { item_id: 0, item_description: "-- Select --" } },
									BillingUOM: { defaultValue: { status_lookup_id: 0, description: "-- Select --" } },
									Price: { validation: { required: true }, type: "number" },
									Qty: { validation: { required: true, type: "number",min: 0 } },
									UOM: { defaultValue: { uom_id: 0, uom_description: "-- Select --" }, validation: { required: true } },
									item_remarks: { validation: { required: false } },
									Amount: { validation: { required: true }, type: "number" },
								}
							}
						},
						aggregate: [
							{ field: "Price", aggregate: "sum" },
							{ field: "Amount", aggregate: "sum" }
						]
					},
					scrollable: false,
					sortable: true,
					pageable: true,
					navigatable: true,
			   //toolbar: [
			   //    { name: "create", text: "Add new Item" }
			   //],
					autoSync: true,
					resizable: true,
					pageable: {
						pageSize: 10,
						buttonCount: 10,
						pageSizes: [5, 10, 20, 50, 100, 500]
			   },
			  // edit: onGridEditing,
			   columns: [
						{ field: "Task_Id", hidden: true },
						{ field: "project_det_Id", hidden: true },
						{
							field: "Category", title: "Category", attributes: { style: "text-align:left;", filterable: { multi: true, search: true } },
							editor: CategoryDropDownEditor, template: "#=Category.category_name#"
						},
						{ field: "Item", title: "Item Description", width: "350px", attributes: { style: "text-align:left;" }, editor: ItemDropDownEditor, template: "#=Item.item_description#" },
						{ field: "BillingUOM", title: "Billing UOM", attributes: { style: "text-align:left;" }, editor: BillingUOMDropDownEditor, template: "#=BillingUOM.description#" },
                   { field: "Price", title: "Price ($)", format: "{0:c}" }, // ,footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" }
						{ field: "Qty", title: "Quantity" },
						{ field: "UOM", width: "100px", title: "UOM", attributes: { style: "text-align:left;" }, editor: UOMDropDownEditor, template: "#=UOM.uom_description#" },
						{ field: "item_remarks", title: "Remarks", attributes: { style: "text-align:left;" } },
						{ field: "Amount", title: "Amount", format: "{0:c}", footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" } },
						{
							command: [
								{
									name: "clone", text: "Add", iconClass: "k-icon k-i-plus-circle", click: OnCloneClick,
								visible: function ()
								{
									var StatusId =@Model.status_id; return StatusId != "6"
								}
							},
								{
									name: "Omit", text: "Omit", iconClass: "k-icon k-i-minus-circle", click: OnOmitClick,
									visible: function ()
									{
										var StatusId =@Model.status_id; return StatusId != "6"
									}
								},], title: "Action", width: "100px"
							//command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
							//{ name: "destroy", text: " " }], title: "Action", width: "100px"

						}
					],
			   editable: "inline",
					edit: function (e) {
						debugger;
						var detailGridWrapper = this.wrapper;
						var parentRow = detailGridWrapper.closest("tr.k-detail-row").prev("tr");
						var parentGrid = parentRow.closest("[data-role=grid]").data("kendoGrid");
						debugger
						var parentModel = parentGrid.dataItem(parentRow);

						var ParentTaskId = parentModel.Task.Task_Id;
						var ParentTaskName = parentModel.Task.Task_Name;
						debugger
						var a = this;
						a.dataSource.transport.create.url = '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + ParentTaskId + '&TaskName=' + ParentTaskName;
					},
					complete: function (e) {
						debugger
						$("#VOAdditionGrid").data("kendoGrid").dataSource.read();
						$("#VOAdditionGrid").data('kendoGrid').refresh();
								}
		   });
	}

	function OnCloneClick(e) {
		debugger;
		var tr = $(e.target).closest("tr");
		var item = this.dataItem(tr);
		var TaskId = item.Task_Id;
		var TaskName = item.Task_Name;
		var Project_Det_Id = item.Project_Det_Id;
		$('#ProjDetailId').val(Project_Det_Id);
		var JsonVODetails = JSON.stringify(item);
		$.ajax({
			url: '@Url.Action("UpsertVO_Details", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + TaskId + '&TaskName=' + TaskName + '&RecordType=' + AdditionRecordType,
									type: "POST",
									dataType: "json",
									data: { JsonVODetails: JsonVODetails },
											success: function (result) {
												debugger
												if (result.data.Result > 0) {

												   // $('#AdditionOmissionGrid').css('display', 'block');
													$('#btnConfirm').css('display', 'inline-block');
													$("#btnConfirm").prop("disabled", false);
													$("#discount").prop("disabled", false);
													$('#VODetailId').val(result.data.Id);


													$(".k-grid-add").css("display", "inline-block");

													//  getvodetailsbyprojectid();


													var Subtotal = result.data.SubTotal;
													if (Subtotal > 0 || Subtotal > 0.00) {

														$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
														$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
														$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
														if ($('#VO_ID').val() != "") {
															$('#VO_ID').val(result.data.Vo_Id);
															GetVODetailsByProjectId();
															onBlurDiscount(result.data.Errormessage);
														}
														else {

															$('#VO_ID').val(result.data.Vo_Id);
															GetVODetailsByProjectId();
															notify(result.data.Errormessage, "success");
														}
													}
													else {

														notify(result.data.Errormessage, "success");
														$('#VO_ID').val(result.data.Vo_Id);
														GetVODetailsByProjectId();
														$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
														$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));

														$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
														$('#total_amount').text(formatCurrency(result.data.Amount));
														$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
														$('#gst_amount').text(formatCurrency(result.data.gst_amount));
														$('#grand_total_amount').text(formatCurrency(result.data.Amount));
														$('#total_afterDiscount').text("$0.00");
														$("#discount").val('0');
													}
													$("#AdditionOmissionGrid").data('kendoGrid').dataSource.read();
													$("#AdditionOmissionGrid").data('kendoGrid').refresh();
												 // notify(result.data.Errormessage, "success");
												}
												else {
													notify(result.data.Errormessage, "error");
												}

											},
											error: function (result) {
												debugger

												//options.error(result);
											}
										});

	}
	function AdditionOmissionGrid(TaskId) {
		debugger;
		//var VO_ID = $('#VO_ID').val();
		$('#AdditionOmissionGrid').kendoGrid({

			dataSource: {
				transport: {
					read: function (options) {
								$.ajax({
									url: '@Url.Action("GetVOTasksItem", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + TaskId + '&VO_Id=' + $('#VO_ID').val(),// + '&RecordType=' + AdditionRecordType,
									type: "GET",
									dataType: "json",
									success: function (result) {
										debugger
										options.success(result);
									},
									error: function (result) {
										debugger
										options.error(result);
									}
								});
							},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					}
				},
				batch: true,
				pageSize: 6,
				schema: {
					data: "data.Items", total: "data.TotalCount",
					model: {
						id: "Task_Id",
						fields: {
						 Task: { defaultValue: { Task_Id: 0, Task_Name: "Select Task" } },

						}
					}
				}

			},
			pageable: true,
			toolbar: [
				{ name: "create", text: "Add new Task" },
				{ template: '<a class="k-button"  onclick="return  collapse_all()"  style="float:right" >Collapse All</a>' }, { template: '<a class="k-button"  onclick="return  expand_all()"  style="float:right">Expand All</a>' }
			],
			detailInit: detailInitForClone,
			dataBound: function () {
				this.expandRow(this.tbody.find("tr.k-master-row").first());

			},
			pageable: {
				pageSize: 10,
				buttonCount: 10,
				pageSizes: [5, 10, 20, 50, 100, 500],
				messages: {
					display: "{0} - {1} of {2} tasks", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
					empty: "No tasks to display",
					page: "Page",
					of: "of {0}", //{0} is total amount of pages
					itemsPerPage: "tasks per page",
					first: "Go to the first page",
					previous: "Go to the previous page",
					next: "Go to the next page",
					last: "Go to the last page",
					refresh: "Refresh"
				}
			},
			columns: [
				{ field: "Task", title: " ", attributes: { style: "text-align:left;font-size: 20px;" }, editor: GetContractTasksListItem, template: "#=Task.Task_Name#" },
			],
			editable: "inline"

		});

		}
	function detailInitForClone(e) {
		debugger;
		var VO_ID = $('#VO_ID').val();
		var Task_Id = e.data.Task.Task_Id;
		var RecordType;
	   // var Project_Det_Id = $('#ProjDetailId').val();
	   //var VO_Detail_Id= $('#VODetailId').val();
		$("<div id='VOAdditionchildGrid'/>").appendTo(e.detailCell).kendoGrid({
			dataSource: {
				transport: {

					read: function (options) {
						if (e.data.Task.Task_Id == "0" || e.data.Task.Task_Id == 0) {

						}
						else {
							$.ajax({
								url: '@Url.Action("GetVOTasksItemDetails", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + Task_Id + '&VO_Id=' + VO_ID,
								type: "GET",
								dataType: "json",
								success: function (result) {
									debugger
									options.success(result);
								},
								error: function (result) {
									debugger
									options.error(result);
								}
							});
						}
					},
					update: function (options) {
						debugger
						if (options.data.models[0].UOM === null || options.data.models[0].UOM === undefined) {
							options.data.models[0].UOM = { uom_id: 0, uom_description: "-- Select --" }
						}
						if (options.data.models[0].BillingUOM.description === "Standard") {
							if (options.data.models[0].UOM.uom_id == 0) {
								notify("Please Select UOM", "error");
								$('div.k-loading-mask').css('display', 'none');
								return false;
							}
						}
						if ((options.data.models[0].UOM.uom_description !== "Lumpsum")) {
							options.data.models[0].Amount = options.data.models[0].Price * options.data.models[0].Qty;
						}
						if (options.data.models[0].Item.item_id === undefined && options.data.models[0].Item.item_description === undefined) {
							options.data.models[0].Item = { item_id: "", item_description: options.data.models[0].Item }
						}
						if (options.data.models[0].Item.item_id === 0) {
							options.data.models[0].Item.item_id = "";
						}
						/*if (options.data.models[0].Amount < 0 || options.data.models[0].Price < 0) {*/
						if (options.data.models[0].record_type == 2) {
							//options.data.models[0].Price = -(options.data.models[0].Price);
							//options.data.models[0].Amount = -(options.data.models[0].Amount);
							RecordType = 2;
						}
						else {
							RecordType = 1;
						}
						$.ajax({
							url: '@Url.Action("UpsertVO_Details", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + escape(e.data.Task.Task_Name) + '&RecordType=' + RecordType,
							type: "POST",
							dataType: "json",
							data: { JsonVODetails: JSON.stringify(options.data.models[0]) },
							success: function (result) {
								debugger
								$("#AdditionOmissionGrid").data('kendoGrid').dataSource.read();
								$("#AdditionOmissionGrid").data('kendoGrid').refresh();
								if (result.data.Result > 0) {
									// notify(result.data.Errormessage, "success");

									var Subtotal = result.data.SubTotal;

									if (Subtotal > 0 || Subtotal > 0.00) {
										$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
										$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
										onBlurDiscount(result.data.Errormessage);
									}
									else {
										notify(result.data.Errormessage, "success");
										$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
										$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
										$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										$('#total_amount').text(formatCurrency(result.data.Amount));
										$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
										$('#gst_amount').text(formatCurrency(result.data.gst_amount));
										$('#grand_total_amount').text(formatCurrency(result.data.Amount));
										$('#total_afterDiscount').text("$0.00");
										$("#discount").val('0');
									}
								}
								else {
									notify(result.data.Errormessage, "error");
								}
								options.success(result);
							},
							error: function (result) {
								debugger
								options.error(result);
							}
						});

					},
					create: function (options) {
						debugger
						if (options.data.models[0].UOM === null || options.data.models[0].UOM === undefined) {
							options.data.models[0].UOM = { uom_id: 0, uom_description: "-- Select --" }
						}
						if (options.data.models[0].BillingUOM.description === "Standard") {
							if (options.data.models[0].UOM.uom_id == 0) {
								notify("Please Select UOM", "error");
								$('div.k-loading-mask').css('display', 'none');
								return false;
							}
						}
						if ((options.data.models[0].UOM.uom_description !== "Lumpsum")) {
							options.data.models[0].Amount = options.data.models[0].Price * options.data.models[0].Qty;
						}
						if (options.data.models[0].Item.item_id === undefined && options.data.models[0].Item.item_description === undefined) {
							options.data.models[0].Item = { item_id: "", item_description: options.data.models[0].Item }
						}
						if (options.data.models[0].Amount < 0 || options.data.models[0].Price < 0) {
							options.data.models[0].Price = -(options.data.models[0].Price);
							options.data.models[0].Amount = -(options.data.models[0].Amount);
							RecordType = 2;
						}
						else {
							RecordType = 1;
						}

						if (e.data.Task.Task_Id == 0) {
							notify("Please Select Task", "error");
							$('div.k-loading-mask').css('display', 'none');
							// options.error(result);
						}
						else {
							$.ajax({
								url: '@Url.Action("UpsertVO_Details", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + escape(e.data.Task.Task_Name) + '&RecordType=' + RecordType,
								type: "POST",
								dataType: "json",
								data: { JsonVODetails: JSON.stringify(options.data.models[0]) },
								success: function (result) {
									debugger

									if (result.data.Result > 0) {
										// notify(result.data.Errormessage, "success");
										if (result.data.Result > 0) {

											// $('#AdditionOmissionGrid').css('display', 'block');
											$("#btnConfirm").prop("disabled", false);
											$("#discount").prop("disabled", false);
											$('#VODetailId').val(result.data.Id);


											$(".k-grid-add").css("display", "inline-block");

											//  getvodetailsbyprojectid();


											var Subtotal = result.data.SubTotal;
											if (Subtotal > 0 || Subtotal > 0.00) {

												$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
												$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
												$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
												if ($('#VO_ID').val() != "") {
													$('#VO_ID').val(result.data.Vo_Id);
													GetVODetailsByProjectId();
													onBlurDiscount(result.data.Errormessage);
												}
												else {

													$('#VO_ID').val(result.data.Vo_Id);
													GetVODetailsByProjectId();
													notify(result.data.Errormessage, "success");
												}
											}
											else {

												notify(result.data.Errormessage, "success");
												$('#VO_ID').val(result.data.Vo_Id);
												GetVODetailsByProjectId();
												$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
												$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));

												$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
												$('#total_amount').text(formatCurrency(result.data.Amount));
												$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
												$('#gst_amount').text(formatCurrency(result.data.gst_amount));
												$('#grand_total_amount').text(formatCurrency(result.data.Amount));
												$('#total_afterDiscount').text("$0.00");
												$("#discount").val('0');
											}
                                            CalculateGSTTotalAmountAfterDiscount();
											$("#AdditionOmissionGrid").data('kendoGrid').dataSource.read();
											$("#AdditionOmissionGrid").data('kendoGrid').refresh();
											// notify(result.data.Errormessage, "success");
										}
										//var Subtotal = result.data.SubTotal;

										//if (Subtotal != 0 || Subtotal != 0.00) {
										//    $('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										//    $('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
										//    $('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
										//    onBlurDiscount(result.data.Errormessage);
										//}
										//else {
										//    notify(result.data.Errormessage, "success");
										//    $('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
										//    $('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
										//    $('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										//    $('#total_amount').text(formatCurrency(result.data.Amount));
										//    $('#gst_percentage').text(result.data.gst_percentage + '% GST :');
										//    $('#gst_amount').text(formatCurrency(result.data.gst_amount));
										//    $('#grand_total_amount').text(formatCurrency(result.data.Amount));
										//    $('#total_afterDiscount').text("$0.00");
										//    $("#discount").val('0');
										//}

									}
									else {
										notify(result.data.Errormessage, "error");
									}
									options.success(result);
								},
								error: function (result) {
									debugger

									options.error(result);
								}
							});
						}
					},
					destroy: function (options) {
						debugger
						var vo_det_id = options.data.models[0].vo_det_id;
						$.ajax({
							url: '@Url.Action("Delete_Vo_Details", "VariationOrder")?vo_det_id=' + vo_det_id + '&ProjectId=' + ProjectId + '&RecordType=' + AdditionRecordType,
							type: "POST",
							dataType: "json",
							success: function (result) {
								debugger
								$("#AdditionOmissionGrid").data('kendoGrid').dataSource.read();
								$("#AdditionOmissionGrid").data('kendoGrid').refresh();
								if (result.data.Result > 0) {
									// notify(result.data.Errormessage, "success");

									var Subtotal = result.data.SubTotal;

									if (Subtotal > 0 || Subtotal > 0.00) {
										$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
										$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
										onBlurDiscount(result.data.Errormessage);
									}
									else {
										notify(result.data.Errormessage, "success");
										$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
										$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
										$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										$('#total_amount').text(formatCurrency(result.data.Amount));
										$('#Bst_percentage').text(result.data.gst_percentage + '% GST :');
										$('#gst_amount').text(formatCurrency(result.data.gst_amount));
										$('#grand_total_amount').text(formatCurrency(result.data.Amount));
										$('#total_afterDiscount').text("$0.00");
										$("#discount").val('0');
									}
									GetRowsCountByVo_Id();
								}
								else {
									notify(result.data.Errormessage, "error");
								}
								options.success(result);
							},
							error: function (result) {
								debugger
								options.error(result);
							}
						});

					},

					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					}
				},
				batch: true,
				pageSize: 10,
				schema: {
					data: "data.Items", total: "data.TotalCount",
					model: {
						id: "vo_det_id",//"project_Id",
						fields: {
							vo_id: { editable: false },
							vo_det_id: { editable: false },
							project_Id: { editable: false },
							// Project_Det_Id: { editable: false },
							Task_Id: { defaultValue: e.data.Task.Task_Id, editable: false },
							Category: { defaultValue: { category_Id: 1, category_name: "No Category" }, validation: { required: true } },
							Item: { defaultValue: { item_id: null, item_description: "" }, validation: { required: true } },
							BillingUOM: { defaultValue: { status_lookup_id: 1, description: "Standard" }, validation: { required: true } },
							Qty: { validation: { required: true, min: 0, maxlength: 8 }, type: "number" },
							UOM: { defaultValue: { uom_id: 0, uom_description: "-- Select --" }, validation: { required: true } },
							Price: { validation: { required: true, maxlength: 20 }, type: "number" },
							item_remarks: { validation: { required: false, max: 100 } },
							Amount: { type: "number", maxlength: 30 },
							record_type: { type: "number", maxlength: 10 },
							/*Highlight: { defaultValue:false, validation: { required: false }*//*, editable: false*//* }*/
							StatusId: { type: "number", editable: false}
								}
							}
						},
						aggregate: [
							{ field: "Price", aggregate: "sum" },
							{ field: "Amount", aggregate: "sum" }
						]
					},
					scrollable: true,
					sortable: true,
					pageable: true,
					navigatable: true,
				/* toolbar: ["create"],*/
					toolbar: [
						{
							name: "create", text: "Add new Item"
							//, visible: function () {
							//        //debugger;
							//        //var Status_Id = StatusId; return Status_Id != 5}
							 }
			],
					 dataBound: OndataBound,
					autoSync: true,
					resizable: true,
					pageable: {
						pageSize: 10,
						buttonCount: 10,
						pageSizes: [5, 10, 20, 50, 100, 500],

					},

					columns: [

					   // { field: "Highlight", width: "70px", editor: customBoolEditor },
						{
							field: "Category", width: "120px", title: "Category", attributes: { style:  "text-align:left;"/*, filterable: { multi: true, search: true }*/ }, editor: CategoryDropDownEditor, template: "#=Category.category_name#"
						},
						{ field: "Item", title: "Item Description", width: "340px", attributes: { style: "text-align:left;" }, editor: ItemDropDownEditor, template: "#=Item.item_description#" },
						{ field: "BillingUOM", width: "100px", title: "Billing UOM", attributes: { style: "text-align:left;" }, editor: BillingUOMDropDownEditor, template: "#=BillingUOM.description#" },

						{ field: "Qty", width: "100px", title: "Quantity" },
						{ field: "UOM", width: "100px", title: "UOM", attributes: { style: "text-align:left;" }, editor: UOMDropDownEditor, template: "#=UOM.uom_description#" },
                        { field: "Price", width: "100px", title: "Price ($)"/*, format: "{0:c}", footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" } */ },
						{ field: "item_remarks", width: "100px", title: "Remarks", attributes: { style: "text-align:left;" } },
						{
							field: "Amount", width: "100px", title: "Amount", /*format: "{0:c}",*/ template: "<div class='currency # if(Amount < 0 || record_type == 2) {#negative_field# } else { #positive_field# } #'>#=kendo.toString(Amount, 'c') #</div>" ,  attributes: { style: "text-align:right;" },
						},
						{ field: "StatusId", width: "100px", title: "StatusId", hidden: true },
						{
							command: [
								{
								name: "edit", text: { edit: " ", update: " ", cancel: " " },
								visible: function () {
									debugger;
									var VOStatus_Id = StatusId;
									var ContractStatusId =@Model.status_id;
									if (ContractStatusId == 6) {
										return ContractStatusId != 6;
									}
									else if (VOStatus_Id == 5) {
										return VOStatus_Id != 5;
									}
									else {
										return true;
                                    }

								}
							},
								{
									name: "destroy", text: " ",
									//visible: function () {
									//	debugger;
									//	var Status_Id = StatusId; return Status_Id != 5
									//}
									visible: function () {
										debugger;
										var VOStatus_Id = StatusId;
										var ContractStatusId =@Model.status_id;
										if (ContractStatusId == 6) {
											return ContractStatusId != 6;
										}
										else if (VOStatus_Id == 5) {
											return VOStatus_Id != 5;
										}
                                        else {
                                            return true;
                                        }

									}
								} ], title: "Action", width: "100px"
						},
					],
					editable: "inline",
					edit: function (e) {
						debugger;

						var priceEditor = e.container.find("input[name=Price]").data("kendoNumericTextBox");
						var quantityEditor = e.container.find("input[name=Qty]").data("kendoNumericTextBox");

						var amountEditor = e.container.find("input[name=Amount]").data("kendoNumericTextBox");
						var uomEditor = e.container.find("input[name=UOM]").data("kendoDropDownList");
						var billinguomValue = e.container.find("[data-container-for='BillingUOM'] .k-input").text();
						var uomValue = e.container.find("[data-container-for='UOM'] .k-input").text();


						if (billinguomValue == "FOC" || billinguomValue == "Inclusive" || billinguomValue == "Complementary") {
							priceEditor.enable(false);
							quantityEditor.enable(false);
							amountEditor.enable(false);
							uomEditor.enable(false);
						}
						if (uomValue == "Lumpsum") {
							priceEditor.enable(false);
							quantityEditor.enable(false);
						}

						priceEditor.bind("change", function (e) {
							var price = this.value();
							var quantity = quantityEditor.value();

							amountEditor.value(price * quantity);
						});

						quantityEditor.bind("change", function (e) {
							var price = priceEditor.value();
							var quantity = this.value();

							amountEditor.value(price * quantity);

						});

					},
					complete: function (e) {
						debugger
						$("#AdditionOmissionGrid").data('kendoGrid').dataSource.read();
						$("#AdditionOmissionGrid").data('kendoGrid').refresh();

					}
				});
	}
	function OndataBound(e) {
		debugger;
	    var ContractStatusId =@Model.status_id;
		if (ContractStatusId == 6) {
			$(".k-grid-add").css("display", "none");
		}
		else if (e.sender._data.length > 0) {
			if (e.sender._data[0].StatusId == 5) { // the condition against which you want to show/hide the toolbar
				debugger;
				//  this.element.find(".k-grid-toolbar").hide(); // hides the entire toolbar
				this.element.find(".k-grid-add").hide(); // hides just the Create button
			}
		}
	}
	function onGridEditing(arg) {
		arg.container.find("input[name='item_remarks']").attr('maxlength', '100');
	}
	function customBoolEditor(container, options) {
		$('<input class="k-checkbox" type="checkbox" name="Highlight" data-type="boolean" data-bind="checked:Highlight">').appendTo(container);
	}
	function CategoryDropDownEditor(container, options) {
		debugger;
		var detailGridWrapper = this.wrapper;
		//Electrical Works
	//	if (options.model.Task_Name != "" || options.model.Task_Name != undefined)
  //      var parentRow = detailGridWrapper.closest("tr.k-detail-row").prev("tr");
  //      var parentGrid = parentRow.closest("[data-role=grid]").data("kendoGrid");
          var ParentTaskId = $('#ParentTaskId').val();
		  var task_id = options.model.Task_Id;
		//var parentModel = parentGrid.dataItem(parentRow);
  //      var ParentTaskId = parentModel.Task.Task_Id;
  //      var ParentTaskName = parentModel.Task.Task_Name;
		var id;
        if (ParentTaskId == "" && task_id != 0) {
            id = task_id;
        }
        else {
            id = ParentTaskId;
		}
        if (id == "351ba0e6-2580-4f90-9366-9a9f8bd5577b") {
			$('<input required name="' + options.field + '"/>')
				.appendTo(container)

				.kendoDropDownList({
					filter: "contains",
					autoBind: false,
					optionLabel: "Select Category",
					dataTextField: "category_name",
					dataValueField: "category_Id",
					//select: onSelectVOPropertyType,
					dataSource: {
						type: "json",
						transport: {
							read: {
								url: '@Url.Action("VOCategoryDropDownList", "VariationOrder")',
								type: "GET",
								dataType: "json",
								contentType: "application/json; charset=utf-8"
							}
						},
						parameterMap: function (options, operation) {
							if (operation !== "read" && options.models) {
								return { models: kendo.stringify(options.models) };
							}
						},
						schema: {
							data: "data"
						},
						sort: { field: "category_name", dir: "asc" },
					},
					noDataTemplate: $("#CategoryTemplate").html()
				});
		}
		else {
			$('<input required name="' + options.field + '"/>')
						.appendTo(container)
						.kendoDropDownList({
							filter: "contains",
							autoBind: false,
						   optionLabel: "Select Category",
							dataTextField: "category_name",
							dataValueField: "category_Id",
							   dataSource: {
									type: "json",
									transport: {
										read: {
											url: '@Url.Action("CategoryDropDownList", "Master")',
											type: "GET",
											dataType: "json",
											contentType: "application/json; charset=utf-8"
										}
								   },
								   parameterMap: function (options, operation) {
									   if (operation !== "read" && options.models) {
										   return { models: kendo.stringify(options.models) };
									   }
								   },
								schema: {
									data: "data"
								   },
								   sort: { field: "category_name", dir: "asc" },
							},
							noDataTemplate: $("#CategoryTemplate").html()
						});
        }
	}

	function ItemDropDownEditor(container, options) {
		debugger;
	 //   var task_id = options.model.Task_Id;
	   // var task_id = "00000000-0000-0000-0000-000000000000";
		var ParentTaskId = $('#ParentTaskId').val();
		var task_id = options.model.Task_Id;
		var id;
		if (ParentTaskId == "" && task_id != 0) {
			id = task_id;
		}
		else {
			id = ParentTaskId;
		}
		$('<input maxlength="250" required name="' + options.field + '"/>')
						.appendTo(container)
						/*.kendoDropDownList({*/
						.kendoComboBox({
							filter: "contains",
							autoBind: false,
						   optionLabel: "Select Item Description",
							dataTextField: "item_description",
							dataValueField: "item_id",
							select: onSelectItem,
							   dataSource: {
									type: "json",
									transport: {
										read: {
											url: '@Url.Action("ItemDropDownList", "Master")?TaskId=' + id,
											type: "GET",
											dataType: "json",
											contentType: "application/json; charset=utf-8"
										}
								   },
								   parameterMap: function (options, operation) {
									   if (operation !== "read" && options.models) {
										   return { models: kendo.stringify(options.models) };
									   }
								   },
								schema: {
									data: "data"
								   },
								   sort: { field: "item_description", dir: "asc" },
							}
						});
		   }

	function UOMDropDownEditor(container, options) {
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
				optionLabel: "Select UOM",
				dataTextField: "uom_description",
				dataValueField: "uom_id",
				select: onSelectUOM,
				dataSource: {
					type: "json",
					transport: {
						read: {
							url: '@Url.Action("UOMDropDownList", "Master")',
							type: "GET",
							dataType: "json",
							contentType: "application/json; charset=utf-8"
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "uom_description", dir: "asc" },
				}
			});
	}

	function onSelectUOM(e) {
		debugger
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var value = e.dataItem.uom_description;

		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");

		if (value == "Lumpsum") {
			price.enable(false);
			qty.enable(false);
			//uomDesc.enable(false);
			amount.enable(true);

			//to get total row values in a grid
			var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
			var row = e.sender.element.closest("tr");
			var dataItem = grid.dataItem(row);
			debugger
			//console.log(dataItem);
			dataItem.set('Price', 0);
			dataItem.set('Qty', 0);
			dataItem.set('Amount', 0);

		} else {
			debugger
			//var grid = e.sender.element.closest(".k-grid").data("kendogrid");
			//var row = e.sender.element.closest("tr");
			//var dataitem = grid.dataitem(row);
			//dataItem.set('Amount', 0);

			//GetItemDetails(e, ItemId);
		   // var priceEditor = e.container.find("input[name=Price]").data("kendoNumericTextBox");
			//var quantityEditor = e.container.find("input[name=Qty]").data("kendoNumericTextBox");

			//var amountEditor = e.container.find("input[name=Amount]").data("kendoNumericTextBox");

			price.enable(true);
			qty.enable(true);
			//uomDesc.enable(true);
			amount.enable(true);
		}

	};

  //  function onSelectVOPropertyType(e) {
  //      debugger
  //      var detailGridWrapper = this.wrapper;
		//var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		//var property_Id = e.dataItem.category_Id;
		//var property_Name = e.dataItem.category_name;



  //      }

  //  };

	function BillingUOMDropDownEditor(container, options) {
		var LookUpColumnId = 1;
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
				//optionLabel: "Select BillingUOM",
				dataTextField: "description",
				dataValueField: "status_lookup_id",
				select: onSelectBillingUOM,
				dataSource: {
					type: "json",
					transport: {
						read: {
							url: '@Url.Action("Bind_StatusLookUp", "Master")?LookUpColumnId='+LookUpColumnId,
							type: "GET",
							dataType: "json",
							contentType: "application/json; charset=utf-8"
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "description", dir: "asc" },
				}
			});
	}

	function onSelectBillingUOM(e) {
		debugger
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var value = e.dataItem.description;

		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");

		debugger
		if (value == "FOC" || value == "Inclusive" || value == "Complementary") {
			price.enable(false);
			qty.enable(false);
			uomDesc.enable(false);
			amount.readonly();

			//to get total row values in a grid
			var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
			var row = e.sender.element.closest("tr");
			var dataItem = grid.dataItem(row);
			console.log(dataItem);
			dataItem.set('Price', 0);
			dataItem.set('Qty', 0);
            dataItem.UOM.set('uom_id', 0);
            dataItem.UOM.set('uom_description', '-- Select --');
			dataItem.set('Amount', 0);
			//qty.value('');
			//price.value('');
		   // uomDesc.value('');

			//parentTR.find("td[data-container-for='Amount'] .totalSpan").html('');
		} else {
			debugger
			//to get total row values in a grid
			var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
			var row = e.sender.element.closest("tr");
			var dataItem = grid.dataItem(row);
			// debugger
			//console.log(dataItem);
			//debugger
			var ItemId = dataItem.Item.item_id;
			GetItemDetails(e, ItemId, price, qty);
			price.enable(true);
			qty.enable(true);
			uomDesc.enable(true);
			amount.enable(true);
		}

	};
	function onSelectItem(e) {
		debugger
		//Added for disabling price and Qty when it is lumpsum in UOm Default
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var Amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var BillingUOM = parentTR.find("td[data-container-for='BillingUOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		//uomDesc.enable(true);
		//Amount.enable(true);
		//BillingUOM.select(0);
		if (e.dataItem === undefined) {
			/*options.data.models[0].Item = { item_id: 0, item_description: options.data.models[0].Item }*/
		}
		else {
			var ItemId = e.dataItem.item_id;
			GetItemDetails(e, ItemId, price, qty);
		}
	};



	function GetItemDetails(e, ItemId, price, qty) {
		$.ajax({
			url: '@Url.Action("GetItemByItemId", "Master")?ItemId=' + ItemId,
			type: "POST",
			dataType: "json",
			//data: { JsonPackageDetails: JSON.stringify(options.data.models[0]) },
			success: function (result) {
				debugger
				//to get total row values in a grid
				var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
				var row = e.sender.element.closest("tr");
				var dataItem = grid.dataItem(row);
				dataItem.set('Price', result.data.Items[0].price);
				dataItem.set('Qty', result.data.Items[0].default_qty);
				//dataItem.set('BillingUOM', 1);
				//dataItem.set('BillingUOM', result.data.Items[0].default_qty);
				dataItem.set('Amount', result.data.Items[0].price * result.data.Items[0].default_qty);
				dataItem.set('UOM', result.data.Items[0].UOM);
				//uomDesc.enable(true);
				//Amount.enable(true);

				if (result.data.Items[0].UOM.uom_description == "Lumpsum") {
					debugger
					price.enable(false);
					qty.enable(false);
					dataItem.set('Price', 0);
					dataItem.set('Qty', 0);

				} else {
					price.enable(true);
					qty.enable(true);
				}
				//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
				//uomDesc.value(result.data.Items[0].uom.uom_id);
			},
			error: function (result) {
				//   debugger

			}
		});
	}

    function GetElectricalItemsDetails(e, PropertyType_Id) {
		$.ajax({
            url: '@Url.Action("GetElectricalItemsDetails", "VariationOrder")?PropertyType_Id=' + PropertyType_Id,
			type: "POST",
			dataType: "json",
			//data: { JsonPackageDetails: JSON.stringify(options.data.models[0]) },
			success: function (result) {
				debugger
				//to get total row values in a grid
				var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
				var row = e.sender.element.closest("tr");
				var dataItem = grid.dataItem(row);
				dataItem.set('Price', result.data.Items[0].price);
				dataItem.set('Qty', result.data.Items[0].default_qty);
				//dataItem.set('BillingUOM', 1);
				//dataItem.set('BillingUOM', result.data.Items[0].default_qty);
				dataItem.set('Amount', result.data.Items[0].price * result.data.Items[0].default_qty);
				dataItem.set('UOM', result.data.Items[0].UOM);
				//uomDesc.enable(true);
				//Amount.enable(true);

				if (result.data.Items[0].UOM.uom_description == "Lumpsum") {
					debugger
					price.enable(false);
					qty.enable(false);
					dataItem.set('Price', 0);
					dataItem.set('Qty', 0);

				} else {
					price.enable(true);
					qty.enable(true);
				}
				//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
				//uomDesc.value(result.data.Items[0].uom.uom_id);
			},
			error: function (result) {
				//   debugger

			}
		});
	}
	function PaymentTermsDropDownEditor(container, options) {
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
			   // optionLabel: "Select Payment Description",
				dataTextField: "Master_payment_description",
				dataValueField: "Master_payment_term_id",
				dataSource: {
					type: "json",
					transport: {
						read: {
							 url: '@Url.Action("BindMasterpaymentterms", "Master")',
							type: "GET",
							dataType: "json",
							contentType: "application/json; charset=utf-8"
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "Master_payment_description", dir: "asc" },
				},
				noDataTemplate: $("#PaymentTermTemplate").html()
			});
	}
	function GetContractTasksListItem(container, options) {
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
				optionLabel: "Select Task",
				dataTextField: "Task_Name",
				dataValueField: "Task_Id",
				select: onSelect,
				dataSource: {
					type: "json",
					transport: {
						read: {
							url: '@Url.Action("GetVOTasksListItem", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + TaskId,
							dataType: "json",
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "Seq_No", dir: "asc" },
				},
				noDataTemplate: $("#TaskTemplate").html()
			});
	}
	function bindTerms() {
		 $("#TermsGrid").kendoGrid({
					dataSource: {
				  transport: {
					   read: function (options) {
								$.ajax({
								  url: '@Url.Action("GetContractpaymentterms", "Contract")?ProjectId=' + ProjectId,
									type: "GET",
									dataType: "json",
									success: function (result) {
										debugger
										options.success(result);
									},
									error: function (result) {
										debugger
										options.error(result);
									}
								});
							},
							create: function (options) {
								debugger
								$.ajax({
									  url: '@Url.Action("UpsertProjectPaymentTerms", "Contract")?ProjectId=' + ProjectId,
									type: "POST",
									dataType: "json",
									data: { JsonContract: JSON.stringify(options.data.models[0]) },
									success: function (result) {
										debugger
										$("#TermsGrid").data('kendoGrid').dataSource.read();
										$("#TermsGrid").data('kendoGrid').refresh();
										if (result.data.Result > 0) {
											notify(result.data.Errormessage, "success");
										}
										else {
											notify(result.data.Errormessage, "error");
										}
										options.success(result);
									},
									error: function (result) {
										debugger
										notify(result.data.Errormessage, "error");
										options.error(result);
									}
								});
							},
							update: function (options) {
								debugger
								$.ajax({
									 url: '@Url.Action("UpsertProjectPaymentTerms", "Contract")?ProjectId=' + ProjectId,
									type: "POST",
									dataType: "json",
									data: { JsonContract: JSON.stringify(options.data.models[0]) },
									success: function (result) {
										debugger
										$("#TermsGrid").data('kendoGrid').dataSource.read();
										$("#TermsGrid").data('kendoGrid').refresh();
										if (result.data.Result > 0) {
											notify(result.data.Errormessage, "success");
										}
										else {
											notify(result.data.Errormessage, "error");
										}
										options.success(result);
									},
									error: function (result) {
										debugger
										notify(result.data.Errormessage, "error");
										options.error(result);
									}
								});
							},
							destroy: {
								 url: '@Url.Action("", "Contract")',
										type: "POST",
								dataType: "json",
								complete: function (e) {
									$("#TermsGrid").data("kendoGrid").dataSource.read();
									$("#TermsGrid").data('kendoGrid').refresh();
								}
							},
							parameterMap: function (options, operation) {
								if (operation !== "read" && options.models) {
									return { models: kendo.stringify(options.models) };
								}
							}
						},
						batch: true,
						pageSize: 6,
						schema: {
							data: "data.Items", total: "data.TotalCount",
							model: {
								id: "payment_term_id",
								fields: {
									payment_term_id: { editable: false, nullable: true },
									paymentdescription: { defaultValue: { Master_payment_term_id: 0, Master_payment_description: "--Select--" } },
								}
							}
						}
			   },
			   filterable: true,
				scrollable: false,
				sortable: true,
				pageable: true,
				navigatable: true,
			  //toolbar: [
			  //    { name: "create", text: "Add new Payment Term" }
			  //],
				autoSync: true,
				resizable: true,
					pageable: {
						pageSize: 10,
						buttonCount: 10,
						pageSizes: [5, 10, 20, 50, 100, 500]
					},
					columns: [

						{ field: "payment_term_id", title: "" ,hidden: true },
						{ field: "paymentdescription", title: "Payment Description", attributes: { style: "text-align:left;" }, filterable: { multi: true, search: true }, editor: PaymentTermsDropDownEditor, template: "#=paymentdescription.Master_payment_description#" },
						//{
						//    command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
						//        { name: "destroy", text: " " }], title: "Action", width: "100px" }
					],
					editable: "inline"
				});
	}
	function onSelect(e) {
		debugger
		if (e.dataItem) {
			$("#ParentTaskId").val(e.dataItem.Task_Id);
			//Nithin added for when we select parent grid dropdown cancel child grid row
			$("#VOchildGrid").data("kendoGrid").cancelRow("tr:eq(1)");

		}
	};
	function expand_all(e) {
		var grid = $("#VOAdditionGrid").data("kendoGrid");
		$(".k-master-row").each(function (index) {
			grid.expandRow(this);
		});
	}

	function collapse_all(e) {
		var grid = $("#VOAdditionGrid").data("kendoGrid");
		$(".k-master-row").each(function (index) {
			grid.collapseRow(this);
		});
	}



	function OnOmitClick(e) {
		debugger;
		var tr = $(e.target).closest("tr");
		var item = this.dataItem(tr);
		var TaskId = item.Task_Id;
		var TaskName = item.Task_Name;
		var Project_Det_Id = item.Project_Det_Id;
		$('#ProjDetailId').val(Project_Det_Id);
		var JsonVODetails = JSON.stringify(item);
		 $.ajax({
			 url: '@Url.Action("UpsertVO_Details", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + TaskId + '&TaskName=' + TaskName + '&RecordType=' + OmissionRecordType,
									type: "POST",
									dataType: "json",
									data: { JsonVODetails: JsonVODetails },
											success: function (result) {
												debugger
												if (result.data.Result > 0) {

													$('#btnConfirm').css('display', 'inline-block');
													$("#btnConfirm").prop("disabled", false);
													$("#discount").prop("disabled", false);
												  //  $('#VO_ID').val(result.data.Vo_Id);
													$('#VODetailId').val(result.data.Id);


													$(".k-grid-add").css("display", "inline-block");
													// notify(result.data.Errormessage, "success");

													var Subtotal = result.data.SubTotal;

													if (Subtotal > 0 || Subtotal > 0.00) {
														$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
														$('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
														$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
														if ($('#VO_ID').val() != "") {
															$('#VO_ID').val(result.data.Vo_Id);
															GetVODetailsByProjectId();
															onBlurDiscount(result.data.Errormessage);
														}
														else {
															$('#VO_ID').val(result.data.Vo_Id);
															GetVODetailsByProjectId();
															notify(result.data.Errormessage, "success");
														}
													   // onBlurDiscount(result.data.Errormessage);
													}
													else {

														notify(result.data.Errormessage, "success");
														$('#VO_ID').val(result.data.Vo_Id);
														GetVODetailsByProjectId();
											  $('#sub_total_amount_A').text(formatCurrency(result.data.addition_Amount));
													$('#sub_total_amount_B').text(formatCurrency(result.data.omission_Amount));
													$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
												$('#total_amount').text(formatCurrency(result.data.Amount));
												$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
												$('#gst_amount').text(formatCurrency(result.data.gst_amount));
												$('#grand_total_amount').text(formatCurrency(result.data.Amount));
												$('#total_afterDiscount').text("$0.00");
												$("#discount").val('0');
													}
													$("#AdditionOmissionGrid").data('kendoGrid').dataSource.read();
													$("#AdditionOmissionGrid").data('kendoGrid').refresh();
												 // notify(result.data.Errormessage, "success");
												}
												else {
													notify(result.data.Errormessage, "error");
												}

											},
											error: function (result) {
												debugger

												//options.error(result);
											}
										});

	}

</script>
<script>
	//Nithin Added For Digital Signature For Both Salesman and Customer
	//Salesman Signature
	var geom = kendo.geometry;
	var Point = geom.Point;
	var draw = kendo.drawing;
	var Path = draw.Path;
	var path;

	$("#salesman-surface-container").on("mousemove", function (e) {
		if (!path) {
			return;
		}

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		path.lineTo(newPoint);
	}).on("mousedown", function (e) {
		path = new Path({
			stroke: {
				color: '#E4141B',
				width: 2,
				lineCap: "round",
				lineJoin: "round"
			}
		});

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		for (var i = 0; i < 1; i++) {
			path.lineTo(newPoint.clone().translate(i * 1, 0));
		}

		salesman_surface.draw(path);

	}).on("mouseup", function (e) {
		path = undefined;
	});


	//Customer Signature

	var geom1 = kendo.geometry;
	var Point1 = geom.Point;
	var draw1 = kendo.drawing;
	var Path1 = draw.Path;
	var path1;

	$("#customer-surface-container").on("mousemove", function (e) {
		if (!path1) {
			debugger
			return;
		}

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		path1.lineTo(newPoint);
	}).on("mousedown", function (e) {
		path1 = new Path({
			stroke: {
				color: '#E4141B',
				width: 2,
				lineCap: "round",
				lineJoin: "round"
			}
		});

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		for (var i = 0; i < 1; i++) {
			path1.lineTo(newPoint.clone().translate(i * 1, 0));
		}

		customer_surface.draw(path1);

	}).on("mouseup", function (e) {
		path1 = undefined;
	});

	//Saving both the signatures in a variable
	var salesman_surface = draw.Surface.create($("#salesman_surface"));
	var customer_surface = draw.Surface.create($("#customer_surface"));

	//$(".export-svg").click(function () {
	//    // Convert the DOM element to a drawing using kendo.drawing.drawDOM
	//    kendo.drawing.drawDOM($("#salesman_surface"))
	//        .then(function (group) {
	//            // Render the result as a SVG document
	//            return kendo.drawing.exportSVG(group);
	//        })
	//        .done(function (data) {
	//            // Save the SVG document
	//            kendo.saveAs({
	//                dataURI: data,
	//                fileName: "signature.svg",
	//                proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
	//            });
	//        });
	//    kendo.drawing.drawDOM($("#customer_surface"))
	//        .then(function (group) {
	//            // Render the result as a SVG document
	//            return kendo.drawing.exportSVG(group);
	//        })
	//        .done(function (data) {
	//            // Save the SVG document
	//            kendo.saveAs({
	//                dataURI: data,
	//                fileName: "signature.svg",
	//                proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
	//            });
	//        });
	//});


	//Clearing the signature
	$(".clear").click(function () {
		salesman_surface.clear();
		customer_surface.clear();
	});

	function SaveSignature() {
		if (salesman_surface._instance._rootElement.innerHTML == "<defs></defs>") {
			debugger
			alert("Please draw Salesman Signature");
		} else if (customer_surface._instance._rootElement.innerHTML == "<defs></defs>") {
			alert("Please draw Customer Signature");
			debugger
		}
		else {
		var CustImageData;
		kendo.drawing.drawDOM($("#salesman_surface"))
			.then(function (group) {
				debugger

				// Render the result as a PNG image
				return kendo.drawing.exportImage(group);
			})
			.done(function (data) {
				debugger
				// Save the image file
			   // var FileName = contract_number + "-" + Customer + "-" + Salesmen + ".jpg";
				@*kendo.saveAs({
					dataURI: data,
					fileName: "Contract Sign.png",
					proxyURL: '@Url.Action("SaveSignature", "Contract")',
					forceProxy: true,
					// proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
				});*@

			@*var Path = @PMS.Common.Constants.PhysicalPath + "/Contracts/" + ContractYear + "/" + FileName;*@

				kendo.drawing.drawDOM($("#customer_surface"))
					.then(function (group) {
						// Render the result as a SVG document
						return kendo.drawing.exportImage(group);
					})
					.done(function (data1) {
						CustImageData = data1;                       // Save the SVG document
						//kendo.saveAs({
						//    dataURI: data,
						//    fileName: "signature.svg",
						//    proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
						//});
					});


				var Customer = '@Model.customer'.replace(/[^a-z\s]/gi, '').replace(/[_\s]/g, '-');
				var Salesmen = '@Model.salesmen'.replace(/[^a-z\s]/gi, '').replace(/[_\s]/g, '-');

				@*var Customer = '@Model.customer'.replace(' ', '_');
				var Salesmen = '@Model.salesmen'.replace(' ', '_');*@
				var contract_number = $("#VO_Number").text().replace('/', '_');
				var contract_date = new Date($('#date_range').data('daterangepicker').startDate);
				var ContractYear = contract_date.getFullYear();
				var CustomerFileName = contract_number + "-" + Customer + ".jpg";
				var SalesmenFileName = contract_number + "-" + Salesmen + ".jpg";
				var DOCUMENT_NAME = "Customer Signature";
				var FILE_TYPE = "jpg";
				var CustomerImage_PATH = "/VO/" + ContractYear + "/" + CustomerFileName;
				var SalesmenImage_PATH = "/VO/" + ContractYear + "/" + SalesmenFileName;
				var VO_ID = $('#VO_ID').val(); //ProjectId;//

				var VODate = $('#hdnVODate').val();
                var CustomerName = $('#hdnCustomerName').val();
                var SalesmenName = $('#hdnSalesmenName').val();
				var CustomerAddress = $('#hdnCustomerAddress').val();
                var ProjectId = $('#hdnProjectId').val();

				var Values = {
					SalesmanimageData: data,
					CustomerimageData: CustImageData,
					Customer: Customer,
					Salesmen: Salesmen,
					contract_number: contract_number,
					contract_date: contract_date,
					ContractYear: ContractYear,
					CustomerFileName: CustomerFileName,
					SalesmenFileName: SalesmenFileName,
					DOCUMENT_NAME: DOCUMENT_NAME,
					FILE_TYPE: FILE_TYPE,
					CustomerImage_PATH: CustomerImage_PATH,
					SalesmenImage_PATH: SalesmenImage_PATH,
					SuperId: VO_ID,
					VODate: VODate,
					CustomerName: CustomerName,
					SalesmenName: SalesmenName,
					CustomerAddress: CustomerAddress,
                    ProjectId: ProjectId
				};
				var JsonValues = JSON.stringify(Values);
                $.loader({ content: "<table><tr><td><h5>Confirmation of variation Order in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
				$.ajax({
					url: '@Url.Action("Upload_VOSignature", "VariationOrder")',
					type: "POST",
					dataType: "json",
					data: { JsonSignature: JsonValues },
					success: function (result) {
						debugger
						if (result.data.Result > 0) {

							  //notify(result.data.Errormessage, "success");
							Submit_VOStatusChange(5);
						}
						else {
							notify(result.data.Errormessage, "error");
						}
						options.success(result);
					},
					error: function (result) {
						debugger
						options.error(result);
					}
				});
			});
		salesman_surface.clear();
		customer_surface.clear();
		$("#signature_modal").modal('hide');
		}
	}

	function Submit_VOStatusChange(statusId) {
		debugger;
		var VO_Id = $('#VO_ID').val();
		var Values = {
			VO_Id: VO_Id,
			Status_Id: statusId,
		};
		var JsonValues = JSON.stringify(Values);
        //$.loader({ content: "<table><tr><td><h5>Confirmation of variation Order in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
		$.ajax({
			type: "POST",
			url: "/VariationOrder/Update_VOStatus", // the URL of the controller action method
			data: { "JsonValues": JsonValues },
			dataType: 'Json',
			success: function (data) {
				debugger;
                $.loader('close');
				var Result = data.data.Result;
				var Errormessage = data.data.Errormessage;
				if (Result > 0) {
					notify(Errormessage, "success");
					$("#btnConfirm").prop("disabled", true);
					$("#status").text("Confirmed");
					window.location = '@Url.Action("AdditionOmission", "VariationOrder")?ProjectId=' + ProjectId + '&ShowHide=' + true + '&vo_id=' + VO_Id;
					$(".k-grid-add").css("display", "none");
					$("#discount").prop("disabled", true);

				}
				else {
					notify(Errormessage, "error");
				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				$.loader('close');
				notify("Fail", "error");
				notify(jqXHR, "error");
			}
		});

	}
	$(".allow_decimal").on("input", function (evt) {
		var self = $(this);
		self.val(self.val().replace(/[^0-9\,$]/g, ''));
		if ((evt.which != 46 || self.val().indexOf('.') != -1) && (evt.which < 48 || evt.which > 57)) {
			evt.preventDefault();
		}
	});

	function OnclickNewVO() {
		debugger;
		$('#AdditionOmissionGrid').css('display', 'block');
		$('#btnNewVO').css('display', 'none');
		$("#lblnewVO").css('display', 'none');
	}

	function PrintPreview() {
		debugger;
		var ProjectId = $('#ProjectId').val();
		var VO_ID = $('#VO_ID').val();
		wnd.center().open();
		$("#yes").click(function () {
			debugger
			window.open('@Url.Action("PrintPreview", "VariationOrder")?Id=' + ProjectId +
				"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + true + "&vo_id=" + VO_ID, "socialPopupWindow",
			   "location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
			wnd.close();
		});

		$("#no").click(function () {
			debugger
			window.open('@Url.Action("PrintPreview", "VariationOrder")?Id=' + ProjectId +
				"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + false + "&vo_id=" + VO_ID, "socialPopupWindow",
			   "location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
			wnd.close();
		});
	}


	  function VOList() {
		window.location = '@Url.Action("VariationOrderList", "VariationOrder")';
	}


	$(".collapse.show").each(function () {
		$(this).prev(".card-header").find(".fa").addClass("fa-minus").removeClass("fa-plus");
	});

	// Toggle plus minus icon on show hide of collapse element
	$(".collapse").on('show.bs.collapse', function () {
		$(this).prev(".card-header").find(".fa").removeClass("fa-plus").addClass("fa-minus");
	}).on('hide.bs.collapse', function () {
		$(this).prev(".card-header").find(".fa").removeClass("fa-minus").addClass("fa-plus");
	});


	$("#discount").focus(function () {
		debugger
		$(this).select();
	});

	function OnChangeDiscountPercentage() {
		debugger
        var discountPercentage = parseFloat($("#discount_percentage").val());
        var sub_total_amount = parseFloat($("#sub_total_amount").text().replace('$', '').replace(',', '').trim());
        if (sub_total_amount == "NaN" || parseFloat(sub_total_amount) == parseFloat(0)) {
            sub_total_amount = 1;
        }

        if (discountPercentage == null || discountPercentage == "") {
            return false;
        }
        var res = (discountPercentage / 100) * sub_total_amount;
        $("#discount").val("$" + res.toFixed(2).toString());
	}

	function OnClickSendMail() {
            //debugger;
			var ProjectId = $('#ProjectId').val();
            var contract_number ='@Model.EvoNo'.replace('/', '_');
			var contract_date = new Date($('#date_range').data('daterangepicker').startDate);
			var ContractYear = contract_date.getFullYear();
			var VODate = $('#hdnVODate').val();
			var CustomerName = $('#hdnCustomerName').val();
			var SalesmenName = $('#hdnSalesmenName').val();
			var CustomerAddress = $('#hdnCustomerAddress').val();

			var Values = {
                contract_number: contract_number,
                contract_date: contract_date,
                ContractYear: ContractYear,
                VODate: VODate,
                CustomerName: CustomerName,
                SalesmenName: SalesmenName,
                CustomerAddress: CustomerAddress,
                Internal_No: $("#EVO_Number").text(),
				ProjectId: $('#ProjectId').val(),
                VO_ID : $('#VO_ID').val()
			}
			var JsonValues = JSON.stringify(Values);
            $.loader({ content: "<table><tr><td><h5>Sending Email</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
            $.ajax({
                type: "POST",
                url: "/VariationOrder/SendingVOMail", // the URL of the controller action method
                //data: { "ProjectId": ProjectId },
                data: { "JsonValues": JsonValues },
                dataType: 'Json',
                success: function (data) {
					debugger;
                    $.loader('close');
                    var Result = data.data.Result;
                    var Errormessage = data.data.Errormessage;
                    if (Errormessage == "An email has been sent.")
                        notify(Errormessage, "success");
					else
                        notify(Errormessage, "error");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $.loader('close');
                    notify("Fail", "error");
                    notify(jqXHR, "error");
                }
            });
		}

</script>