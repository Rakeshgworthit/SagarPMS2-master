
@{
    ViewBag.Title = "AdditionDetail";
}


<style>
    .data_inline {
        font-size: 1rem;
        font-weight: 500;
    }

    .data_inline_label {
        font-size: 1rem;
        font-weight: bold;
    }

    #discount {
        text-align: right;
        padding-right: 0px;
        width: 120px;
    }

    .currency {
        text-align: right;
    }

    .negative_field {
        color: red;
        font-weight: bold;
    }

    .positive_field {
        color: green;
        font-weight: bold;
    }

    .collapse_header {
        background: #64aee9;
        color: white;
        font-weight: bold;
    }
    /*.card-header:after {
        font-family: 'FontAwesome';
        content: "\f068";
        float: right;
    }

    .card-header.collapsed:after {*/
    /* symbol for "collapsed" panels */
    /*content: "\f067";
    }*/
    #Electric_VO_grid div[data-role="grid"] .k-alt {
        background-color: white;
        color: black;
    }

    #Electric_VO_grid tbody tr[role="row"].k-state-selected {
        color: #fff;
        background-color: #34765a;
        border-color: #427f65;
    }

    #discount, #discount_percentage, #discount_contr {
        text-align: right;
        padding-right: 0px;
        width: 120px;
        padding: 10px;
    }
</style>

<div class="panel box-shadow-none content-header">
    <div class="panel-body">
        <div class="row">
            <div class="col-md-6 col-7">
                <h3 class="animated fadeInLeft text-primary">Electrical VO</h3>
            </div>
            <div class="col-md-6 col-5 text-right ">
                @if (Model.EvoStatus == "Confirmed")
                {
                    <button type="button" id="btnAddNewEvo" onclick="AddNewEvo();" class='btn btn-primary ml-2 mb-2'>
                        <span>New Evo</span>
                    </button>
                }
                else
                {
                    <button type="button" id="btnAddNewEvo" onclick="AddNewEvo();" style="display:none" class='btn btn-primary ml-2 mb-2'>
                        <span>New Evo</span>
                    </button>
                }
                <button type="button" onclick="ContractList();" class='btn btn-primary ml-2 mb-2'>
                    <span>Contract List</span>
                </button>
                <button type="button" onclick="EVOList();" class='btn btn-primary ml-2 mb-2'>
                    Electrical VO List
                </button>
                @*<button type="button" onclick="ContractList();" class='btn btn-primary ml-2 mb-2'>
                        <span>Contract List</span>
                    </button>*@
            </div>

        </div>
    </div>
</div>

<div class="row mx-1">
    @*//contract Details*@
    <div class="col-md-12">
        <input type="hidden" id="date_range" name="date_range" class="form-control date_form_control" />
        <input type="hidden" id="ProjectId" class="form-control col-8" value="@ViewBag.ProjectId" />

        <input type="hidden" id="ProjDetailId" class="form-control " />

        <input type="hidden" id="VODetailId" class="form-control " />
        <input type="hidden" id="ParentTaskId" name="ParentTaskId" class="form-control" />

        <input type="hidden" id="VO_ID" class="form-control col-8" value="@ViewBag.vo_id" />

        <input type="hidden" id="hdnVODate" name="hdnVODate" class="form-control" value="@Model.shortForwardDate" />
        <input type="hidden" id="hdnCustomerName" name="hdnCustomerName" class="form-control" value="@Model.customer" />
        <input type="hidden" id="hdnSalesmenName" name="hdnSalesmenName" class="form-control" value=">@Model.salesmen" />
        <input type="hidden" id="hdnCustomerAddress" name="hdnCustomerAddress" class="form-control" value="@Model.project_name" />
        <input type="hidden" id="hdnProjectId" name="hdnProjectId" class="form-control" value="@Model.project_id" />

        @if (ViewBag.ShowHide == true)
        {

            <div class="card">
                <div class="card-header collapse_header" role="button" data-toggle="collapse" data-target="#contract_details" aria-expanded="true" aria-controls="contract_details" style="display:inline-block;">
                    @*<h5><a hre data-toggle="collapse" data-target="#contract_details" role="button" aria-expanded="false">Contract Details</h5>*@
                    <div class="row">
                        <div class="col-md-6 col-6">
                            <h4 class="mb-0">
                                Contract Details
                            </h4>
                        </div>
                        <div class="col-md-6 col-6 text-right">
                            <h4 class="text-right mb-0"><i class="fa fa-plus"></i></h4>
                        </div>

                    </div>
                </div>
                <div class="card-body collapse " id="contract_details">

                    <div class="row">
                        @*<div class="col-md-12">
                                <h4 class="animated fadeInLeft text-primary">Contract Details</h4>
                            </div>*@
                        <div class="col-md-3 col-sm-6">

                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Salesmen : </span></label>
                                <label class="control-label"><span class="data_inline">@Model.salesmen</span></label>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Customer : </span></label>
                                <label class="control-label"><span class="data_inline">@Model.customer</span></label>

                            </div>
                        </div>
                        <div class="col-md-4 col-sm-6">
                            <div class="form-group  ">
                                <label class="control-label" for="project_name"><span class="data_inline_label" style="font-size:20px">Address/Site :</span></label>
                                <label class="control-label"><span class="data_inline">@Model.project_name</span></label>

                            </div>
                        </div>
                        <div class="col-md-2 col-sm-6 ">
                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Status :</span></label>
                                <label class="control-label" id="StatusId"><span class="data_inline">@Model.status</span></label>

                            </div>
                        </div>


                    </div>
                    <div class="row ">
                        <div class="col-md-3 col-sm-6">
                            <div class="form-group">
                                <label for="from_date" class="control-label"><span class="data_inline_label" style="font-size:20px">Contr No: </span></label>
                                <label class="control-label">
                                    <span class="data_inline">@Model.project_number</span>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <label for="from_date" class="control-label"><span class="data_inline_label" style="font-size:20px">Contr Date: </span></label>
                            <label class="control-label">
                                <span class="data_inline">
                                    @Model.shortForwardDate
                                </span>
                            </label>
                        </div>
                        <div class="col-md-3 col-sm-6 ">
                            <div class="form-group">
                                <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Amount :</span></label>
                                <label class="control-label"><span class="data_inline"><strong>$@Model.total_amount.ToString("#,##0.00")</strong></span></label>

                            </div>
                        </div>


                    </div>



                    <div id="VOAdditionGrid" class="accordion">
                    </div>

                    <br />

                    @* Start We need to have for Each Task Total*@
                    <br />
                    <br />
                    <div class="row justify-content-end ">
                        <div class="col-md-4 mr-4">
                            <table class="table task_total_amount_tables">
                                <tbody>
                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Sub Total :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="sub_total_amount_contr" name="sub_total_amount_contr">
                                                    $@Model.contract_amount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Discount % :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="lbl_discount_percentage" name="lbl_discount_percentage">
                                                    $@Model.discount_percentage.ToString()
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Discount Amount:</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="discount_contr1" name="discount_contr1">
                                                    $@Model.discount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles"> Total :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="total_afterDiscount_contr" name="total_afterDiscount_contr">
                                                </label>
                                            </p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td align="right">

                                            <p class="task_total_amount_titles">
                                                <label class="task_total_amount_titles" id="gst_percentage_contr" name="gst_percentage_contr">
                                                    @Model.gst_percentage % GST :
                                                </label>
                                            </p>
                                        </td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                <label id="gst_amount_contr" name="gst_amount_contr">
                                                    $@Model.gst_amount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>

                                    <tr>
                                        <td align="right"><p class="task_total_amount_titles">Grand Total :</p></td>
                                        <td align="right">
                                            <p class="task_total_amount_details">
                                                @*<span><i class="fa fa-dollar mr-2"></i></span>*@ <label id="grand_total_amount_contr" name="grand_total_amount_contr">
                                                    $@Model.total_amount.ToString("#,##0.00")
                                                </label>
                                            </p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    @*VO-Addition details*@
                </div>
            </div>



        }

        <br />
        <div class="row mt-3">
            <div class="col-md-12">
                <h3 class="animated fadeInLeft text-primary">EVO Details</h3>
            </div>

        </div>
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class=" col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Salesmen :</span></label>
                            @*<input type="text" class="form-control" value="@Model.salesmen" readonly />*@
                            <label class="control-label"><span class="data_inline">@Model.salesmen</span></label>
                        </div>

                        @*<label class="control-label"><span class="data_inline"></span></label>*@
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Customer : </span></label>
                            @*<input type="text" class="form-control" value="@Model.customer" readonly />*@

                            <label class="control-label"><span class="data_inline">@Model.customer</span></label>
                        </div>
                    </div>
                    <div class=" col-lg-4 col-md-4 col-sm-6">
                        <div class="form-group">
                            <label class="control-label" for="project_name"><span class="data_inline_label">Address/Site :</span></label>
                            <label class="control-label"><span class="data_inline">@Model.project_name</span></label>
                            @*<input type="text" class="form-control" id="VO_Date" value="@Model.project_name" readonly />*@

                        </div>

                    </div>


                    <div class="col-lg-2 col-md-2 col-sm-6 ">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Status :</span></label>
                            @*<input type="text" class="form-control" id="status" value="Draft" readonly />*@
                            <label class="control-label" id="Evostatus"><span class="data_inline">@Model.EvoStatus</span></label>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class=" col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="from_date" class="control-label"><span class="data_inline_label">EVO No : </span></label>

                            @*<input type="text" class="form-control" id="VO_Number" value="@Model.project_number" readonly />*@
                            <label class="control-label" id="EVO_Number">
                                <span class="data_inline">@Model.EvoNo</span>
                            </label>
                        </div>
                    </div>
                    <div class=" col-lg-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="from_date" class="control-label"><span class="data_inline_label">EVO Date : </span></label>
                            @*<input type="text" class="form-control" id="VO_Date" value="@Model.shortForwardDate" readonly />*@
                            <label class="control-label" id="EVO_Date">
                                <span class="data_inline">
                                    @if (Model.EvoDate != DateTime.Parse("01/01/0001 00:00:00"))
                                    {
                                        @Model.EvoDate
                                    }

                                </span>
                            </label>
                        </div>
                    </div>

                    <div class="col-lg-3 col-md-3 col-sm-6 ">
                        <div class="form-group">
                            <label class="control-label" for="from_date"><span class="data_inline_label">Evo Amount :</span></label>

                            @*<input type="text" class="form-control" id="total_amount" value="$@Model.total_amount.ToString("#,##0.00")" readonly />*@

                            <label class="control-label" id="Evototal_amount"><span class="data_inline"><strong>$@Model.totalamount.ToString("#,##0.00")</strong></span></label>
                        </div>
                    </div>


                    <div class="col-md-3  px-2 text-box text-center">
                        <button type="button" id="print_preview" onclick="PrintPreview();" class='btn btn-success'>
                            <i class="fa fa-print"></i><span class="ml-2">Print</span>
                        </button>
                        <button type="button" id="btnConfirm" class="btn btn-primary" data-toggle="modal" data-target="#signature_modal">
                            Confirmed
                        </button>

                    </div>



                </div>
            </div>
        </div>
        <br />
        <br />

        @*propertytype setction*@

        <div class="row">
            <div class="col-md-6 col-lg-5 col-xl-4">
                <div class="form-group">
                    <label class=" control-label text-primary" for="project_number" style="font-size: 20px;">PropertyType:</label>
                    <div class="w-100">
                        @Html.DropDownList("PropertyTypeId", Enumerable.Empty<SelectListItem>(), "--Select PropertyType--", new { @class = "form-control", @tabindex = "2" })

                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div id="divEvoPageId" class="col-md-12" style="display:none">
                <h6 class="text-danger"><b>Note :</b> Please Edit Qty Before Selection Of Item.</h6>
                <div id="buttons" class=" text-md-right">
                    <button type="button" id="btnSaveAll" class='btn btn-primary ml-2 mb-2'>
                        <span>Save All</span>
                    </button>
                    <button type="button" id="btnSendMail" onclick="OnClickSendMail();" class='btn btn-primary mb-2'>
                        <i class="fa fa-envelope"></i><span class="ml-2">Send Email</span>
                    </button>
                </div>
                <div class="row ">
                    <div class="col-md-12">
                        <div class="responsive-table">
                            <div id="ElectricalVOgrid"></div>
                        </div>
                        <div class="responsive-table">
                            <div id="Electric_VO_grid"></div>
                        </div>


                        <br />
                        <br />
                        <div class="row justify-content-end ">
                            <div class="col-md-4 mr-4">
                                <table class="table task_total_amount_tables">
                                    <tbody>
                                        <tr>
                                            <td align="right"><p class="task_total_amount_titles">Selected Items Total Amt:</p></td>
                                            <td align="right">
                                                <p class="task_total_amount_details">
                                                    <label id="EvoAmountlabel_beforesave">
                                                        $@Model.amount_before_discount.ToString("#,##0.00")
                                                    </label>
                                                </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right"><p class="task_total_amount_titles">Discount % :</p></td>
                                            <td align="right">
                                                <p class="task_total_amount_details">
                                                    <input type="text" id="discount_percentage" name="discount_percentage" class="form-control decimal-restrict" value="@Model.discount_percentage" onblur="CalculateDiscountAmount()" /> @*onblur="onBlurDiscount('')"*@
                                                </p>
                                            </td>
                                        </tr>

                                        <tr>
                                            <td align="right"><p class="task_total_amount_titles">Discount Amount:</p></td>
                                            <td align="right">
                                                <p class="task_total_amount_details">
                                                    <input type="text" id="discount_contr" name="discount_contr" class="form-control decimal-restrict" value="@Model.discount" onblur="CalculateGSTAndTotalAmount()" />  @*onblur="onBlurUpdate('')"*@
                                                </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right"><p class="task_total_amount_titles"> Total :</p></td>
                                            <td align="right">
                                                <p class="task_total_amount_details">
                                                    <label id="EvoAmountlabel" name="total_afterDiscount_contr">
                                                        $@Model.EvoAmount.ToString("#,##0.00")
                                                    </label>
                                                </p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right">

                                                <p class="task_total_amount_titles">
                                                    <label class="task_total_amount_titles" id="Evogst_percentage" name="gst_percentage_contr">
                                                        @Model.gst_percentage % GST :
                                                    </label>
                                                </p>
                                            </td>
                                            <td align="right">
                                                <p class="task_total_amount_details">
                                                    <label id="evogst_amount" name="gst_amount_contr">
                                                        $@Model.gst_amount.ToString("#,##0.00")
                                                    </label>
                                                </p>
                                            </td>
                                        </tr>

                                        <tr>
                                            <td align="right"><p class="task_total_amount_titles">Grand Total :</p></td>
                                            <td align="right">
                                                <p class="task_total_amount_details">
                                                    <label id="evogrand_total_amount" name="grand_total_amount_contr">
                                                        $@Model.grandtotal.ToString("#,##0.00")
                                                    </label>
                                                </p>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



        </div>
    </div>
</div>
<!-- signature Modal -->
<div class="modal fade" id="signature_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">EVO Signature </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="row" id="sign_wrapper">
                    <div class="col-lg-6">
                        <div id="salesman-surface-container">
                            <h6>Salesman Signature </h6>
                            <div style=" border: 1px solid black;">
                                <div class="content-wrapper">

                                    <div id="salesman_surface" style="width: 320px; height: 260px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div id="customer-surface-container">
                            <h6>Customer Signature </h6>
                            <div style=" border: 1px solid black;">
                                <div class="content-wrapper">
                                    <div id="customer_surface" style="width: 320px; height: 260px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*<button class='export-svg k-button'>Export as SVG</button>*@


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button class='btn btn-primary clear'>Clear Canvas</button>
                @*<button class='export-img k-button'>Export as Image</button>*@
                <button type="button" class="btn btn-primary" onclick="SaveSignature();">Confirm</button>
            </div>
        </div>
    </div>
</div>
<!--Print Quantity Modal-->
<div id="modalWindow">
    <h6> You want to print quantity column?</h6>
    <button id="yes" class="btn btn-primary pull-right ml-2 mb-2">Yes</button>
    <button id="no" class="btn btn-primary pull-right ml-2 mb-2">No</button>
</div>
@*Contract details related js*@

<script>

	var ProjectId = $('#ProjectId').val();
	var VO_ID = $('#VO_ID').val();
		var TaskId = '00000000-0000-0000-0000-000000000000';
		var propertyType_Id = 0;

	function GetEVODetailsByProjectId() {
		debugger
		var VO_ID = $('#VO_ID').val();
		$.ajax({
				type: 'POST',
			url: '@Url.Action("GetEVODetailsByProjectId", "VariationOrder")?ProjectId=' + ProjectId + '&VO_Id=' + VO_ID,
			 data: { },
				dataType: 'Json',
				success: function (data) {
				debugger;
					var VO_Number = data.data.vo_number;
					$("#EVO_Number").text(VO_Number);
					$("#EVO_Date").text(data.data.voDate);
					$("#Evototal_amount").text(data.data.amount);
                    $("#discount_percentage").text(data.data.discountPercentage);

					//$("#status").text(data.data.status);
					$("#Evostatus").text(data.data.status);

					if (data.data.status == "Confirmed") {
						$("#btnConfirm").prop("disabled", true);
						$(".k-grid-add").css("display", "none");
						$("#btnAddNewEvo").show();

                        $("#discount_contr").prop("disabled", true);
                        $("#discount_contr").off("onchange");
                        $("#discount_contr").off("onblur");

                        $("#discount_percentage").prop("disabled", true);
                        $("#discount_percentage").off("onchange");
                        $("#discount_percentage").off("onblur");
					}
					else {
						$("#btnConfirm").prop("disabled", false);
						debugger;
						if (!'@ViewBag.isEdit') {
							$("#btnSaveAll").prop("disabled", false);
						}
						else {
                            $("#btnSaveAll").prop("disabled", true);
                        }
						$("#btnAddNewEvo").hide();
                    }
					$('#sub_total_amount').text(formatCurrency(data.data.amount));
					$('#total_amount').text(formatCurrency(data.data.total_amount));
                    $('#Evogst_percentage').text(data.data.gst_percentage + '% GST :');
					$('#gst_amount').text(formatCurrency(data.data.gst_amount));
					$('#grand_total_amount').text(formatCurrency(data.data.total_amount));
					$('#sub_total_amount').text(formatCurrency(data.data.amount));
					$('#sub_total_amount_A').text(formatCurrency(data.data.addition_Amount));
					$('#sub_total_amount_B').text(formatCurrency(data.data.omission_Amount));
					$("#createdBy").text(data.data.createdBy);
					$("#created_date").text(data.data.created_date);
					$("#modified_by").text(data.data.modified_by);
					$("#modified_date").text(data.data.modified_date);
					$("#VO_ID").val(data.data.vo_id);
					$('#date_range').data('daterangepicker').setStartDate(data.data.created_date);
					debugger;
					var VO_SubTotal= data.data.amount; //$("#sub_total_amount").text().replace("$", "");
					var VO_Discount = data.data.discount_amount;//$("discount").val();
					//if (VO_Discount == undefined || VO_Discount == "") {
					//    VO_Discount = "0.00";
					//}

					var VO_totalAmount = VO_SubTotal - VO_Discount;
                    $("#discount_contr").val(formatCurrency(VO_Discount));
					$("#discount_percentage").val(data.data.discount_percentage);
					$("#total_afterDiscount").text(formatCurrency(VO_totalAmount));
					if (data.data.vo_id == "" || data.data.vo_id == null) {
						$('#AdditionOmissionGrid').css('display', 'none');
						$('#btnNewVO').css('display', 'inline-block');
						$('#btnConfirm').css('display', 'none');
						$("#VO_Date").text('');
					}
					else {
						$('#AdditionOmissionGrid').css('display', 'block');
						$('#btnNewVO').css('display', 'none');
						$("#lblnewVO").css('display', 'none');
						$("#VO_Date").text(data.data.voDate);
						GetRowsCountByEVO_Id();


					}
					var ContractStatusId =@Model.status_id;
					if (ContractStatusId == 6) {
						$('#btnConfirm').css('display', 'none');
						$(".k-grid-add").css("display", "none");
					}

                    if (data.data.status_id == 5) {
                         $('#btnSaveAll').prop('disabled', true);
                     }

				},
				error: function (jqXHR, textStatus, errorThrown) {
					notify("Fail", "error");
					notify(jqXHR, "error");
				}
		 });
	}

	function GetRowsCountByEVO_Id() {
		debugger;
		var VOID = $('#VO_ID').val();
		if (VOID == "") {
			$('#btnConfirm').css('display', 'none');
		}
		else {
			$.ajax({
				url: '@Url.Action("Get_EVODetails_RowsCount", "VariationOrder")',
				type: "POST",
				dataType: "json",
				data: { VO_Id: VOID },
				success: function (result) {
					debugger
					if (result.data.Result > 0) {
						debugger;
						var ContractStatusId =@Model.status_id;
						if (ContractStatusId == 6) {
							$('#btnConfirm').css('display', 'none');
						}
                        else {
                            $('#btnConfirm').css('display', 'inline-block');
						}
					}
					else {
						if (@Model.status_id != 5) {
							$('#btnConfirm').css('display', 'none');
						}
						else {
                            $('#btnConfirm').css('display', 'inline-block');
                        }
					}
				},
				error: function (result) {
					debugger

					options.error(result);
				}
			});
		}
	}

	function DateRangePicker() {
		$('#date_range').daterangepicker({
			"singleDatePicker": true,
			"autoUpdateInput": true,
			"autoApply": true,
			locale: {
				format: 'DD/MM/YYYY',
				cancelLabel: 'Clear'
			},
			ranges: {
				'Today': [moment(), moment()],
				'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
				'Last 7 Days': [moment().subtract(6, 'days'), moment()],
				'Last 30 Days': [moment().subtract(29, 'days'), moment()],
				'This Month': [moment().startOf('month'), moment().endOf('month')],
				'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
			},
			"alwaysShowCalendars": true,
		});

		$('#date_range').on('apply.daterangepicker', function (ev, picker) {
			$(this).val(picker.startDate.format('DD/MM/YYYY') /*+ ' - ' + picker.endDate.format('DD/MM/YYYY')*/);
		});

		$('#date_range').on('cancel.daterangepicker', function (ev, picker) {
			$(this).val('');
		});

		$('#date_range + .input-group-append').click(function () {
			$('#date_range').trigger("focus");
		});
	}

	function getPropertyTypeDropDownValues() {
			//debugger;
			$.ajax({
				type: "POST",
				contentType: "application/json; charset=utf-8",
				url: '@Url.Action("VOCategoryDropDownList", "VariationOrder")',
				data: "{}",
				dataType: "json",
				success: function (Result) {
					//debugger;
					$.each(Result.data, function (key, value) {
						debugger;
						$("#PropertyTypeId").append($("<option></option>").val(value.category_Id).html(value.category_name));
						if (@Model.PropertyType_id != 0) {
		                         	$("#PropertyTypeId").val(@Model.PropertyType_id);
			                        $("#PropertyTypeId").attr('disabled', 'disabled');

                                    propertyType_Id = @Model.PropertyType_id;
							        NewElectricalVOGrid(propertyType_Id,'@Model.Evo_id');
                           $('#divEvoPageId').css('display', 'inline-block');
			               $('#divEVOContainerDetails').css('display', 'inline-block');
                           //reloadpagewithGrid(propertyType_Id);

                            //getSelectedRowsData();
			               			};
					});

				},
				error: function (Result) {
					alert("Error");
				}
			});
		}

	$(document).ready(function () {
		debugger;
		var SubTotal = @Model.amount_before_discount;
		var discount =  @Model.discount;
		var totalAmount = @Model.EvoAmount;
		$("#EvoAmountlabel_beforesave").text(formatCurrency(SubTotal));
		$("#total_afterDiscount_contr").text(formatCurrency(totalAmount));
        $("#EvoAmountlabel").text(formatCurrency(totalAmount));
		$("#discount_contr").val(discount);
		GetEVODetailsByProjectId();
		getPropertyTypeDropDownValues();
		DateRangePicker();

        wnd = $("#modalWindow").kendoWindow({
            title: "Quantity Confirmation",
            modal: true,
            visible: false,
            resizable: false,
            width: 300
        }).data("kendoWindow");


		$('#VOAdditionGrid').kendoGrid({
			dataSource: {
				transport: {
					read: function (options) {
								$.ajax({
									url: '@Url.Action("GetContractTasksItem", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + TaskId,
									type: "GET",
									dataType: "json",
									success: function (result) {
										//debugger
										options.success(result);
									},
									error: function (result) {
										//debugger
										options.error(result);
									}
								});
							},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					}
				},
				batch: true,
				pageSize: 6,
				schema: {
					data: "data.Items", total: "data.TotalCount",
					model: {
						id: "Task_Id",
						fields: {
						 Task: { defaultValue: { Task_Id: 0, Task_Name: "Select Task" } },

						}
					}
				}

			},
			pageable: true,
			toolbar: [
				/*{ name: "create", text: "Add new Quotation Task" },*/ { template: '<a class="k-button"  onclick="return  collapse_all()"  style="float:right" >Collapse All</a>' }, { template: '<a class="k-button"  onclick="return  expand_all()"  style="float:right">Expand All</a>' }
			],
			detailInit: detailInit,
			dataBound: function () {
				this.expandRow(this.tbody.find("tr.k-master-row").first());
			},
			pageable: {
				pageSize: 10,
				buttonCount: 10,
				pageSizes: [5, 10, 20, 50, 100, 500],
				messages: {
					display: "{0} - {1} of {2} tasks", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
					empty: "No tasks to display",
					page: "Page",
					of: "of {0}", //{0} is total amount of pages
					itemsPerPage: "tasks per page",
					first: "Go to the first page",
					previous: "Go to the previous page",
					next: "Go to the next page",
					last: "Go to the last page",
					refresh: "Refresh"
				}
			},
			columns: [
				{ field: "Task", title: " ", attributes: { style: "text-align:left;font-size: 20px;" }, editor: GetContractTasksListItem, template: "#=Task.Task_Name#" },
			],
			editable: "inline"

		});

	});
	function detailInit(e) {
		//debugger;
		$("<div id='VOchildGrid'/>").appendTo(e.detailCell).kendoGrid({
				dataSource: {
						transport: {
							read: function (options) {
								$.ajax({
									url: '@Url.Action("GetContractTasksItemDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id,
									type: "GET",
									dataType: "json",
									success: function (result) {
										//debugger
										options.success(result);
									},
									error: function (result) {
										//debugger
										options.error(result);
									}
								});
						},
							 update: function (options) {
								//debugger
								$.ajax({
									url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + e.data.Task.Task_Name,
									type: "POST",
									dataType: "json",
									data: { JsonContractDetails: JSON.stringify(options.data.models[0]) },
									success: function (result) {
										//debugger
										$("#VOAdditionGrid").data('kendoGrid').dataSource.read();
										$("#VOAdditionGrid").data('kendoGrid').refresh();
										if (result.data.Result > 0) {
											notify(result.data.Errormessage, "success");
										}
										else {
											notify(result.data.Errormessage, "error");
										}
										options.success(result);
									},
									error: function (result) {
										//debugger
										notify(result.data.Errormessage, "error");
										options.error(result);
									}
								});
						},
							 create: function (options) {
								//debugger
								$.ajax({
									url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + e.data.Task.Task_Name,
									type: "POST",
									dataType: "json",
									data: { JsonContractDetails: JSON.stringify(options.data.models[0]) },
									success: function (result) {
										//debugger
										$("#VOAdditionGrid").data('kendoGrid').dataSource.read();
										$("#VOAdditionGrid").data('kendoGrid').refresh();
										if (result.data.Result > 0) {
											notify(result.data.Errormessage, "success");
										}
										else {
											notify(result.data.Errormessage, "error");
										}
										options.success(result);
									},
									error: function (result) {
										//debugger
										notify(result.data.Errormessage, "error");
										options.error(result);
									}
								});
							},

							destroy: {
								 url: '@Url.Action("", "Contract")',
										type: "POST",
								dataType: "json"
							},


							parameterMap: function (options, operation) {
								if (operation !== "read" && options.models) {
									return { models: kendo.stringify(options.models) };
								}
							}
						},
						batch: true,
						pageSize: 10,
						schema: {
							data: "data.Items", total: "data.TotalCount",
							model: {
								id: "project_id",
								fields: {
									project_id: { editable: false },
									project_det_Id: { editable: false },
									Task_Id: { editable: false },
									Category: { defaultValue: { category_Id: 0, category_name: "-- Select --" } },
									Item: { defaultValue: { item_id: 0, item_description: "-- Select --" } },
									BillingUOM: { defaultValue: { status_lookup_id: 0, description: "-- Select --" } },
									Price: { validation: { required: true }, type: "number" },
									Qty: { validation: { required: true, type: "number",min: 0 } },
									UOM: { defaultValue: { uom_id: 0, uom_description: "-- Select --" }, validation: { required: true } },
									item_remarks: { validation: { required: false } },
									Amount: { validation: { required: true }, type: "number" },
								}
							}
						},
						aggregate: [
							{ field: "Price", aggregate: "sum" },
							{ field: "Amount", aggregate: "sum" }
						]
					},
					scrollable: false,
					sortable: true,
					pageable: true,
					navigatable: true,
			   //toolbar: [
			   //    { name: "create", text: "Add new Item" }
			   //],
					autoSync: true,
					resizable: true,
					pageable: {
						pageSize: 10,
						buttonCount: 10,
						pageSizes: [5, 10, 20, 50, 100, 500]
			   },
			  // edit: onGridEditing,
			   columns: [
						{ field: "Task_Id", hidden: true },
						{ field: "project_det_Id", hidden: true },
						{
							field: "Category", title: "Category", attributes: { style: "text-align:left;", filterable: { multi: true, search: true } },
							editor: CategoryDropDownEditor, template: "#=Category.category_name#"
						},
						{ field: "Item", title: "Item Description", width: "350px", attributes: { style: "text-align:left;" }, editor: ItemDropDownEditor, template: "#=Item.item_description#" },
						{ field: "BillingUOM", title: "Billing UOM", attributes: { style: "text-align:left;" }, editor: BillingUOMDropDownEditor, template: "#=BillingUOM.description#" },
						{ field: "Price", title: "Price ($)", format: "{0:c}",footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" }},
						{ field: "Qty", title: "Quantity" },
						{ field: "UOM", width: "100px", title: "UOM", attributes: { style: "text-align:left;" }, editor: UOMDropDownEditor, template: "#=UOM.uom_description#" },
						{ field: "item_remarks", title: "Remarks", attributes: { style: "text-align:left;" } },
						{ field: "Amount", title: "Amount", format: "{0:c}", footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" } }
						@*{
							command: [
								{
									name: "clone", text: "Add", iconClass: "k-icon k-i-plus-circle", click: OnCloneClick,
								visible: function ()
								{
									var StatusId =@Model.status_id; return StatusId != "6"
								}
							},
								{
									name: "Omit", text: "Omit", iconClass: "k-icon k-i-minus-circle", click: OnOmitClick,
									visible: function ()
									{
										var StatusId =@Model.status_id; return StatusId != "6"
									}
								},], title: "Action", width: "100px"
							//command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
							//{ name: "destroy", text: " " }], title: "Action", width: "100px"

						}*@
					],
			   editable: "inline",
					edit: function (e) {
						//debugger;
						var detailGridWrapper = this.wrapper;
						var parentRow = detailGridWrapper.closest("tr.k-detail-row").prev("tr");
						var parentGrid = parentRow.closest("[data-role=grid]").data("kendoGrid");
						//debugger
						var parentModel = parentGrid.dataItem(parentRow);

						var ParentTaskId = parentModel.Task.Task_Id;
						var ParentTaskName = parentModel.Task.Task_Name;
						//debugger
						var a = this;
						a.dataSource.transport.create.url = '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + ParentTaskId + '&TaskName=' + ParentTaskName;
					},
					complete: function (e) {
						//debugger
						$("#VOAdditionGrid").data("kendoGrid").dataSource.read();
						$("#VOAdditionGrid").data('kendoGrid').refresh();
								}
		   });
	}


	function OndataBound(e) {
		//debugger;
	    var ContractStatusId =@Model.status_id;
		if (ContractStatusId == 6) {
			$(".k-grid-add").css("display", "none");
		}
		else if (e.sender._data.length > 0) {
			if (e.sender._data[0].StatusId == 5) { // the condition against which you want to show/hide the toolbar
				//debugger;
				//  this.element.find(".k-grid-toolbar").hide(); // hides the entire toolbar
				this.element.find(".k-grid-add").hide(); // hides just the Create button
			}
		}
	}
	function onGridEditing(arg) {
		arg.container.find("input[name='item_remarks']").attr('maxlength', '100');
	}
	function customBoolEditor(container, options) {
		$('<input class="k-checkbox" type="checkbox" name="Highlight" data-type="boolean" data-bind="checked:Highlight">').appendTo(container);
	}
	function CategoryDropDownEditor(container, options) {
		//debugger;
		var detailGridWrapper = this.wrapper;
		//Electrical Works
	//	if (options.model.Task_Name != "" || options.model.Task_Name != undefined)
  //      var parentRow = detailGridWrapper.closest("tr.k-detail-row").prev("tr");
  //      var parentGrid = parentRow.closest("[data-role=grid]").data("kendoGrid");
          var ParentTaskId = $('#ParentTaskId').val();
		  var task_id = options.model.Task_Id;
		//var parentModel = parentGrid.dataItem(parentRow);
  //      var ParentTaskId = parentModel.Task.Task_Id;
  //      var ParentTaskName = parentModel.Task.Task_Name;
		var id;
        if (ParentTaskId == "" && task_id != 0) {
            id = task_id;
        }
        else {
            id = ParentTaskId;
		}
        if (id == "351ba0e6-2580-4f90-9366-9a9f8bd5577b") {
			$('<input required name="' + options.field + '"/>')
				.appendTo(container)

				.kendoDropDownList({
					filter: "contains",
					autoBind: false,
					optionLabel: "Select Category",
					dataTextField: "category_name",
					dataValueField: "category_Id",
					//select: onSelectVOPropertyType,
					dataSource: {
						type: "json",
						transport: {
							read: {
								url: '@Url.Action("VOCategoryDropDownList", "VariationOrder")',
								type: "GET",
								dataType: "json",
								contentType: "application/json; charset=utf-8"
							}
						},
						parameterMap: function (options, operation) {
							if (operation !== "read" && options.models) {
								return { models: kendo.stringify(options.models) };
							}
						},
						schema: {
							data: "data"
						},
						sort: { field: "category_name", dir: "asc" },
					},
					noDataTemplate: $("#CategoryTemplate").html()
				});
		}
		else {
			$('<input required name="' + options.field + '"/>')
						.appendTo(container)
						.kendoDropDownList({
							filter: "contains",
							autoBind: false,
						   optionLabel: "Select Category",
							dataTextField: "category_name",
							dataValueField: "category_Id",
							   dataSource: {
									type: "json",
									transport: {
										read: {
											url: '@Url.Action("CategoryDropDownList", "Master")',
											type: "GET",
											dataType: "json",
											contentType: "application/json; charset=utf-8"
										}
								   },
								   parameterMap: function (options, operation) {
									   if (operation !== "read" && options.models) {
										   return { models: kendo.stringify(options.models) };
									   }
								   },
								schema: {
									data: "data"
								   },
								   sort: { field: "category_name", dir: "asc" },
							},
							noDataTemplate: $("#CategoryTemplate").html()
						});
        }
	}
	function ItemDropDownEditor(container, options) {
		//debugger;
	 //   var task_id = options.model.Task_Id;
	   // var task_id = "00000000-0000-0000-0000-000000000000";
		var ParentTaskId = $('#ParentTaskId').val();
		var task_id = options.model.Task_Id;
		var id;
		if (ParentTaskId == "" && task_id != 0) {
			id = task_id;
		}
		else {
			id = ParentTaskId;
		}
		$('<input maxlength="250" required name="' + options.field + '"/>')
						.appendTo(container)
						/*.kendoDropDownList({*/
						.kendoComboBox({
							filter: "contains",
							autoBind: false,
						   optionLabel: "Select Item Description",
							dataTextField: "item_description",
							dataValueField: "item_id",
							select: onSelectItem,
							   dataSource: {
									type: "json",
									transport: {
										read: {
											url: '@Url.Action("ItemDropDownList", "Master")?TaskId=' + id,
											type: "GET",
											dataType: "json",
											contentType: "application/json; charset=utf-8"
										}
								   },
								   parameterMap: function (options, operation) {
									   if (operation !== "read" && options.models) {
										   return { models: kendo.stringify(options.models) };
									   }
								   },
								schema: {
									data: "data"
								   },
								   sort: { field: "item_description", dir: "asc" },
							}
						});
		   }
	function UOMDropDownEditor(container, options) {
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
				optionLabel: "Select UOM",
				dataTextField: "uom_description",
				dataValueField: "uom_id",
				select: onSelectUOM,
				dataSource: {
					type: "json",
					transport: {
						read: {
							url: '@Url.Action("UOMDropDownList", "Master")',
							type: "GET",
							dataType: "json",
							contentType: "application/json; charset=utf-8"
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "uom_description", dir: "asc" },
				}
			});
	}
	function onSelectUOM(e) {
		//debugger
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var value = e.dataItem.uom_description;

		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");

		if (value == "Lumpsum") {
			price.enable(false);
			qty.enable(false);
			//uomDesc.enable(false);
			amount.enable(true);

			//to get total row values in a grid
			var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
			var row = e.sender.element.closest("tr");
			var dataItem = grid.dataItem(row);
			//debugger
			//console.log(dataItem);
			dataItem.set('Price', 0);
			dataItem.set('Qty', 0);
			dataItem.set('Amount', 0);

		} else {
			//debugger
			//var grid = e.sender.element.closest(".k-grid").data("kendogrid");
			//var row = e.sender.element.closest("tr");
			//var dataitem = grid.dataitem(row);
			//dataItem.set('Amount', 0);

			//GetItemDetails(e, ItemId);
		   // var priceEditor = e.container.find("input[name=Price]").data("kendoNumericTextBox");
			//var quantityEditor = e.container.find("input[name=Qty]").data("kendoNumericTextBox");

			//var amountEditor = e.container.find("input[name=Amount]").data("kendoNumericTextBox");

			price.enable(true);
			qty.enable(true);
			//uomDesc.enable(true);
			amount.enable(true);
		}

	};
	function BillingUOMDropDownEditor(container, options) {
		var LookUpColumnId = 1;
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
				//optionLabel: "Select BillingUOM",
				dataTextField: "description",
				dataValueField: "status_lookup_id",
				select: onSelectBillingUOM,
				dataSource: {
					type: "json",
					transport: {
						read: {
							url: '@Url.Action("Bind_StatusLookUp", "Master")?LookUpColumnId='+LookUpColumnId,
							type: "GET",
							dataType: "json",
							contentType: "application/json; charset=utf-8"
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "description", dir: "asc" },
				}
			});
	}
	function onSelectBillingUOM(e) {
		//debugger
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var value = e.dataItem.description;

		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");

		//debugger
		if (value == "FOC" || value == "Inclusive" || value == "Complementary") {
			price.enable(false);
			qty.enable(false);
			uomDesc.enable(false);
			amount.readonly();

			//to get total row values in a grid
			var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
			var row = e.sender.element.closest("tr");
			var dataItem = grid.dataItem(row);
			console.log(dataItem);
			dataItem.set('Price', 0);
			dataItem.set('Qty', 0);
			dataItem.UOM.set('uom_description', '');
			dataItem.UOM.set('uom_id', 0);
			dataItem.set('Amount', 0);
			//qty.value('');
			//price.value('');
		   // uomDesc.value('');

			//parentTR.find("td[data-container-for='Amount'] .totalSpan").html('');
		} else {
			//debugger
			//to get total row values in a grid
			var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
			var row = e.sender.element.closest("tr");
			var dataItem = grid.dataItem(row);
			// //debugger
			//console.log(dataItem);
			////debugger
			var ItemId = dataItem.Item.item_id;
			GetItemDetails(e, ItemId);
			price.enable(true);
			qty.enable(true);
			uomDesc.enable(true);
			amount.enable(true);
		}

	};
	function onSelectItem(e) {
		//debugger
		//Added for disabling price and Qty when it is lumpsum in UOm Default
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var Amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var BillingUOM = parentTR.find("td[data-container-for='BillingUOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		//uomDesc.enable(true);
		//Amount.enable(true);
		//BillingUOM.select(0);
		if (e.dataItem === undefined) {
			/*options.data.models[0].Item = { item_id: 0, item_description: options.data.models[0].Item }*/
		}
		else {
			var ItemId = e.dataItem.item_id;
			GetItemDetails(e, ItemId, price, qty);
		}
	};
	function GetItemDetails(e, ItemId, price, qty) {
		$.ajax({
			url: '@Url.Action("GetItemByItemId", "Master")?ItemId=' + ItemId,
			type: "POST",
			dataType: "json",
			//data: { JsonPackageDetails: JSON.stringify(options.data.models[0]) },
			success: function (result) {
				//debugger
				//to get total row values in a grid
				var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
				var row = e.sender.element.closest("tr");
				var dataItem = grid.dataItem(row);
				dataItem.set('Price', result.data.Items[0].price);
				dataItem.set('Qty', result.data.Items[0].default_qty);
				//dataItem.set('BillingUOM', 1);
				//dataItem.set('BillingUOM', result.data.Items[0].default_qty);
				dataItem.set('Amount', result.data.Items[0].price * result.data.Items[0].default_qty);
				dataItem.set('UOM', result.data.Items[0].UOM);
				//uomDesc.enable(true);
				//Amount.enable(true);

				if (result.data.Items[0].UOM.uom_description == "Lumpsum") {
					//debugger
					price.enable(false);
					qty.enable(false);
					dataItem.set('Price', 0);
					dataItem.set('Qty', 0);

				} else {
					price.enable(true);
					qty.enable(true);
				}
				//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
				//uomDesc.value(result.data.Items[0].uom.uom_id);
			},
			error: function (result) {
				//   //debugger

			}
		});
	}
	function GetContractTasksListItem(container, options) {
		$('<input required name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDropDownList({
				filter: "contains",
				autoBind: false,
				optionLabel: "Select Task",
				dataTextField: "Task_Name",
				dataValueField: "Task_Id",
				select: onSelect,
				dataSource: {
					type: "json",
					transport: {
						read: {
							url: '@Url.Action("GetVOTasksListItem", "VariationOrder")?ProjectId=' + ProjectId + '&TaskId=' + TaskId,
							dataType: "json",
						}
					},
					parameterMap: function (options, operation) {
						if (operation !== "read" && options.models) {
							return { models: kendo.stringify(options.models) };
						}
					},
					schema: {
						data: "data"
					},
					sort: { field: "Task_Name", dir: "asc" },
				},
				noDataTemplate: $("#TaskTemplate").html()
			});
	}
	function onSelect(e) {
		//debugger
		if (e.dataItem) {
			$("#ParentTaskId").val(e.dataItem.Task_Id);
			//Nithin added for when we select parent grid dropdown cancel child grid row
			$("#VOchildGrid").data("kendoGrid").cancelRow("tr:eq(1)");

		}
	};
	function expand_all(e) {
		var grid = $("#VOAdditionGrid").data("kendoGrid");
		$(".k-master-row").each(function (index) {
			grid.expandRow(this);
		});
	}
	function collapse_all(e) {
		var grid = $("#VOAdditionGrid").data("kendoGrid");
		$(".k-master-row").each(function (index) {
			grid.collapseRow(this);
		});
	}

    function onBlurDiscount(ErrorMessage) {
        debugger

        var SubTotal = $("#EvoAmountlabel_beforesave").text().replace('$', '').trim();
        var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
        var discount = parseFloat($("#discount_contr").val().replace(',', '').replace('$', '').trim());
        if (sub_total_amount > discount && String(sub_total_amount) !== "0.00") {
            if (String(discount) === "" || String(discount) === "NaN") {
                return false;
            }
            else {
                OnChangeDiscountPercentage();
				CalculateGSTTotalAmountAfterDiscount();
                UpdateEVO(1, ErrorMessage);
            }
        }
        else {
            notify("Discount should be less than SubTotal", "error");
            $("#discount_contr").val('$0.00');
            return false;
        }
	}

    function onBlurUpdate(ErrorMessage) {
        debugger
        var SubTotal = $("#EvoAmountlabel_beforesave").text().replace('$', '').trim();
        var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
        var discount = parseFloat($("#discount_contr").val().replace(',', '').replace('$', '').trim());
        if (sub_total_amount > discount && String(sub_total_amount) !== "0.00") {
            if (String(discount) === "" || String(discount) === "NaN") {
                return false;
            }
            else {
                CalculateGSTTotalAmountAfterDiscount();
                UpdateEVO(1, ErrorMessage);
            }
        }
        else {
            notify("Discount should be less than SubTotal1", "error");
            $("#discount_contr").val('$0.00');
            return false;
        }
    }

    function CalculateGSTTotalAmountAfterDiscount() {
        debugger;
        var SubTotal = $("#EvoAmountlabel_beforesave").text().replace('$', '').trim();
        // var discount_val = parseFloat($("#discount").val());
        var discount = parseFloat($("#discount_contr").val().replace(',', '').replace('$', '').trim());
        if (String(discount) === "" || String(discount) == "NaN") {
            return false;
        }
        // var sub_total_amount = parseFloat(SubTotal);
        var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
        var tolalamount = sub_total_amount - discount;
        var gstPercentage = parseFloat($("#Evogst_percentage").text().replace("% GST", ""));

        var gPer = 0;
        if (gstPercentage > 0) {
            gPer = gstPercentage;
        }
        var gstp = parseFloat(gPer / 100);/// + 1;
        if (String(tolalamount).length > 0 && String(gstp).length > 0) {
            //var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
            //var GST = parseFloat(tolalamount - CAmount).toFixed(2);
            var GST1 = parseFloat(tolalamount * gstp);
            var CAmount = parseFloat(tolalamount + GST1).toFixed(2);
            var GST = GST1.toFixed(2);
            if (String(GST) == "NaN") {
                GST = "0.00";
            }
            if (String(CAmount) == "NaN") {
                CAmount = "0.00";
            }
            $("#evogst_amount").text(formatCurrency((GST)));
            $("#evogrand_total_amount").text(formatCurrency((CAmount)));
            $("#EvoAmountlabel").text(formatCurrency((tolalamount)));
            $('#total_amount').text(formatCurrency((CAmount)));
            $("#discount_contr").val(formatCurrency((discount)));
            // $("#sub_total_amount").text(formatCurrency((sub_total_amount)));
        }


	}

	function UpdateEVO(IsdiscountRelated, Det_ErrorMessage) {
		 debugger;
		 //GetVODetailsByProjectId();
         var Discount_Percentage = parseFloat($("#discount_percentage").val().replace(',', '').replace('$', ''));
		 var Vo_Id = $('#VO_ID').val();//VO_ID;
        var Discount_Amount = parseFloat($("#discount_contr").val().replace(',', '').replace('$', ''));
		var SubTotal = parseFloat($("#EvoAmountlabel_beforesave").text().replace(',', '').replace('$', ''));
        var Amount_Before_Discount = parseFloat($("#EvoAmountlabel_beforesave").text().replace(',', '').replace('$', ''));
        var Gst_amount = parseFloat($("#evogst_amount").text().replace(',', '').replace('$', ''));
        var GrandTotal = parseFloat($("#evogrand_total_amount").text().replace(',', '').replace('$', ''));
        var Total_afterDiscount = parseFloat($("#EvoAmountlabel").text().replace(',', '').replace('$', ''));
		var project_id = ProjectId;
		var vo_date = @*@Model.shortForwardDate;//*@$('#date_range').data('daterangepicker').startDate;
        var statusId = $("#Evostatus").text();
		 if (statusId == "Confirmed") {
			 statusId = 5;

		 }
		 else {
			 statusId = 1;
		 }
		var isactive = 1;
		var Values = {
			project_id: project_id,
			Vo_date: vo_date,
            contract_amount: SubTotal,
            amountBeforeDiscount: Amount_Before_Discount,
			gst_amount: Gst_amount,
			discount: Discount_Amount,
            discount_percentage: Discount_Percentage,
			total_amount: GrandTotal,
			status_id: 1,
			isactive: isactive,
			Vo_Id: Vo_Id,
			remarks:""
		};
		var JsonValues = JSON.stringify(Values);
		 $.ajax({
				type: 'POST',
				url: '@Url.Action("UpsertEVO", "VariationOrder")',
			 data: { "JsonEVO": JsonValues },
				dataType: 'Json',
			 success: function (data) {
				 debugger;
					var Result = data.data.Result;
				 var Errormessage = data.data.Errormessage;
				 var Id = data.data.Id;
					if (IsdiscountRelated == 0) {
						if (Result > 0) {
							notify(Errormessage, "success");
						}
						else {
							notify(Errormessage, "error");
						}
					}
					else {
						if (Result > 0) {
							if (Det_ErrorMessage == "") {
								Det_ErrorMessage = Errormessage;//"Updated Successfully";
							}
							notify(Det_ErrorMessage, "success");
						}
						else {
							if (Det_ErrorMessage == "") {
								Det_ErrorMessage = Errormessage;//"Updation Failed";
							}
							notify(Det_ErrorMessage, "error");
						}
					}
				},
				error: function (jqXHR, textStatus, errorThrown) {
					notify("Fail", "error");
					notify(jqXHR, "error");
				}
		 });

	}

    function OnChangeDiscountPercentage() {
        debugger
        var discountPercentage = parseFloat($("#discount_percentage").val());
        var EvoAmountlabel_beforesave = parseFloat($("#EvoAmountlabel_beforesave").text().replace('$', '').replace(',', '').trim());

        if (EvoAmountlabel_beforesave == "NaN" || parseFloat(EvoAmountlabel_beforesave) == parseFloat(0)) {
            EvoAmountlabel_beforesave = 1;
		}

		if (discountPercentage == null || discountPercentage == "") {
            return false;
		}

        var res = (discountPercentage / 100) * EvoAmountlabel_beforesave;

        if (res == undefined || res == "" || res == "NaN") {
            res = parseFloat("0.00");
		}

		var totalAmount =EvoAmountlabel_beforesave - res.toFixed(2);

        $("#discount_contr").val("$" + res.toFixed(2).toString());
		$("#EvoAmountlabel").text("$" + totalAmount.toString());
    }
</script>

@*Evo details related js*@
<script>
        var checkedIds = {};
        var checkedQty = {};
        var checkedAmount = {};
		var selectedData = "";
		var updatedData = "";
		var isCheckBoxSelected = false;
	var EVOgrid;
	var selectedCriteriaObj = {
		ElectricalItemMapping_Id: "",
		Qty: "",
		Checked: "",
		Price: ""
	};


    $("#PropertyTypeId").change(function () {
        // Pure JS
         propertyType_Id = this.value;
		var PropertType_Name = this.options[this.selectedIndex].text;

		$('#divEvoPageId').css('display', 'inline-block');
        $('#divEVOContainerDetails').css('display', 'inline-block');



       // ElectricalItemsMappingGrid(propertyType_Id)
		if (PropertType_Name != "--Select PropertyType--") {
			//reloadpagewithGrid(propertyType_Id);
            NewElectricalVOGrid(propertyType_Id, '@Model.Evo_id');
            getSelectedRowsData();
		}


	});

    //Nithin Added For Digital Signature For Both Salesman and Customer
    //Salesman Signature
    var geom = kendo.geometry;
    var Point = geom.Point;
    var draw = kendo.drawing;
    var Path = draw.Path;
    var path;

    $("#salesman-surface-container").on("mousemove", function (e) {
        if (!path) {
            return;
        }

        var offset = $(this).offset();
        var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

        path.lineTo(newPoint);
    }).on("mousedown", function (e) {
        path = new Path({
            stroke: {
                color: '#E4141B',
                width: 2,
                lineCap: "round",
                lineJoin: "round"
            }
        });

        var offset = $(this).offset();
        var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

        for (var i = 0; i < 1; i++) {
            path.lineTo(newPoint.clone().translate(i * 1, 0));
        }

        salesman_surface.draw(path);

    }).on("mouseup", function (e) {
        path = undefined;
    });


    //Customer Signature

    var geom1 = kendo.geometry;
    var Point1 = geom.Point;
    var draw1 = kendo.drawing;
    var Path1 = draw.Path;
    var path1;

    $("#customer-surface-container").on("mousemove", function (e) {
        if (!path1) {
            ////debugger
            return;
        }

        var offset = $(this).offset();
        var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

        path1.lineTo(newPoint);
    }).on("mousedown", function (e) {
        path1 = new Path({
            stroke: {
                color: '#E4141B',
                width: 2,
                lineCap: "round",
                lineJoin: "round"
            }
        });

        var offset = $(this).offset();
        var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

        for (var i = 0; i < 1; i++) {
            path1.lineTo(newPoint.clone().translate(i * 1, 0));
        }

        customer_surface.draw(path1);

    }).on("mouseup", function (e) {
        path1 = undefined;
    });

    //Saving both the signatures in a variable
    var salesman_surface = draw.Surface.create($("#salesman_surface"));
    var customer_surface = draw.Surface.create($("#customer_surface"));

    //Clearing the signature
    $(".clear").click(function () {
        salesman_surface.clear();
        customer_surface.clear();
    });
	function SaveSignature() {
		debugger;
		if (salesman_surface._instance._rootElement.innerHTML == "<defs></defs>") {
			//debugger
			alert("Please draw Salesman Signature");
		} else if (customer_surface._instance._rootElement.innerHTML == "<defs></defs>") {
			alert("Please draw Customer Signature");
			//debugger
		}
		else {
		var CustImageData;
		kendo.drawing.drawDOM($("#salesman_surface"))
			.then(function (group) {
				//debugger

				// Render the result as a PNG image
				return kendo.drawing.exportImage(group);
			})
			.done(function (data) {
				//debugger
				// Save the image file
			   // var FileName = contract_number + "-" + Customer + "-" + Salesmen + ".jpg";
				@*kendo.saveAs({
					dataURI: data,
					fileName: "Contract Sign.png",
					proxyURL: '@Url.Action("SaveSignature", "Contract")',
					forceProxy: true,
					// proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
				});*@

			@*var Path = @PMS.Common.Constants.PhysicalPath + "/Contracts/" + ContractYear + "/" + FileName;*@

				kendo.drawing.drawDOM($("#customer_surface"))
					.then(function (group) {
						// Render the result as a SVG document
						return kendo.drawing.exportImage(group);
					})
					.done(function (data1) {
						CustImageData = data1;                       // Save the SVG document
						//kendo.saveAs({
						//    dataURI: data,
						//    fileName: "signature.svg",
						//    proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
						//});
					});


				var Customer = '@Model.customer'.replace(/[^a-z\s]/gi, '').replace(/[_\s]/g, '-');
				var Salesmen = '@Model.salesmen'.replace(/[^a-z\s]/gi, '').replace(/[_\s]/g, '-');

				@*var Customer = '@Model.customer'.replace(' ', '_');
				var Salesmen = '@Model.salesmen'.replace(' ', '_');*@
				var contract_number ='@Model.EvoNo'.replace('/', '_');
				var contract_date = new Date($('#date_range').data('daterangepicker').startDate);
				var ContractYear = contract_date.getFullYear();
				var CustomerFileName = contract_number + "-" + Customer + ".jpg";
				var SalesmenFileName = contract_number + "-" + Salesmen + ".jpg";
				var DOCUMENT_NAME = "Customer Signature";
				var FILE_TYPE = "jpg";
				var CustomerImage_PATH = "/EVO/" + ContractYear + "/" + CustomerFileName;
				var SalesmenImage_PATH = "/EVO/" + ContractYear + "/" + SalesmenFileName;
				var VO_ID = $('#VO_ID').val(); //ProjectId;//

                var VODate = $('#hdnVODate').val();
                var CustomerName = $('#hdnCustomerName').val();
                var SalesmenName = $('#hdnSalesmenName').val();
                var CustomerAddress = $('#hdnCustomerAddress').val();
				var ProjectId = $('#hdnProjectId').val();

				var Values = {
					SalesmanimageData: data,
					CustomerimageData: CustImageData,
					Customer: Customer,
					Salesmen: Salesmen,
					contract_number: contract_number,
					contract_date: contract_date,
					ContractYear: ContractYear,
					CustomerFileName: CustomerFileName,
					SalesmenFileName: SalesmenFileName,
					DOCUMENT_NAME: DOCUMENT_NAME,
					FILE_TYPE: FILE_TYPE,
					CustomerImage_PATH: CustomerImage_PATH,
					SalesmenImage_PATH: SalesmenImage_PATH,
                    SuperId: '@Model.Evo_id', //$('#ProjectId').val(),
                    VODate: VODate,
                    CustomerName: CustomerName,
                    SalesmenName: SalesmenName,
					CustomerAddress: CustomerAddress,
                    Internal_No: $("#EVO_Number").text(),
                    ProjectId: $('#ProjectId').val()
				};
				var JsonValues = JSON.stringify(Values);
                $.loader({ content: "<table><tr><td><h5>Confirmation of Electrical Variation Order in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
				debugger;
				$.ajax({
					url: '@Url.Action("Upload_EVOSignature", "VariationOrder")',
					type: "POST",
					dataType: "json",
					data: { JsonSignature: JsonValues },
					success: function (result) {
						debugger
						if (result.data.Result > 0) {

							  //notify(result.data.Errormessage, "success");
							Submit_EVOStatusChange(5);
                            options.success(result);
						}
						else {
							notify(result.data.Errormessage, "error");
                            $.loader('close');
						}
						/*options.success(result);*/
					},
					error: function (result) {
						//debugger
						options.error(result);
					}
				});
			});
		salesman_surface.clear();
		customer_surface.clear();
		$("#signature_modal").modal('hide');
		}
	}

	function Submit_EVOStatusChange(statusId) {
		debugger;
		var VO_Id = $('#VO_ID').val();
		var Values = {
			VO_Id: VO_Id,
			Status_Id: statusId,
		};
		var JsonValues = JSON.stringify(Values);
		$.ajax({
			type: "POST",
			url: "/VariationOrder/Update_EVOStatus", // the URL of the controller action method
			data: { "JsonValues": JsonValues },
			dataType: 'Json',
			success: function (data) {
				debugger;
                $.loader('close');
				var Result = data.data.Result;
				var Errormessage = data.data.Errormessage;
				if (Result > 0) {
					notify(Errormessage, "success");
					$("#btnConfirm").prop("disabled", true);
					$("#status").text("Confirmed");
					window.location = '@Url.Action("ElectricalVariationOrder", "VariationOrder")?ProjectId=' + ProjectId + '&ShowHide=' + true + '&vo_id=' + VO_Id;
					$(".k-grid-add").css("display", "none");
                    $("#discount_contr").prop("disabled", true);

				}
				else {
					notify(Errormessage, "error");
				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				$.loader('close');
				notify("Fail", "error");
				notify(jqXHR, "error");
			}
		});

	}

        function OnClickSendMail() {
            //debugger;
			var ProjectId = $('#ProjectId').val();
            var contract_number ='@Model.EvoNo'.replace('/', '_');
			var contract_date = new Date($('#date_range').data('daterangepicker').startDate);
			var ContractYear = contract_date.getFullYear();
			var VODate = $('#hdnVODate').val();
			var CustomerName = $('#hdnCustomerName').val();
			var SalesmenName = $('#hdnSalesmenName').val();
			var CustomerAddress = $('#hdnCustomerAddress').val();

			var Values = {
                contract_number: contract_number,
                contract_date: contract_date,
                ContractYear: ContractYear,
                VODate: VODate,
                CustomerName: CustomerName,
                SalesmenName: SalesmenName,
                CustomerAddress: CustomerAddress,
                Internal_No: $("#EVO_Number").text(),
				ProjectId: $('#ProjectId').val(),
                VO_ID: $('#VO_ID').val()
			}
			var JsonValues = JSON.stringify(Values);
            $.loader({ content: "<table><tr><td><h5>Sending Email</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
            $.ajax({
                type: "POST",
                url: "/VariationOrder/SendingMail", // the URL of the controller action method
                //data: { "ProjectId": ProjectId },
                data: { "JsonValues": JsonValues },
                dataType: 'Json',
                success: function (data) {
					debugger;
                    $.loader('close');
                    var Result = data.data.Result;
                    var Errormessage = data.data.Errormessage;
                    if (Errormessage == "An email has been sent.")
                        notify(Errormessage, "success");
					else
                        notify(Errormessage, "error");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $.loader('close');
                    notify("Fail", "error");
                    notify(jqXHR, "error");
                }
            });
		}

	function PrintPreview() {
		debugger;
		var ProjectId = $('#ProjectId').val();
		var VO_ID = $('#VO_ID').val();
		wnd.center().open();
		$("#yes").click(function () {
			debugger
			window.open('@Url.Action("PrintPreviewEVO", "VariationOrder")?Id=' + ProjectId +
				"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + true + "&vo_id=" + VO_ID, "socialPopupWindow",
			   "location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
			wnd.close();
		});

		$("#no").click(function () {
			debugger
			window.open('@Url.Action("PrintPreviewEVO", "VariationOrder")?Id=' + ProjectId +
                "&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + false + "&vo_id=" + VO_ID, "socialPopupWindow",
			   "location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
			wnd.close();
		});
	}

		  function EVOList() {
		window.location = '@Url.Action("ElectricalVariationOrderList", "VariationOrder")';
	}

	function ContractList() {
	window.location = '@Url.Action("ContractList", "Contract")';
	}

	function AddNewEvo() {
		debugger;
		var IsNew = true;
	  $.ajax({
                    url: '@Url.Action("InsertHeaderNewEvo", "VariationOrder")',
                    type: "POST",
                    dataType: "json",
                    data: { ProjectId: '@ViewBag.ProjectId' },
                    success: function (result) {
						debugger
                        notify("Sucessfully New Evo Generated.", "success");
						//alert("Sucessfully New Evo Generated");
                        $('#VO_ID').val(result.data.Evo_Id);
						GetEVODetailsByProjectId();
						$("#EvoAmountlabel_beforesave").text("0.00");
						$("#EvoAmountlabel").text("0.00");
						$("#discount_percentage").text(result.data.discountPercentage);
						$("#discount_contr").text("0.00");
						$("#evogst_amount").text("0.00");
						$("#evogrand_total_amount").text("0.00");
						var evoStatus = $('#Evostatus').text();

						if (evoStatus == "Confirmed") {
                            $("#discount_contr").prop("disabled", true);
                            $("#discount_contr").off("onchange");
                            $("#discount_contr").off("onblur");

							$("#discount_percentage").prop("disabled", true);
							$("#discount_percentage").off("onchange");
							$("#discount_percentage").off("onblur");
						}
						NewElectricalVOGrid(propertyType_Id, result.data.Evo_Id);
						window.location = '@Url.Action("ElectricalVariationOrder", "VariationOrder")?ProjectId=' + '@ViewBag.ProjectId' + '&ShowHide=' + true + '&vo_id=' + result.data.Evo_Id ;
                        @*window.location = '@Url.Action("ElectricalVariationOrder", "VariationOrder")?ProjectId=' + '@ViewBag.ProjectId' + '&ShowHide=' + true + '&IsNew=' + IsNew;*@
                       // options.success(result);
                    },
                    error: function (result) {
                        debugger

                       // options.error(result);
                    }
        });
	}

    $(".collapse.show").each(function () {
        $(this).prev(".card-header").find(".fa").addClass("fa-minus").removeClass("fa-plus");
    });

    // Toggle plus minus icon on show hide of collapse element
    $(".collapse").on('show.bs.collapse', function () {
        $(this).prev(".card-header").find(".fa").removeClass("fa-plus").addClass("fa-minus");
    }).on('hide.bs.collapse', function () {
        $(this).prev(".card-header").find(".fa").removeClass("fa-minus").addClass("fa-plus");
	});



</script>

<script>
	var totalofselected = 0;
    var IsEvochecked = false;
	//Nithin Added this New Grid
	function NewElectricalVOGrid(propertyType_Id, evo_id)
	{
        debugger
                    dataSource = new kendo.data.DataSource({
                        transport: {
							read: function (options) {
								debugger
                                $.ajax({

                                    url: '@Url.Action("GetElectricalItemsDetails", "VariationOrder")?PropertyType_Id=' + propertyType_Id + '&projectId=' + '@ViewBag.ProjectId' + '&evo_id=' + evo_id,

                                    type: "GET",
                                    dataType: "json",
                                    success: function (result) {
										debugger
										var project_Id = $("#hdnProjectId").val();
										options.success(result);
                                        GetDiscountPercentageFromContract(project_Id);



                                    },
                                    error: function (result) {
                                        //debugger
                                        options.error(result);
                                    }
                                });
							},
        //                    update: function (options) {
								//debugger
								//console.log(options.data.models);

        //                    },
        //                    destroy: function (options) {
        //                        debugger
        //                    },
        //                    create: function (options) {
        //                        debugger
        //                    },
                            parameterMap: function (options, operation) {
                                if (operation !== "read" && options.models) {
                                    return { models: kendo.stringify(options.models) };
                                }
                            }
                        },
						pageSize: 15,

						schema: {
                            total: function (response) {
                                return $(response.data).length;
                            },
                            data: "data",
                            model: {
                                id: "ElectricalItemMapping_Id",
                                fields: {
                                    ElectricalItemMapping_Id: { nullable: false, type: "number" },
                                    PropertyType_Id: { nullable: true, type: "number" },
                                    Cost_Price: { validation: { required: true, min: 0, maxlength: 20 }, type: "number",editable: true  },
                                    Item_description: { nullable: true, maxlength: 500, editable: false },
                                    Qty: { validation: { required: true, maxlength: 8 }, type: "number"},
                                    Uom_Description: { nullable: true, maxlength: 500, editable: false },
                                    Amount: { validation: { required: true, min: 0, maxlength: 8 }, type: "number", editable: false},
                                    //  IsSelected: { type: "boolean" },

								}

                            }
                        },
                    });

            var CategoryGrid = $("#Electric_VO_grid").kendoGrid({
               dataSource: dataSource,
                    navigatable: true,
                batch: true,
                toolbar: [/*{ name: "save", text: "Save Selected Items", iconClass:"k-icon k-i-save" },*/ { name: "search" }],

                    filterable: true,
               sortable: true,
               reorderable: true,
				autoSync: true,
                dataBound: function (e) {
                    //debugger;
                 //   $('.k-grid-add').unbind("click");
                    var grid = this;
                    //var rows = grid.items();
                    var view = this.dataSource.view();
                    for (var i = 0; i < view.length; i++) {
                        //debugger;
                        if (view[i].IsSelected) {
                            this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                               // .addClass("k-state-selected")
                                .find(".k-checkbox")
								.attr("checked", "checked");
							this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                                .addClass("k-state-selected");
                        }
					}

                },
               change: onChangeSelect,
				resizable: true,
                    pageable: {
                        pageSize: 15,
                        buttonCount: 15,
                        pageSizes: [5, 15, 30, 60, 100, 500],
                        messages: {
                            display: "{0} - {1} of {2} Electrical Items", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
                            empty: "No Electrical Items to display",
                            page: "Page",
                            of: "of {0}", //{0} is total amount of pages
                            itemsPerPage: "Electrical Items per page",
                            first: "Go to the first page",
                            previous: "Go to the previous page",
                            next: "Go to the next page",
                            last: "Go to the last page",
                            refresh: "Refresh"
                        }
                    },
				columns: [
					{ selectable: true, width: "50px" },
					   { field: "Item_description", title: "Item_Description", width: "300px", attributes: { style: "text-align:left;" }, filterable: { multi: true, search: true } },
					   { field: "Qty", width: "100px", title: "Quantity" },
					   { field: "Uom_Description", title: "Uom_Description", width: "100px", attributes: { style: "text-align:left;" }, filterable: { multi: true, search: true } },
					   { field: "Cost_Price", title: "Price", width: "100px",  attributes: { style: "text-align:right;" } },
                    {
                        field: "Amount", title: "Amount", width: "100px", attributes: { style: "text-align:right;" }, filterable: { multi: true, search: true },
                        },


				],
                editable:true,
                edit: function (e) {
					debugger;
					var editcellid = e.model.id;
					var QtyEditor = e.container.find("input[name=Qty]").data("kendoNumericTextBox");
                    var PriceEditor = e.container.find("input[name=Cost_Price]").data("kendoNumericTextBox");
					var rows = e.sender.select();
					var QtyTotal = 1;
					var PriceTotal = 0;
                    //if (e.model.age > 32) {
                    //    e.container.find("input[name='name']").attr('disabled', true);
					//}
					if (rows.length == 0) {
                        var grid = $("#Electric_VO_grid").data("kendoGrid");
						//var dataItem = grid.dataItem(rows.length);
						//if (dataItem == null) {
						//	dataItem.id = 0;
      //                  }
                        debugger
                        if (1 == 2) {
                            QtyEditor.enable(false);

                        } else {
                            $("[name='Qty']", e.container).blur(function () {
                                var input = $(this);
                                QtyTotal = parseInt(input[0].ariaValueNow);

                                debugger;
                                var grid = $("#Electric_VO_grid").data("kendoGrid");
                                var row = $(this).closest("tr");
                                var item = grid.dataItem(row);
                                var currentTotal = 0;
                                if (PriceTotal == 0) {
                                    currentTotal = item.Cost_Price * QtyTotal;
                                }
                                else {
                                    debugger
                                    currentTotal = PriceTotal * QtyTotal;
                                }
                                item.Amount = currentTotal;
                                var AmtEditor = row[0].lastChild;
                                AmtEditor.innerText = currentTotal;
                                AmtEditor.innerHTML = currentTotal;
                                //console.log(QtyEditor1);
                                //getSelectedRowsData();
                                //totalchange(e);
                            });

                            $("[name='Cost_Price']", e.container).blur(function () {
                                debugger;
                                var input = $(this);
                                PriceTotal = parseInt(input[0].ariaValueNow);

                                debugger;
                                var grid = $("#Electric_VO_grid").data("kendoGrid");
                                var row = $(this).closest("tr");
                                var item = grid.dataItem(row);
                                var currentTotal = item.Qty * PriceTotal;
                                item.Amount = currentTotal;
                                var AmtEditor = row[0].lastChild;
                                AmtEditor.innerText = currentTotal;
                                AmtEditor.innerHTML = currentTotal;
                                //console.log(QtyEditor1);
                                //getSelectedRowsData();
                                //totalchange(e);
                            });
                        }
					}
					else {
						rows.each(function (e) {
							debugger
							var grid = $("#Electric_VO_grid").data("kendoGrid");
							var dataItem = grid.dataItem(this);
							debugger
							if (dataItem.id == editcellid) {
								QtyEditor.enable(false);

							} else {
								$("[name='Qty']", e.container).blur(function () {
									var input = $(this);
									QtyTotal = parseInt(input[0].ariaValueNow);

									debugger;
									var grid = $("#Electric_VO_grid").data("kendoGrid");
									var row = $(this).closest("tr");
									var item = grid.dataItem(row);
									var currentTotal = 0;
									if (PriceTotal == 0) {
										currentTotal = item.Cost_Price * QtyTotal;
									}
									else {
										debugger
										currentTotal = PriceTotal * QtyTotal;
									}
									item.Amount = currentTotal;
									var AmtEditor = row[0].lastChild;
									AmtEditor.innerText = currentTotal;
									AmtEditor.innerHTML = currentTotal;
									//console.log(QtyEditor1);
									//getSelectedRowsData();
									//totalchange(e);
								});

								$("[name='Cost_Price']", e.container).blur(function () {
									debugger;
									var input = $(this);
									PriceTotal = parseInt(input[0].ariaValueNow);

									debugger;
									var grid = $("#Electric_VO_grid").data("kendoGrid");
									var row = $(this).closest("tr");
									var item = grid.dataItem(row);
									var currentTotal = item.Qty * PriceTotal;
									item.Amount = currentTotal;
									var AmtEditor = row[0].lastChild;
									AmtEditor.innerText = currentTotal;
									AmtEditor.innerHTML = currentTotal;
									//console.log(QtyEditor1);
									//getSelectedRowsData();
									//totalchange(e);
								});
							}
						});
					}



                },
				//saveChanges: grid_saveChanges,

			}).data("kendoGrid");



	}
    var SelectedEvoValues = {
        Qty: '',
        Id: '',
        ElectricalMapping: '',
        Price: '',
        IsSelected: ''

	};
    var FinallSelectedEvoValues = [];

		function onChangeSelect(e) {
			debugger
			     if ($("#Evostatus").text() != "Confirmed")
                 {
                   $("#btnSaveAll").prop("disabled", false);
			}
		else
            {
                $("#btnSaveAll").prop("disabled", true);
            };

                 SelectedEvoValues = {
                 Qty: '',
                Id: '',
                ElectricalMapping: '',
                Price: '',
                IsSelected: ''


            };
                 FinallSelectedEvoValues = [];
                 //  this.editRow(this.select());
                 var rows = e.sender.select();

                 rows.each(function (e) {

                     var grid = $("#Electric_VO_grid").data("kendoGrid");
                     var dataItem = grid.dataItem(this);
                     //data
                     //console.log(dataItem);
                     //Get All Data What you want in dataitem
                     //console.log('Qty=' + dataItem.Qty, ',id =' + dataItem.id, ',ElectricalMapping id =' + dataItem.ElectricalItemMapping_Id);
                     //For Selected Values
                     SelectedEvoValues = {
                     Qty: dataItem.Qty,
                    Id: dataItem.id,
                    ElectricalMapping: dataItem.ElectricalItemMapping_Id,
                    Price: dataItem.Cost_Price,
                    IsSelected: IsEvochecked

                };
                     //we are pushing selected data into an new object (All Selected Objects will be there in FinallSelectedEvoValues)
                     FinallSelectedEvoValues.push(SelectedEvoValues);
                     //debugger
                 });

                 //console.log(FinallSelectedEvoValues);


                 for (var i = 0; i < rows.length; i++) {
                     totalofselected += parseFloat(rows[i].cells[5].innerHTML);
                     IsEvochecked = true;
                 }
                 getSelectedRowsData();
             }

	$('#btnSaveAll').on('click', function () {
		debugger;
		$('#btnSaveAll').prop('disabled', true);
		var _totalSelectedItemsAmount = parseFloat($('#EvoAmountlabel_beforesave').text().replace(',', '').replace('$', ''));
		var _discountPercentage = parseFloat($('#discount_percentage').val());
		var _discountAmount = parseFloat($('#discount_contr').val().replace(',', '').replace('$', ''));
		var _total = _totalSelectedItemsAmount - _discountAmount;
		var _gstAmount = parseFloat($('#evogst_amount').text().replace(',', '').replace('$', ''));
        var _grandTotal = parseFloat($('#evogrand_total_amount').text().replace(',', '').replace('$', ''));
		var jsonTotalValues = {
            TotalSelectedItemsAmount: _totalSelectedItemsAmount,
            DiscountPercentage: _discountPercentage,
            DiscountAmount: _discountAmount,
			TotalAmount: _total,
			GstAmount: _gstAmount,
            GrandTotal: _grandTotal
		};

		if (FinallSelectedEvoValues.length != 0) {
			var JsoEvonValues = JSON.stringify(FinallSelectedEvoValues);
            var JsonTotals = JSON.stringify(jsonTotalValues);
						$.ajax({
					url: '@Url.Action("SaveNewMethodEvoSelectedData", "VariationOrder")',
					type: "POST",
				dataType: "json",
							data:
							{
								"JsonEVODetails": JsoEvonValues,
                                "JsonEVOTotals": JsonTotals,
								"Project_id": '@ViewBag.ProjectId',
								PropertyType_Id: propertyType_Id,
								evo_id: $('#VO_ID').val()
							},
					success: function (result) {
						//debugger
						//location.reload();
                        notify("Electrical Items Inserted Sucessfully.", "success");
                       // alert("Sucessfully New Evo Saved");
						debugger;
                        //ElectricalVariationOrderDetail('@ViewBag.ProjectId', true, result.data.Evo_Id)
                        $('#btnSaveAll').prop('disabled', false);
						$("#PropertyTypeId").val(propertyType_Id);
						$("#PropertyTypeId").attr('disabled', 'disabled');

                        $('#EvoAmountlabel_beforesave').text(formatCurrency(result.data.TotalSelectedItemsAmount));
                        $('#discount_percentage').val(result.data.DiscountPercentage);
                        $('#discount_contr').val(formatCurrency(result.data.DiscountAmount));
                        $('#EvoAmountlabel').text(formatCurrency(result.data.TotalAmount));
                        $('#evogst_amount').text(formatCurrency(result.data.GstAmount));
                        $('#evogrand_total_amount').text(formatCurrency(result.data.GrandTotal));

                        $('#EVO_Number').text(result.data.Internal_Evo_Number);
                        //$('#Evototal_amount').text(formatCurrency(result.data.Evo_total_Amount));
                        $('#EVO_Date').text(result.data.Evo_Date);
                        $('#Evostatus').text(result.data.Evo_Status);

                        $('#discount_contr').prop('disabled', false);
						$('#discount_percentage').prop('disabled', false);
					},
					error: function (result) {
						//debugger
						options.error(result);
					}
				});
		}
		else {
			debugger;
			//alert("Please select Atleast one Item.");
            notify("Please select Atleast one Item.", "error");
            $('#btnSaveAll').prop('disabled', false);
        }

	});

	function GetDiscountPercentageFromContract(Project_Id) {

		$.ajax({
                    url: '@Url.Action("GetDiscountPercentageFromContract", "VariationOrder")',
                    type: "GET",
                    dataType: "json",
            data: { ProjectId: Project_Id },
                    success: function (data) {
						debugger
						if (data.data.Result == "1")
						{
							$("#discount_percentage").val(data.data.DiscountPercentage);
						}
						else
						{
							$("#discount_percentage").val("0.00");
						}
                    },
                    error: function (result) {
                        debugger

                        
                    }
        });

	}

	 function ElectricalVariationOrderDetail(project_id,isshow,evo_id) {
        debugger;

        $.ajax({
                    url: '@Url.Action("GetElectricalVariationOrderAfterSave", "VariationOrder")?ProjectId=' + project_id + '&ShowHide=' + isshow + '&vo_id=' + evo_id ,
                    type: "GET",
                    dataType: "json",
                    /*data: { ProjectId: project_id },*/
                    success: function (data) {
                        debugger
                        //$("#EVO_Number").text(data.data.EvoNo);
                        //$("#EVO_Date").text(data.data.EvoDate);
                        //$("#Evototal_amount").text(data.data.EvoAmount);

                        //$("#status").text(data.data.status);
                        //$("#Evostatus").text(data.data.EvoStatus);

                        @*if (result.data.Result > 1) {
                            window.location = '@Url.Action("ElectricalVariationOrderList", "VariationOrder")?ProjectId=' + project_id;
                        }
                        else {
                            window.location = '@Url.Action("ElectricalVariationOrder", "VariationOrder")?ProjectId=' + project_id + '&ShowHide=' + isshow + '&vo_id=' + evo_id ;
                        }*@

                        //options.success(result);
                    },
                    error: function (result) {
                        debugger

                        //options.error(result);
                    }
        });
    }

	//Nithin Added For getting all rows selected data  to change total Amt
	function getSelectedRowsData() {
		debugger
		var Selected_Data = 0;
		//Get the id field values of the selected rows
		var keyNames = $("#Electric_VO_grid").data("kendoGrid").selectedKeyNames();
		// convert string values to number
		var ids = keyNames.map(function (x) {
			return parseInt(x, 10);
		});
		var gridData = $("#Electric_VO_grid").data("kendoGrid").dataSource.data();
		var selected = [];
		ids.forEach(function (number) {
			gridData.forEach(function (dataItem) {
				if (number === dataItem.id) {
					selected.push(dataItem)
				}
			})
		})
		//console.log(selected);
		for (var i = 0; i < selected.length; i++) {
			Selected_Data += selected[i].Qty * selected[i].Cost_Price;

		}
		$('#EvoAmountlabel_beforesave').text(formatCurrency(Selected_Data));
		CalculateDiscountAmount();
	}

	function totalchange(e) {
		debugger
		var newtotalAmount=0;
		var rows = e.sender.select();
		rows.each(function (e) {

			var grid = $("#Electric_VO_grid").data("kendoGrid");
			var dataItem = grid.dataItem(this);
             newtotalAmount += dataItem.Qty * dataItem.Cost_Price;
		});
        $('#EvoAmountlabel_beforesave').text(formatCurrency(newtotalAmount));
    }
</script>

<script>
    function CalculateDiscountAmount() {
        var discountPercentage = parseFloat($("#discount_percentage").val());
        var EvoAmountlabel_beforesave = parseFloat($("#EvoAmountlabel_beforesave").text().replace('$', '').replace(',', '').trim());

        if (EvoAmountlabel_beforesave == "NaN" || parseFloat(EvoAmountlabel_beforesave) == parseFloat(0)) {
            EvoAmountlabel_beforesave = 1;
        }

		if (discountPercentage != null || discountPercentage != parseFloat(0)) {
            var res = (discountPercentage / 100) * EvoAmountlabel_beforesave;

            if (res == undefined || res == "" || res == "NaN") {
                res = parseFloat("0.00");
            }

            var totalAmount = EvoAmountlabel_beforesave - res.toFixed(2);
            $("#discount_contr").val("$" + res.toFixed(2).toString());
        }

		CalculateGSTAndTotalAmount();
	}

    function CalculateGSTAndTotalAmount() {
        debugger;
        var SubTotal = $("#EvoAmountlabel_beforesave").text().replace('$', '').trim();
        // var discount_val = parseFloat($("#discount").val());
        var discount = parseFloat($("#discount_contr").val().replace(',', '').replace('$', '').trim());
        if (String(discount) === "" || String(discount) == "NaN") {
            return false;
        }
        // var sub_total_amount = parseFloat(SubTotal);
        var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
        var tolalamount = sub_total_amount - discount;
        var gstPercentage = parseFloat($("#Evogst_percentage").text().replace("% GST", ""));

        var gPer = 0;
        if (gstPercentage > 0) {
            gPer = gstPercentage;
        }
        var gstp = parseFloat(gPer / 100);/// + 1;
        if (String(tolalamount).length > 0 && String(gstp).length > 0) {
            //var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
            //var GST = parseFloat(tolalamount - CAmount).toFixed(2);
            var GST1 = parseFloat(tolalamount * gstp);
            var CAmount = parseFloat(tolalamount + GST1).toFixed(2);
            var GST = GST1.toFixed(2);
            if (String(GST) == "NaN") {
                GST = "0.00";
            }
            if (String(CAmount) == "NaN") {
                CAmount = "0.00";
            }
            $("#evogst_amount").text(formatCurrency((GST)));
            $("#evogrand_total_amount").text(formatCurrency((CAmount)));
            $("#EvoAmountlabel").text(formatCurrency((tolalamount)));
            $('#total_amount').text(formatCurrency((CAmount)));
            $("#discount_contr").val(formatCurrency((discount)));
            // $("#sub_total_amount").text(formatCurrency((sub_total_amount)));
        }


    }

</script>