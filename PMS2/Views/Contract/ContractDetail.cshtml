@{
    ViewBag.Title = "ContractDetail";
}

<!-- default icons used in the plugin are from Bootstrap 5.x icon library (which can be enabled by loading CSS below) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.min.css" crossorigin="anonymous">

<!-- the fileinput plugin styling CSS file -->
<link href="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.2.3/css/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />

<!-- piexif.min.js is needed for auto orienting image files OR when restoring exif data in resized images and when you
    wish to resize images before upload. This must be loaded before fileinput.min.js -->
<script src="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.2.3/js/plugins/piexif.min.js" type="text/javascript"></script>

<!-- sortable.min.js is only needed if you wish to sort / rearrange files in initial preview.
    This must be loaded before fileinput.min.js -->
<script src="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.2.3/js/plugins/sortable.min.js" type="text/javascript"></script>


<!-- the main fileinput plugin script JS file -->
<script src="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.2.3/js/fileinput.min.js"></script>

<!-- script src="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.2.2/themes/fas/theme.min.js"></script -->

<style>
    td[data-container-for="Item"], td[data-container-for="BillingUOM"], td[data-container-for="Category"], td[data-container-for="UOM"] {
        overflow: initial;
    }

    #contract_terms_editor {
        width: 100%;
        height: 840px;
    }

    table.k-widget.k-editor {
        height: 740px;
    }

    #discount, #discountPercentage {
        text-align: right;
        padding-right: 0px;
        width: 120px;
        padding: 10px;
    }


    .file-preview {
        border-radius: 5px;
        border: 2px solid #1c84c6;
        padding: 8px;
        width: 100%;
        margin-bottom: 5px;
    }

        .file-preview button.fileinput-remove {
            display: none;
        }
</style>
<div class="panel box-shadow-none content-header">
    <div class="panel-body">
        <div class="row">
            <div class="col-md-4 col-7">
                <h3 class="animated fadeInLeft text-primary">Contract Details</h3>
            </div>
            <div class="col-md-8 col-5 text-right ">
                @*<button type="button" onclick="CreateSupplierToContract()" id="mapSupplierToContract" class='btn btn-primary ml-2 mb-2'>
                    <span>Map Supplier</span>
                </button>*@
                <button type="button" onclick="CreateVO();" id="createNewVO" style="display:none" class='btn btn-primary ml-2 mb-2'>
                    <i class="fa fa-plus mr-2" aria-hidden="true"></i><span>Create VO</span>
                </button>
                <button type="button" onclick="QuotationList();" class='btn btn-primary ml-2 mb-2'>
                    <span>Quotation List</span>
                </button>
                <button type="button" onclick="ContractList();" class='btn btn-primary ml-2 mb-2'>
                    <span>Contract List</span>
                </button>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="CustomerId" name="CustomerId" value="@Model.customer_id" />
<input type="hidden" id="ContractDate" name="ContractDate" value="@Model.contract_date" />
<input type="hidden" id="CustomerName" name="CustomerName" value="@Model.customer " />
<input type="hidden" id="SalesmenName" name="SalesmenName" value="@Model.salesmen " />
<input type="hidden" id="CustomerAddress" name="CustomerAddress" value="@Model.project_name " />
<input type="hidden" id="ContractNumber" name="ContractNumber" value="@Model.project_number " />



<div class="row mx-1">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-2 col-sm-6">
                <div class="form-group">
                    <input type="hidden" id="hdnSalesmanId" name="hdnSalesmanId" value="@Model.salesmen_id" />
                    <label class="control-label" for="from_date"><span class="data_inline_label">Salesmen</span></label>
                    <select name="SalesmenId" id="SalesmenId" class="form-control" disabled>
                        <option selected value="">@Model.salesmen</option>
                    </select>
                    @*<label class="control-label"><span class="data_inline">@Model.salesmen</span></label>*@
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="form-group">
                    <label class="control-label" for="from_date"><span class="data_inline_label">Customer</span></label>
                    <select name="Customer_Id" id="Customer_Id" class="form-control" disabled>
                        <option selected value="">@Model.customer</option>
                    </select>
                    @*<label class="control-label"><span class="data_inline">@Model.customer</span></label>*@

                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label ml-2" for="project_name"><span class="data_inline_label">Address/Site</span></label>
                    <input id="project_name" name="project_name" class="form-control" value="@Model.project_name" maxlength="100" />

                </div>

            </div>
            <div class="col-md-2 col-sm-6 ">
                <div class="form-group">
                    <label class="control-label" for="from_date"><span class="data_inline_label">Status</span></label>
                    <select name="StatusId" id="StatusId" class="form-control" disabled>
                        <option selected value="">@Model.status</option>
                    </select>
                    @*<label class="control-label"><span class="data_inline">@Model.status</span></label>*@

                </div>
            </div>
            <div class="col-md-2 col-sm-6 ">
                <div class="form-group">
                    <label class="control-label" for="from_date"><span class="data_inline_label">Amount</span></label>
                    <input id="total_amount" name="total_amount" class="form-control" value="$@Model.total_amount.ToString(" #,##0.00")" maxlength="100" disabled />
                    @*<label class="control-label"><span class="data_inline"><strong>$@Model.total_amount.ToString("#,##0.00")</strong></span></label>*@

                </div>
            </div>
            @*<div class="col-md-3 col-sm-6 ">
                <div class="form-group">
                    <label class="control-label" for="from_date"><span class="data_inline_label" style="font-size:20px">Email :</span></label>
                    <label class="control-label"><span class="data_inline">@Model.Email</span></label>

                </div>
            </div>*@
        </div>
        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    <label class="control-label ml-2" for="project_number"><span class="data_inline_label" style="">Contr No</span></label>

                    <input id="project_number" name="project_number" class="form-control" value="@Model.project_number" maxlength="100" readonly />
                </div>

            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="from_date" class="control-label"><span class="data_inline_label">Contr Date</span></label>
                    <div class="input-group">
                        <input type="text" id="date_range" name="date_range" class="form-control date_form_control" />
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                    </div>
                </div>
            </div>


            @*<label class="control-label"><span class="data_inline">@Model.quotationForwardDate </span></label>*@




            <div class="col-md-6 col-lg-6 col-xl-5 mt-27">
                <button type="button" id="btnUpdate" class="btn btn-primary" onclick="UpdateProjectDetails(0)">Update</button>
                <button type="button" id="btnClear" class="btn btn-primary" onclick="CancelProjectDetails()">Clear</button>
                <button type="button" id="print_preview" onclick="PrintPreview();" class='btn btn-success'>
                    <i class="fa fa-print"></i><span class="ml-2">Print</span>
                </button>
                <button type="button" id="btnSendMail" onclick="OnClickSendMail();" class='btn btn-primary '>
                    <i class="fa fa-envelope"></i><span class="ml-2">Send Email</span>
                </button>
            </div>
            <div class="col-md-5 col-lg-4 col-xl-2 mt-27 mt-lg-27 text-xl-right">
                <button type="button" id="btnConfirmed" class="btn btn-primary" onclick="GetSignatureImage()" data-toggle="modal" data-target="#signature_modal">
                    Confirmed
                </button>
                <button type="button" id="btnClosed" class="btn btn-primary" onclick="Submit_StatusChange(6)">
                    Closed
                </button>
            </div>
            @*<div class="col-md-2 my-md-auto text-md-center my-3">
                <button class="k-button" id="expand">Expand All</button>
                <button class="k-button" id="collapse">Collapse All</button>
            </div>*@

        </div>
        @*<div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label ml-2" for="CreatedDate"><span class="data_inline_label" style="">Created Date :</span></label>

                    <label class="control-label"><span class="data_inline">@Model.created_date</span></label>

                </div>

            </div>
        </div>*@
        <input type="hidden" id="ParentTaskId" name="ParentTaskId" class="form-control" />

        @*<div style="width: 10%">
            <label for="from_date" class="control-label"><span class="data_inline_label">Valid From: </span></label>
        </div>
        <div style="width: 20%">
            <label class="control-label"><span class="data_inline">@Model.quotationForwardDate </span></label>
            &nbsp;&nbsp;<label><b>To</b></label>&nbsp;&nbsp;<label for="from_date" class="control-label"><span class="data_inline"> @Model.quotationAcceptDate</span></label>
        </div>*@



        <input type="hidden" id="ProjectId" class="form-control col-8" value="@ViewBag.ProjectId" />

        <div id="PackageGrid" class="accordion">
            @*<label ><input type="checkbox" id="" onchange="toggleEditing(event)" checked/> Enable Editing</label>*@
        </div>

        <div>
            <label style="font-size: x-large; font-weight: bolder; "> Contract Details</label>
        </div>

        <div id="ContractGrid" class="accordion">
        </div>

        <br />
        <div class="row justify-content-end mx-0">
            <div class="col-md-4 mr-3">
                <table class="table task_total_amount_tables">
                    <tbody>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Sub Total :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="sub_total_amount" name="sub_total_amount">
                                        $@Model.contract_amount.ToString("#,##0.00")
                                    </label>
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Discount %:</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    @if (Model.status_id == 2)
                                    {
                                        <input type="text" id="discountPercentage" name="discountPercentage" class="form-control decimal-restrict" value="@Model.discount_percentage.ToString()" onchange="OnChangeDiscountPercentage()" onblur="onBlurDiscount('')" />
                                    }
                                    else
                                    {
                                        <input type="text" id="discountPercentage" name="discountPercentage" class="form-control decimal-restrict" value="@Model.discount_percentage.ToString()" readonly />
                                    }
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Discount Amount:</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    @if (Model.status_id == 2)
                                    {
                                        <input type="text" id="discount" name="discount" class="form-control decimal-restrict" value="@Model.discount.ToString(" #,##0.00")" onblur="onBlurUpdate('')" />
                                    }
                                    else
                                    {
                                        <input type="text" id="discount" name="discount" class="form-control decimal-restrict" value="@Model.discount.ToString(" #,##0.00")" readonly />
                                    }
                                </p>
                            </td>
                        </tr>

                        <tr>
                            <td align="right"><p class="task_total_amount_titles"> Total :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="total_afterDiscount" name="total_afterDiscount">
                                        @*$@Model.contract_amount.ToString("#,##0.00")*@
                                    </label>
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <td align="right">
                                <p class="task_total_amount_titles">
                                    <label class="task_total_amount_titles" id="gst_percentage" name="gst_percentage">
                                        @Model.gst_percentage % GST :
                                    </label>
                                </p>
                            </td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    <label id="gst_amount" name="gst_amount">
                                        $@Model.gst_amount.ToString("#,##0.00")
                                    </label>
                                </p>
                            </td>
                        </tr>
                        <tr>
                            <td align="right"><p class="task_total_amount_titles">Grand Total :</p></td>
                            <td align="right">
                                <p class="task_total_amount_details">
                                    @*<span><i class="fa fa-dollar mr-2"></i></span>*@ <label id="grand_total_amount" name="grand_total_amount">
                                        $@Model.total_amount.ToString("#,##0.00")
                                    </label>
                                </p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label class="control-label mt-3" for="from_date"><span class="data_inline_label" style="font-size:20px">Payment Terms</span></label>
            </div>
        </div>
        <div id="TermsGrid" class="accordion">
        </div>
        @* Start We need to have for Each Task Total*@
        <label class="control-label mt-5"><span class="data_inline_label">Contract Terms</span></label>
        <div class="demo-section k-content wide form-group">
            <textarea id="contract_terms_editor" class="form-control" rows="100" cols="60" aria-label="editor">
            </textarea>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Created By</label>
                            <div class="created_updated_card_content" id="createdBy">@Model.created_by</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Created On</label>
                            <div class="created_updated_card_content" id="created_date">@Model.created_date</div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Updated By</label>
                            <div class="created_updated_card_content" id="modified_by">@Model.modified_by</div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-lg-3 col-md-6 my-2">
                <div class="card created_updated_card">
                    <div class="card-body py-2">
                        <div>
                            <label>Updated on</label>
                            <div class="created_updated_card_content" id="modified_date">@Model.modified_date</div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <br />
        <div id="uploadFileId" style="display:none">
            <div class="file-loading">
                @*<input id="files" name="input-pd[]" type="file" multiple>*@
                <input id="input-id" name="input-id[]" type="file" multiple>
            </div>
        </div>
        <input type="hidden" id="hdncontract_amount" value="@Model.contract_amount" />
    </div>
</div>
<!--Print Quantity Modal-->
<div id="modalWindow">
    <h6> You want to print quantity column?</h6>
    <button id="yes" class="btn btn-primary pull-right ml-2 mb-2">Yes</button>
    <button id="no" class="btn btn-primary pull-right ml-2 mb-2">No</button>
</div>


<!-- signature Modal -->
<div class="modal fade" id="signature_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Contract Signature </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="row" id="sign_wrapper">
                    <div class="col-lg-6">
                        <div id="salesman-surface-container">
                            <h6>Salesmen Signature </h6>
                            <div style=" border: 1px solid black;">
                                <div class="content-wrapper">

                                    <div id="salesman_surface" style="width: 320px; height: 260px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div id="customer-surface-container">
                            <h6>Customer Signature </h6>
                            <div style=" border: 1px solid black;">
                                <div class="content-wrapper">
                                    <div id="customer_surface" style="width: 320px; height: 260px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*<button class='export-svg k-button'>Export as SVG</button>*@


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button class='btn btn-primary clear'>Clear Canvas</button>
                @*<button class='export-img k-button'>Export as Image</button>*@
                <button type="button" class="btn btn-primary" onclick="SaveSignature();">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>

    function GetSignatureImage() {
		debugger
        var id = parseInt($('#hdnSalesmanId').val());
        if (id != '') {
            getSignatureForUpdate(id);
        }
	}

	function getSignatureForUpdate(id) {
        debugger
        $.loader({ content: "<img src='/Content/img/Preloader_3.gif' />" });
        $.ajax({
            url: '@Url.Action("GetSalesmenSignaturePath", "Admin")',
            type: "POST",
            dataType: "json",
            data: { salesmenId: id },
            success: function (data) {
                debugger
                $.loader('close');
                if (data.result != '') {
                    debugger
                    var imgPath = data.result;
                    //d3.selectAll('#salesman_surface svg').remove();
                    //$("#salesman_surface svg").find("*").not("rect, g").remove();
                    $("#salesman_surface svg").remove();
                    $('#salesman_surface').append('<div><img src="' + imgPath + '" style="width: 100%; height: 100%; overflow: hidden;"></div>');
                    //$('#btnSignatureClose').hide();
                    //$('#btnSignatureClearCanvas').hide();
                    //$('#btnSignatureSave').hide();
                    //$("#divModalFooter").append('<input type="button" value="Delete" id="btnSignatureDelete" class="btn btn-primary" onclick="DeleteSignature();"/>');

                }
                else {
                    //notify("Salesmen signature not found", "error");
                }
            },
            error: function (result, data, data2, status) {
                debugger
                $.loader('close');
            }
        });
        }

	function OnChangeDiscountPercentage() {
		debugger
        var discountPercentage = parseFloat($("#discountPercentage").val());
        var sub_total_amount = parseFloat($("#sub_total_amount").text().replace('$', '').replace(',', '').trim());
        if (sub_total_amount == "NaN" || parseFloat(sub_total_amount) == parseFloat(0)) {
            sub_total_amount = 1;
        }

        if (discountPercentage == null || discountPercentage == "") {
            return false;
        }
        var res = (discountPercentage / 100) * sub_total_amount;
        $("#discount").val("$" + res.toFixed(2).toString());
	}

	function BindContractTerms() {
		var editor = $("#contract_terms_editor").data("kendoEditor");
		$.ajax({
			url: '@Url.Action("ContractTermList", "Master")',
			type: "POST",
			dataType: "json",
			success: function (result) {
				////debugger
				editor.value(result.data.Items[0].Description);
				//for (i = 0; i < result.data.Items.length; i++) {
				//        editor.value(result.data.Items[i].Description);
				//        return false;

				//}

			},
			error: function (result) {
				//   ////debugger

			}
		});
	}
	var ProjectId = $('#ProjectId').val();
	var TaskId = '00000000-0000-0000-0000-000000000000';
	var path_List = "";
	function onBlurDiscount(ErrorMessage) {
		debugger

		var SubTotal = $("#sub_total_amount").text().replace('$', '').trim();
		var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
		var discount = parseFloat($("#discount").val().replace(',', '').replace('$', '').trim());
		if (sub_total_amount > discount && String(sub_total_amount) !== "0.00") {
			if (String(discount) === "" || String(discount) === "NaN") {
				return false;
			}
            else {
                OnChangeDiscountPercentage();
                CalculateGSTTotalAmountAfterDiscount();
				UpdateProjectDetails(1, ErrorMessage);
			}
		}
		else {
			notify("Discount should be less than SubTotal", "error");
			$("#discount").val('0.00');
			return false;
		}
	}

    function onBlurUpdate(Det_ErrorMessage) {
        debugger
        var SubTotal = $("#sub_total_amount").text().replace('$', '').trim();
        var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
        var discount = parseFloat($("#discount").val().replace(',', '').replace('$', '').trim());
        if (sub_total_amount > discount && String(sub_total_amount) !== "0.00") {
            if (String(discount) === "" || String(discount) === "NaN") {
                return false;
            }
            else {
                CalculateGSTTotalAmountAfterDiscount();
                UpdateProjectDetails(1, Det_ErrorMessage);
            }
        }
        else {
            notify("Discount should be less than Sub Total", "error");
            $("#discount").val('0.00');
            return false;
        }
    }

	function CalculateGSTTotalAmountAfterDiscount() {
		////debugger;
		var SubTotal = $("#sub_total_amount").text().replace('$', '').trim();
		// var discount_val = parseFloat($("#discount").val());
		var discount = parseFloat($("#discount").val().replace(',', '').replace('$', '').trim());
		if (String(discount) === "" || String(discount) == "NaN") {
			return false;
		}
		// var sub_total_amount = parseFloat(SubTotal);
		var sub_total_amount = parseFloat(SubTotal.replace(',', ''));
		var tolalamount = sub_total_amount - discount;
		var gstPercentage = parseFloat($("#gst_percentage").text().replace("% GST", ""));

		var gPer = 0;
		if (gstPercentage > 0) {
			gPer = gstPercentage;
		}
		var gstp = parseFloat(gPer / 100);/// + 1;
		if (String(tolalamount).length > 0 && String(gstp).length > 0) {
			//var CAmount = parseFloat(tolalamount / gstp).toFixed(2);
			//var GST = parseFloat(tolalamount - CAmount).toFixed(2);
			var GST1 = parseFloat(tolalamount * gstp);
			var CAmount = parseFloat(tolalamount + GST1).toFixed(2);
			var GST = GST1.toFixed(2);
			if (String(GST) == "NaN") {
				GST = "0.00";
			}
			if (String(CAmount) == "NaN") {
				CAmount = "0.00";
			}
			$("#gst_amount").text(formatCurrency((GST)));
			$("#grand_total_amount").text(formatCurrency((CAmount)));
			$("#total_afterDiscount").text(formatCurrency((tolalamount)));
			$('#total_amount').val(formatCurrency((CAmount)));
			$("#discount").val(formatCurrency((discount)));
			// $("#sub_total_amount").text(formatCurrency((sub_total_amount)));
		}


	}
	function GetMultipleUploadedDocuments() {
		//debugger;
		var ProjectId = $('#ProjectId').val();
		var ContractNumber = '@Model.project_number'.replace('/', '_');
		var path = window.location.origin;//+ '@Model.document_path';

		var path_List = "";
		//var path = window.location.origin;
		var project_id = $('#ProjectId').val();


		$("#input-id").fileinput(
			{

				uploadUrl: '@Url.Action("SaveDocumentNew", "Projects")?project_id=' + ProjectId + '&IsProject=' + true,
				//deleteUrl: "@Url.Action("delete","Home")",
				uploadAsync: true,
				minFileCount: 1,
				maxFileCount: 10,
				overwriteInitial: false,
				initialPreview: [
					$.ajax({
						type: "POST",
						url: "/Contract/Get_Documents", // the URL of the controller action method
						data: { "ProjectId": project_id, "IdType": 11 },
						dataType: 'Json',
						success: function (list) {
							//debugger;
							if (list != null) {
								//  var items = [];
								var i;
								for (i = 0; i < list.data.length; i++) {
									path_List += window.location.origin + list.data[i].document_path + ","
								}
							}

						},
						error: function (jqXHR, textStatus, errorThrown) {
							$.loader('close');
							notify("Fail", "error");
							notify(jqXHR, "error");
						}
					}),
			   // "D:/Proj/BTS/PMS2/PMS2/App_Data/Uploads/123.png",
				//"~/App_Data/Uploads",

			//"http://localhost:5998/App_Data/Uploads/123.png",

				//This is working we need to get path and files count in return from controller and for loop
				/*"http://localhost:5998/content/img/avatar_1.png",*/


			/*"http://localhost:5998/UploadDocuments/Contract/BR1_217/clientpoints.txt",*/


				@* window.location.origin + '@Model.document_path',*@
		// path,
		path_List
			],
		initialPreviewAsData: true,
			//initialPreviewConfig: [
			//    function(){
			//        if (path) {
			//            //debugger
			//        }
			//    }
			//],
			uploadExtraData: "",
				allowedFileExtensions: ['txt', 'pdf', 'doc', 'docx', 'csv', 'xls', 'xlsx', 'jpg', 'png', 'gif'],
		   // maxFileSize: 100
		});
}
$(document).ready(function () {
	//debugger
	var ProjectId = $('#ProjectId').val();
	var ContractNumber = '@Model.project_number'.replace('/', '_');
	var path = window.location.origin;//+ '@Model.document_path';

	 //GetMultipleUploadedDocuments();
	onpageLoadStatusChange();
	//debugger

	var ProjectId = $('#ProjectId').val();
	var ContractNumber = '@Model.project_number'.replace('/', '_');
	var path = window.location.origin;//+ '@Model.document_path';

	//var path_List = "";
	//var path = window.location.origin;
	var project_id = $('#ProjectId').val();

	$.ajax({
		type: "POST",
		url: "/Contract/Get_Documents", // the URL of the controller action method
		data: { "ProjectId": project_id, "IdType": 6 },
		dataType: 'Json',
		success: function (list) {

			debugger;
			if (list.data.length != 0) {
				var previewFiles = [];
				var filesPreviewConfig = [];
				for (let i = 0; i < list.data.length; i++) {
					//path_List.push('"' + window.location.origin + list.data[i].document_path + '"' + ',');
					previewFiles.push(list.data[i].document_path);
					var x = list.data[i].document_path.split(".");
					var extention = x[x.length - 1];
					var y = list.data[i].document_path.split("/");
					var fileName = y[y.length - 1];

					if (extention == "jpg" || extention == "png" || extention == "gif") {
						filesPreviewConfig.push({
							caption: fileName, width: "120px", downloadUrl: previewFiles, url: '@Url.Action("Upload_File", "Contract")?SuperId=' + ProjectId + '&ContractNumber=' + ContractNumber + 'deleted', key: i + 1
						})
					}
					else if (extention == "doc" || extention == "docx" || extention == "csv" || extention == "xls" || extention == "xlsx") {
						debugger
						filesPreviewConfig.push({

							type: "office", caption: fileName, downloadUrl: previewFiles, url: '@Url.Action("Upload_File", "Contract")?SuperId=' + ProjectId + '&ContractNumber=' + ContractNumber + 'deleted', key: i + 1
						})
					}
					else if (extention == "pdf") {
						filesPreviewConfig.push({
							type: "pdf", caption: fileName, downloadUrl: previewFiles, url: '@Url.Action("Upload_File", "Contract")?SuperId=' + ProjectId + '&ContractNumber=' + ContractNumber + 'deleted', key: i + 1
						})
					}
					else if (extention == "txt") {
						filesPreviewConfig.push({
							type: "text", caption: fileName, downloadUrl: previewFiles, url: '@Url.Action("Upload_File", "Contract")?SuperId=' + ProjectId + '&ContractNumber=' + ContractNumber + 'deleted', key: i + 1, downloadUrl: false
						})
					}


				}
				@* $("#input-id").fileinput(
					{
						uploadUrl: '@Url.Action("Upload_File", "Contract")?SuperId=' + ProjectId + '&ContractNumber=' + ContractNumber,
						//deleteUrl: "@Url.Action("delete","Home")",
						uploadAsync: true,
						minFileCount: 1,
						maxFileCount: 10,
						overwriteInitial: true,
						initialPreview: [
							//GetMultipleUploadedDocuments(),
							//function preview() {
							//	//debugger
							//                               var paths = path_List.split(",");
							//                               for (i = 0; i < paths.length; i++) {
							//                                   paths[i];
							//                               }
							//                           }
							//function preview() {
							//	path_List.split(",")[0],
							//		path_List.split(",")[1],
							//		path_List.split(",")[2],
							//		},
							//paths,
							//path_List[0],
							//Object.keys(path_List).forEach(function (keys) {
							//    debugger
							//    console.log(keys);
							//}),

							//                          Object.keys(path_List).forEach(function (keys) {
							//debugger
							//                              console.log(keys);

							//                              path_List_view.push(path_List[keys]);
							//var list = path_List_view;

							//                           }),
							//path_List_view
							//path_List

							Object.values(path_List).forEach(function (values) {
								debugger
								console.log(values);

								values;

							}),


							//"http://localhost:5998/UploadDocuments//Contract/BR1_209/35.jpg",
							//"http://localhost:5998/UploadDocuments//Contract/BR1_209/37.jpg",
						],

						initialPreviewAsData: true,
						initialPreviewConfig: [
							//{ downloadUrl: path_List[0], key: 0,url:path_List[0] },
						],
						uploadExtraData: "",
						allowedFileExtensions: ['txt', 'pdf', 'doc', 'docx', 'csv', 'xls', 'xlsx', 'jpg', 'png', 'gif'],
					});*@

				$("#input-id").fileinput({
					uploadUrl: '@Url.Action("SaveDocumentNew", "Projects")?project_id=' + ProjectId + '&IsProject=' + true,
						uploadAsync: true,
						minFileCount: 1,
						maxFileCount: 10,
						overwriteInitial: false,
						initialPreview: previewFiles,
						//initialPreview: [
						//	// IMAGE DATA
						//	"https://kartik-v.github.io/bootstrap-fileinput-samples/samples/Desert.jpg",
						//	// IMAGE DATA
						//	"https://kartik-v.github.io/bootstrap-fileinput-samples/samples/Lighthouse.jpg",
						//	// VIDEO DATA
						//	"https://kartik-v.github.io/bootstrap-fileinput-samples/samples/small.mp4",
						//	// OFFICE WORD DATA
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/SampleDOCFile_100kb.doc',
						//	// OFFICE EXCEL DATA
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/SampleXLSFile_38kb.xls',
						//	// OFFICE POWERPOINT DATA
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/SamplePPTFile_500kb.ppt',
						//	// TIFF IMAGE FILE
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/multipage_tiff_example.tif',
						//	// ADOBE ILLUSTRATOR FILE
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/sample_ai.ai',
						//	// ENCAPSULATED POST SCRIPT FILE
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/sample_eps.eps',
						//	// PDF DATA
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/pdf-sample.pdf',
						//	// TEXT DATA
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/SampleTextFile_10kb.txt',
						//	// HTML DATA
						//	'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/SampleHTML.htm',
						//],
						initialPreviewAsData: true, // identify if you are sending preview data only and not the raw markup
						initialPreviewFileType: 'image', // image is the default and can be overridden in config below
						allowedPreviewMimeTypes: ['txt', 'pdf', 'doc', 'docx', 'csv', 'xls', 'xlsx', 'jpg', 'png', 'gif'],
						allowedPreviewTypes: ['txt', 'pdf', 'doc', 'docx', 'csv', 'xls', 'xlsx', 'jpg', 'png', 'gif'],
						//initialPreviewDownloadUrl: 'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/{filename}', // includes the dynamic `filename` tag to be replaced for each config
						initialPreviewConfig: filesPreviewConfig,
						//initialPreviewConfig: [
						//	{ caption: "Desert.jpg", description: "<h5>The Desert</h5> This is a representative description number one for this image.", size: 827000, width: "120px", url: "/file-upload-batch/2", key: 1 },
						//	{ caption: "Lighthouse.jpg", description: "<h5>The Lighthouse</h5> This is a representative description number two for this image.", size: 549000, width: "120px", url: "/file-upload-batch/2", key: 2 },
						//	{
						//		type: "video",
						//		description: "<h5>The Video</h5> This is a representative description number three for this file.",
						//		size: 375000,
						//		filetype: "video/mp4",
						//		caption: "KrajeeSample.mp4",
						//		url: "/file-upload-batch/2",
						//		key: 3,
						//		downloadUrl: 'https://kartik-v.github.io/bootstrap-fileinput-samples/samples/small.mp4', // override url
						//		filename: 'KrajeeSample.mp4' // override download filename
						//	},
						//	{ type: "office", description: "<h5>Word Document</h5> This is a representative description number four for this file.", size: 102400, caption: "SampleDOCFile_100kb.doc", url: "/file-upload-batch/2", key: 4 },
						//	{ type: "office", description: "<h5>Excel Spreadsheet</h5> This is a representative description number five for this file.", size: 45056, caption: "SampleXLSFile_38kb.xls", url: "/file-upload-batch/2", key: 5 },
						//	{ type: "office", description: "<h5>Powerpoint Presentation</h5> This is a representative description number six for this file.", size: 512000, caption: "SamplePPTFile_500kb.ppt", url: "/file-upload-batch/2", key: 6 },
						//	{ type: "gdocs", description: "<h5>TIFF Image</h5> This is a representative description number seven for this file.", size: 811008, caption: "multipage_tiff_example.tif", url: "/file-upload-batch/2", key: 7 },
						//	{ type: "gdocs", description: "<h5>AI File</h5> This is a representative description number eight for this file.", size: 375808, caption: "sample_ai.ai", url: "/file-upload-batch/2", key: 8 },
						//	{ type: "gdocs", description: "<h5>EPS File</h5> This is a representative description number nine for this file.", size: 40960, caption: "sample_eps.eps", url: "/file-upload-batch/2", key: 9 },
						//	{ type: "pdf", description: "<h5>PDF File</h5> This is a representative description number ten for this file.", size: 8000, caption: "About.pdf", url: "/file-upload-batch/2", key: 10, downloadUrl: false }, // disable download
						//	{ type: "text", description: "<h5>Text File</h5> This is a representative description number eleven for this file.", size: 1430, caption: "LoremIpsum.txt", url: "/file-upload-batch/2", key: 11, downloadUrl: false },  // disable download
						//	{ type: "html", description: "<h5>HTML File</h5> This is a representative description number twelve for this file.", size: 3550, caption: "LoremIpsum.html", url: "/file-upload-batch/2", key: 12, downloadUrl: false }  // disable download
						//],
						//uploadExtraData: {
						//	img_key: "1000",
						//	img_keywords: "happy, places"
						//}
						allowedFileExtensions: ['txt', 'pdf', 'doc', 'docx', 'csv', 'xls', 'xlsx', 'jpg', 'png', 'gif'],


					})


			}
			else {
				//debugger;
				$("#input-id").fileinput(
					{

						uploadUrl: '@Url.Action("Upload_File", "Contract")?SuperId=' + ProjectId + '&ContractNumber=' + ContractNumber,
						//deleteUrl: "@Url.Action("delete","Home")",
						uploadAsync: true,
						minFileCount: 1,
						maxFileCount: 10,
						overwriteInitial: false,
						initialPreview: [

							// "http://localhost:5998/content/img/avatar_1.png",
						],
						initialPreviewAsData: true,
						uploadExtraData: "",
						allowedFileExtensions: ['txt', 'pdf', 'doc', 'docx', 'csv', 'xls', 'xlsx', 'jpg', 'png', 'gif'],
					});
			}

		},
		error: function (jqXHR, textStatus, errorThrown) {
			$.loader('close');
			notify("Fail", "error");
			notify(jqXHR, "error");
		}
	});



	//var initialFiles = JSON.parse(sessionStorage.initialFiles);
	//function onSuccess(e) {
	//    ////debugger;
	//    var currentInitialFiles = JSON.parse(sessionStorage.initialFiles);
	//    for (var i = 0; i < e.files.length; i++) {
	//        var current = {
	//            name: e.files[i].name,
	//            extension: e.files[i].extension,
	//            size: e.files[i].size
	//        }

	//        if (e.operation == "upload") {
	//            currentInitialFiles.push(current);
	//        } else {
	//            var indexOfFile = currentInitialFiles.indexOf(current);
	//            currentInitialFiles.splice(indexOfFile, 1);
	//        }
	//    }
	//    sessionStorage.initialFiles = JSON.stringify(currentInitialFiles);
	//}
	////debugger;

	var SubTotal = @Model.contract_amount;
	var discount =  @Model.discount;
	var tolalamount = SubTotal - discount;
	$("#total_afterDiscount").text(formatCurrency(tolalamount));
	$("#discount").val(formatCurrency(discount));
    $('#sub_total_amount').text(formatCurrency(SubTotal));

	BindProjectStatus();
	BindSalesMan();
	BindCustomer();
	BindContractTerms();
	$('#date_range').daterangepicker({
		"singleDatePicker": true,
		"autoUpdateInput": true,
		"autoApply": true,
		locale: {
			format: 'DD/MM/YYYY',
		},

		"alwaysShowCalendars": true,
	});

	$('#date_range').on('apply.daterangepicker', function (ev, picker) {
		$(this).val(picker.startDate.format('DD/MM/YYYY') /*+ ' - ' + picker.endDate.format('DD/MM/YYYY')*/);
	});


	$('#date_range').data('daterangepicker').setStartDate('@Model.quotationForwardDate');
	$('#date_range + .input-group-append').click(function () {
		$('#date_range').trigger("focus");
	});
	wnd = $("#modalWindow").kendoWindow({
		title: "Quantity Confirmation",
		modal: true,
		visible: false,
		resizable: false,
		width: 300
	}).data("kendoWindow");
	$('#ContractGrid').kendoGrid({
		dataSource: {
			transport: {

				read: function (options) {
					$.ajax({
						url: '@Url.Action("GetContractTasksItemPackage", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + TaskId + '&IsFromPackage=' + false,
						type: "GET",
						dataType: "json",
						success: function (result) {
							////debugger
							options.success(result);
						},
						error: function (result) {
							////debugger
							options.error(result);
						}
					});
				},
				update: {
					url: '@Url.Action("UpsertContractTasks", "Contract")?ProjectId=' + ProjectId,
					type: "POST",
					dataType: "json",
					complete: function (e) {
						$("#ContractGrid").data("kendoGrid").dataSource.read();
					}
				},
				destroy: {
					url: '@Url.Action("", "Contract")',
					type: "POST",
					dataType: "json"
				},
				create: {
					url: '@Url.Action("UpsertContractTasks", "Contract")?ProjectId=' + ProjectId,
					type: "POST",
					dataType: "json",
					complete: function (e) {
						$("#ContractGrid").data("kendoGrid").dataSource.read();
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				}
			},
			batch: true,
			pageSize: 6,
			schema: {
				data: "data.Items", total: "data.TotalCount",
				model: {
					id: "Task_Id",
					fields: {
						//Task_Id: { hidden: true },
						//Task_Name: {
						//    validation: { required: true }
						//}
						Task: { defaultValue: { Task_Id: 0, Task_Name: "Select Task" } },
					}
				}
			}

		},
		pageable: true,
		/*toolbar: ["create"],*/
		toolbar: [
			{ name: "create", text: "Add new Contract Task" }, { template: '<a class="k-button"  onclick="return  collapse_all()"  style="float:right" >Collapse All</a>' }, { template: '<a class="k-button"  onclick="return  expand_all()"  style="float:right">Expand All</a>' }
		],
		detailInit: detailInit,


		//detailExpand: function (e) {
		//    /* The result can be observed in the DevTools(F12) console of the browser. */
		//    ////debugger
		//    console.log(e.masterRow, e.detailRow);
		//    var nodeid = e.detailRow[0][1].nodeValue;
		//    localStorage.setItem('uid', nodeid);
		//    const cat = localStorage.getItem('uid');
		//},
		dataBound: function () {
			this.expandRow(this.tbody.find("tr.k-master-row").first());
		},
		pageable: {
			pageSize: 10,
			buttonCount: 10,
			pageSizes: [5, 10, 20, 50, 100, 500],
			messages: {
				display: "{0} - {1} of {2} tasks", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
				empty: "No tasks to display",
				page: "Page",
				of: "of {0}", //{0} is total amount of pages
				itemsPerPage: "tasks per page",
				first: "Go to the first page",
				previous: "Go to the previous page",
				next: "Go to the next page",
				last: "Go to the last page",
				refresh: "Refresh"
			}
		},
		columns: [
			{ field: "Task", title: " ", attributes: { style: "text-align:left;font-size: 20px;" }, editor: GetContractTasksListItem, template: "#=Task.Task_Name#" },
			//  { field: "Task_Id", title: "Task Id", hidden: true },
			//{ field: "Task_Name", title: " ", attributes: { style: "text-align:left;font-size:22px;" }, editor: GetContractTasksListItem, template: "#=data.Task_Name#" },
			//{ command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
			//            { name: "destroy", text: " " }], title: "Action", width: "100px" }
		],
		editable: "inline"

	});

	$("#PackageGrid").kendoGrid({
            dataSource: {
                transport: {
                    //@*read: {
                            //   url: '@Url.Action("GetProjectTasksItem", "Quotation")?ProjectId=' + ProjectId + '&TaskId=' + TaskId,
                            //            type: "GET",
                            //            dataType: "json"
                            //},*@

                    read: function (options) {
                        $.ajax({
                            url: '@Url.Action("GetProjectTasksQuotationItem", "Quotation")?ProjectId=' + ProjectId + '&TaskId=' + TaskId + '&IsFromPackage=' + true,
                            type: "GET",
                            dataType: "json",
                            success: function (result) {
                                debugger
                                options.success(result);
                            },
                            error: function (result) {
                                debugger
                                options.error(result);
                            }
                        });
                    },
                            @*update: {
                                url: '@Url.Action("UpsertProjectTasks", "Quotation")?ProjectId=' + ProjectId,
                                type: "POST",
                                dataType: "json",
                                complete: function (e) {
                                    $("#PackageGrid").data("kendoGrid").dataSource.read();
                                }
                            },*@
                    @*destroy: {
                                url: '@Url.Action("", "Quotation")',
                                type: "POST",
                                dataType: "json"
                            },*@
                    @*create: {
                                url: '@Url.Action("UpsertProjectTasks", "Quotation")?ProjectId=' + ProjectId,
                                type: "POST",
                                dataType: "json",
                                complete: function (e) {
                                    $("#PackageGrid").data("kendoGrid").dataSource.read();
                                }
                            },*@
                    parameterMap: function (options, operation) {
                        if (operation !== "read" && options.models) {
                            return { models: kendo.stringify(options.models) };
                        }
                    }
                },
                batch: true,
                pageSize: 6,
                schema: {
                    data: "data.Items", total: "data.TotalCount",
                    model: {
                        id: "Task_Id",
                        fields: {
                            // Task_Id: { hidden : true },
                            //  Task_Name: { validation: { required: true } },
                            // Task_Name: { defaultValue: { Task_Id: 0, Task_Name: "Select Task" }, validation: { required: true } },
                            Task: { defaultValue: { Task_Id: 0, Task_Name: "Select Task" } },
                        }
                    }
                }
            },
            pageable: true,
            /* toolbar: ["create"],*/
            toolbar: [
                { template: '<a class="k-Text" style="float:Left;/* width: 41%; */font-size: large;font-size: x-large;color: white;" >Package Details</a>' }, { template: '<a class="k-button"  onclick="return  collapse_allPackages()"  style="float:right" >Collapse</a>' }, { template: '<a class="k-button"  onclick="return  expand_allPackage()"  style="float:right">Expand</a>' }
            ],
            detailInit: detailInitPackage,
            dataBound: function () {
                //this.expandRow(this.tbody.find("tr.k-master-row").first());

            },
            pageable: {
                pageSize: 10,
                buttonCount: 10,
                pageSizes: [5, 10, 20, 50, 100, 500],
                messages: {
                    display: "{0} - {1} of {2} tasks", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
                    empty: "No tasks to display",
                    page: "Page",
                    of: "of {0}", //{0} is total amount of pages
                    itemsPerPage: "tasks per page",
                    first: "Go to the first page",
                    previous: "Go to the previous page",
                    next: "Go to the next page",
                    last: "Go to the last page",
                    refresh: "Refresh"
                }
            },
            columns: [
                // { field: "Task_Id", title: "Task Id", hidden: true },
                /* { field: "Task_Name", title: " ", attributes: { style: "text-align:left;font-size: 22px;" }, editor: GetProjectTasksListItem, template: "#=data.Task_Name#" }*/

                { field: "Task", title: " ", attributes: { style: "text-align:left;font-size: 20px;" }, editor: GetContractTasksListItem, template: "#=Task.Task_Name#" },

                //,
                //{
                //    command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
                //        { name: "destroy", text: " " }], title: "Action", width: "100px" }
            ],
            editable: false
	 });

	$("#TermsGrid").kendoGrid({
		dataSource: {
			transport: {
				read: function (options) {
					$.ajax({
						url: '@Url.Action("GetContractpaymentterms", "Contract")?ProjectId=' + ProjectId,
						type: "GET",
						dataType: "json",
						success: function (result) {
							////debugger
							options.success(result);
						},
						error: function (result) {
							////debugger
							options.error(result);
						}
					});
				},
				create: function (options) {
					////debugger;
					if (options.data.models[0].paymentdescription.Master_payment_term_id === undefined && options.data.models[0].paymentdescription.Master_payment_description === undefined) {
						options.data.models[0].paymentdescription = { Master_payment_term_id: "", Master_payment_description: options.data.models[0].paymentdescription }
					} else {

					}
					if (options.data.models[0].paymentdescription.Master_payment_term_id === 0) {
						options.data.models[0].paymentdescription.Master_payment_term_id = "";
					}
					if (options.data.models[0].paymentdescription.Master_payment_description == '') {
						notify("Please Enter/Select Payment Terms", "error");
						$('div.k-loading-mask').css('display', 'none');

					} else {
						////debugger
						$.ajax({
							url: '@Url.Action("UpsertProjectPaymentTerms", "Contract")?ProjectId=' + ProjectId,
							type: "POST",
							dataType: "json",
							data: { JsonContract: JSON.stringify(options.data.models[0]) },
							success: function (result) {
								////debugger
								$("#TermsGrid").data('kendoGrid').dataSource.read();
								$("#TermsGrid").data('kendoGrid').refresh();
								if (result.data.Result > 0) {
									notify(result.data.Errormessage, "success");
								}
								else {
									notify(result.data.Errormessage, "error");
								}
								options.success(result);
							},
							error: function (result) {
								////debugger
								options.error(result);
							}
						});
					}
				},
				update: function (options) {
					////debugger
					if (options.data.models[0].paymentdescription.Master_payment_term_id === undefined && options.data.models[0].paymentdescription.Master_payment_description === undefined) {
						options.data.models[0].paymentdescription = { Master_payment_term_id: "", Master_payment_description: options.data.models[0].paymentdescription }
					}
					if (options.data.models[0].paymentdescription.Master_payment_term_id === 0) {
						options.data.models[0].paymentdescription.Master_payment_term_id = "";
					}
					$.ajax({
						url: '@Url.Action("UpsertProjectPaymentTerms", "Contract")?ProjectId=' + ProjectId,
						type: "POST",
						dataType: "json",
						data: { JsonContract: JSON.stringify(options.data.models[0]) },
						success: function (result) {
							////debugger
							$("#TermsGrid").data('kendoGrid').dataSource.read();
							$("#TermsGrid").data('kendoGrid').refresh();
							if (result.data.Result > 0) {
								notify(result.data.Errormessage, "success");
							}
							else {
								notify(result.data.Errormessage, "error");
							}
							options.success(result);
						},
						error: function (result) {
							////debugger
							options.error(result);
						}
					});
				},
				destroy: function (options) {
					////debugger
					var payment_term_id = options.data.models[0].payment_term_id;
					$.ajax({
						url: '@Url.Action("DeleteProject_ContractPaymentTermsByID", "Contract")?payment_term_id=' + payment_term_id,
						type: "POST",
						dataType: "json",
						success: function (result) {
							////debugger
							$("#TermsGrid").data('kendoGrid').dataSource.read();
							$("#TermsGrid").data('kendoGrid').refresh();
							if (result.data.Result > 0) {
								notify(result.data.Errormessage, "success");
							}
							else {
								notify(result.data.Errormessage, "error");
							}
							options.success(result);
						},
						error: function (result) {
							////debugger
							options.error(result);
						}
					});
				},
						@* read: {
		url: '@Url.Action("GetContractpaymentterms", "Contract")?ProjectId=' + ProjectId,
			type: "GET",
				dataType: "json"
	},
	update: {
		url: '@Url.Action("UpsertProjectPaymentTerms", "Contract")?ProjectId=' + ProjectId,
			type: "POST",
				dataType: "json",
					complete: function (e) {
						$("#TermsGrid").data("kendoGrid").dataSource.read();
					}
	},
	destroy: {
		url: '@Url.Action("", "Contract")',
			type: "POST",
				dataType: "json"
	},
	create: {
		url: '@Url.Action("UpsertProjectPaymentTerms", "Contract")?ProjectId=' + ProjectId,
			type: "POST",
				dataType: "json",
					complete: function (e) {
						$("#TermsGrid").data("kendoGrid").dataSource.read();
					}
	},*@

	parameterMap: function (options, operation) {
		if (operation !== "read" && options.models) {
			return { models: kendo.stringify(options.models) };
		}
	}
},
	batch: true,
	pageSize: 6,
	schema: {
		data: "data.Items", total: "data.TotalCount",
		model: {
			id: "payment_term_id",
			fields: {
				payment_term_id: { editable: false, nullable: true },
				//Master_payment_description: { validation: { required: true } },
				paymentdescription: { defaultValue: { Master_payment_term_id: 0, Master_payment_description: "" } },
			}
		}
	}
		   },
	filterable: true,
	scrollable: true,
	sortable: true,
	pageable: true,
	navigatable: true,
	/* toolbar: ["create"],*/
	toolbar: [
		{ name: "create", text: "Add new Payment Term" }
	],
	autoSync: true,
	resizable: true,
	pageable: {
		pageSize: 10,
		buttonCount: 10,
		pageSizes: [5, 10, 20, 50, 100, 500],
		messages: {
			display: "{0} - {1} of {2} payment terms", //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
			empty: "No payment terms to display",
			page: "Page",
			of: "of {0}", //{0} is total amount of pages
			itemsPerPage: "payment terms per page",
			first: "Go to the first page",
			previous: "Go to the previous page",
			next: "Go to the next page",
			last: "Go to the last page",
			refresh: "Refresh"
		}
	},
	columns: [
		//    { field: "payment_term_id", hidden: true },
		//    { field: "Master_payment_description", title: "Payment Description", attributes: { style: "text-align:left;" }, editor: PaymentTermsDropDownEditor, template: "#=data.Master_payment_description#" },
		//    {
		//        command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " } },
		//            { name: "destroy", text: " " }], title: "Action", width: "100px" }
		//],
		{
			command: [{
				name: "edit", text: { edit: " ", update: " ", cancel: " " }, visible: function () {
					var StatusId =@Model.status_id; return StatusId == "2"
				}
			},
			{
				name: "destroy", text: " ", iconClass: "k-icon k-i-delete", visible: function () {
					var StatusId =@Model.status_id; return StatusId == "2"
				}
			}], title: "Action", width: "100px"
		},
		{ field: "payment_term_id", title: "", hidden: true },
		{ field: "paymentdescription", title: "Payment Description", attributes: { style: "text-align:left;" }, filterable: false, editor: PaymentTermsDropDownEditor, template: "#=paymentdescription.Master_payment_description#" },

	],
	editable: "inline"
	});

	debugger;
	var bIsFromQuotation = "@ViewBag.IsFromQuotation";
	var StatusId = "@ViewBag.StatusId";
	if (bIsFromQuotation == "True" && StatusId == "2") {
		$("#signature_modal").modal('show');
		GetSignatureImage();
	}
});

function detailInit(e) {
	$("<div id='contractchildGrid'/>").appendTo(e.detailCell).kendoGrid({
		dataSource: {
			transport: {

				read: function (options) {
					if (e.data.Task.Task_Id == "0" || e.data.Task.Task_Id == 0) {

					}
					else {
						$.ajax({
                            url: '@Url.Action("GetContractTasksItemDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id,
							type: "GET",
							dataType: "json",
							success: function (result) {
								////debugger
								options.success(result);
							},
							error: function (result) {
								////debugger
								options.error(result);
							}
						});
					}
				},

				create: function (options) {
					debugger
					if (options.data.models[0].UOM === null || options.data.models[0].UOM === undefined) {
						options.data.models[0].UOM = { uom_id: 0, uom_description: "-- Select --" }
					}
					if (options.data.models[0].BillingUOM.description === "Standard") {
						if (options.data.models[0].UOM.uom_id == 0) {
							notify("Please Select UOM", "error");
							$('div.k-loading-mask').css('display', 'none');
							return false;
						}
					}
					if ((options.data.models[0].UOM.uom_description !== "Lumpsum")) {
						options.data.models[0].Amount = options.data.models[0].Price * options.data.models[0].Qty;
					}
					if (options.data.models[0].Item.item_id === undefined && options.data.models[0].Item.item_description === undefined) {
						options.data.models[0].Item = { item_id: "", item_description: options.data.models[0].Item }
					}
					//if ((options.data.models[0].Price !== 0) && (options.data.models[0].Qty !== 0)) {
					//    options.data.models[0].Amount = options.data.models[0].Price * options.data.models[0].Qty;
					//}
					if (e.data.Task.Task_Id == 0) {
						notify("Please Select Task", "error");
						$('div.k-loading-mask').css('display', 'none');
						// options.error(result);
					}
					else {
						$.ajax({
							url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + escape(e.data.Task.Task_Name),
							type: "POST",
							dataType: "json",
							data: { JsonContractDetails: JSON.stringify(options.data.models[0]) },
							success: function (result) {
								////debugger
								$("#ContractGrid").data('kendoGrid').dataSource.read();
								$("#ContractGrid").data('kendoGrid').refresh();
								if (result.data.Result > 0) {
									// notify(result.data.Errormessage, "success");

									var Subtotal = result.data.SubTotal;

									if (Subtotal != 0 || Subtotal != 0.00) {
										$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										onBlurDiscount(result.data.Errormessage);
									}
									else {
										notify(result.data.Errormessage, "success");
										$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
										$('#total_amount').val(formatCurrency(result.data.Amount));
										$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
										$('#gst_amount').text(formatCurrency(result.data.gst_amount));
										$('#grand_total_amount').text(formatCurrency(result.data.Amount));
										$('#total_afterDiscount').text("$0.00");
										$("#discount").val('0');
									}
								}
								else {
									notify(result.data.Errormessage, "error");
								}
								options.success(result);
							},
							error: function (result) {
								////debugger
								/*kendo.alert(result.data.Errormessage);*/
								notify(result.data.Errormessage, "error");
								options.error(result);
							}
						});
					}
				},
				update: function (options) {
					////debugger
					if (options.data.models[0].UOM === null || options.data.models[0].UOM === undefined) {
						options.data.models[0].UOM = { uom_id: 0, uom_description: "-- Select --" }
					}
					if (options.data.models[0].BillingUOM.description === "Standard") {
						if (options.data.models[0].UOM.uom_id == 0) {
							notify("Please Select UOM", "error");
							$('div.k-loading-mask').css('display', 'none');
							return false;
						}
					}
					if ((options.data.models[0].UOM.uom_description !== "Lumpsum")) {
						options.data.models[0].Amount = options.data.models[0].Price * options.data.models[0].Qty;
					}
					if (options.data.models[0].Item.item_id === undefined && options.data.models[0].Item.item_description === undefined) {
						options.data.models[0].Item = { item_id: "", item_description: options.data.models[0].Item }
					}
					if (options.data.models[0].Item.item_id === 0) {
						options.data.models[0].Item.item_id = "";
					}
					$.ajax({
						url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&TaskName=' + escape(e.data.Task.Task_Name),
						type: "POST",
						dataType: "json",
						data: { JsonContractDetails: JSON.stringify(options.data.models[0]) },
						success: function (result) {
							////debugger
							$("#ContractGrid").data('kendoGrid').dataSource.read();
							$("#ContractGrid").data('kendoGrid').refresh();
							if (result.data.Result > 0) {
								//notify(result.data.Errormessage, "success");

								var Subtotal = result.data.SubTotal;

								if (Subtotal != 0 || Subtotal != 0.00) {
									$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
									onBlurDiscount(result.data.Errormessage);
								}
								else {
									notify(result.data.Errormessage, "success");
									$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
									$('#total_amount').val(formatCurrency(result.data.Amount));
									$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
									$('#gst_amount').text(formatCurrency(result.data.gst_amount));
									$('#grand_total_amount').text(formatCurrency(result.data.Amount));
									$('#total_afterDiscount').text("$0.00");
									$("#discount").val('0');
								}
							}
							else {
								notify(result.data.Errormessage, "error");
							}
							options.success(result);
						},
						error: function (result) {
							////debugger

							options.error(result);
						}
					});

				},
				destroy: function (options) {
					////debugger
					var Project_det_id = options.data.models[0].Project_Det_Id;
					$.ajax({
						url: '@Url.Action("DeleteProject_ContractDetails", "Contract")?Project_det_id=' + Project_det_id,
						type: "POST",
						dataType: "json",
						success: function (result) {
							////debugger
							$("#ContractGrid").data('kendoGrid').dataSource.read();
							$("#ContractGrid").data('kendoGrid').refresh();
							if (result.data.Result > 0) {
								////debugger;
								//notify(result.data.Errormessage, "success");
								var Subtotal = result.data.SubTotal;

								if (Subtotal != 0 || Subtotal != 0.00) {
									$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
									onBlurDiscount(result.data.Errormessage);
								}
								else {
									notify(result.data.Errormessage, "success");
									$('#sub_total_amount').text(formatCurrency(result.data.SubTotal));
									$('#total_amount').val(formatCurrency(result.data.Amount));
									$('#gst_percentage').text(result.data.gst_percentage + '% GST :');
									$('#gst_amount').text(formatCurrency(result.data.gst_amount));
									$('#grand_total_amount').text(formatCurrency(result.data.Amount));
									$('#total_afterDiscount').text("$0.00");
									$("#discount").val('0');
								}
							}
							else {
								notify(result.data.Errormessage, "error");
							}
							options.success(result);
						},
						error: function (result) {
							////debugger
							options.error(result);
						}
					});

				},
						   @* update: {
		url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task_Id + '&TaskName=' + e.data.Task_Name,
			type: "POST",
				dataType: "json",
					complete: function (e) {
						e.data("kendoGrid").dataSource.read();
					}
	},*@
				@* destroy: {
		url: '@Url.Action("", "Contract")',
			type: "POST",
				dataType: "json"
	},*@
				@* create: {
		url: '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task_Id + '&TaskName=' + e.data.Task_Name,
			type: "POST",
				dataType: "json",
					complete: function (e) {
						e.data("kendoGrid").dataSource.read();
					}
	},*@

				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				}
			},
			batch: true,
			pageSize: 10,
			schema: {
				data: "data.Items", total: "data.TotalCount",
				model: {
					id: "project_Id",
					fields: {
						project_Id: { editable: false },
						Project_Det_Id: { editable: false },
						//  Task_Id: { editable: false },
						Task_Id: { defaultValue: e.data.Task.Task_Id, editable: false },
						/*uom_id: { editable: false },*/
						Category: {
							defaultValue: { category_Id: 1, category_name: "No Category" }, validation: { required: true }
						},
						Item: {
							defaultValue: { item_id: null, item_description: "" }, validation: { required: true }
						},
						AdditionalDescription: { defaultValue: "", validation: { required: false } },
						BillingUOM: { defaultValue: { status_lookup_id: 1, description: "Standard" }, validation: { required: true } },

						// Qty: { validation: { required: true, type: "number",min: 0 } },
						Qty: { type: "number", validation: { required: true, min: 0, maxlength: 8 } },
						UOM: { defaultValue: { uom_id: 0, uom_description: "-- Select --" } },
						Price: { validation: { required: true, min: 0, maxlength: 20 }, type: "number" },
						item_remarks: { validation: { required: false, maxlength: 100 } },
						Amount: { type: "number", validation: { required: true, maxlength: 30 } },
						Highlight: { defaultValue: false, validation: { required: false }/*, editable: false*/ }
					}
				}
			},
			aggregate: [
				{ field: "Price", aggregate: "sum" },
				{ field: "Amount", aggregate: "sum" }
			]
		},
		scrollable: true,
		sortable: true,
		pageable: true,
		navigatable: true,
		/*  toolbar: ["create"],*/
		toolbar: [
			{ name: "create", text: "Add new Item" }
		],
		autoSync: true,
		resizable: true,
		pageable: {
			pageSize: 10,
			buttonCount: 10,
			pageSizes: [5, 10, 20, 50, 100, 500]
		},
		// edit: onGridEditing,
		columns:
		[

			{ field: "Highlight", width: "70px", editor: customBoolEditor },

			{
				field: "Category", title: "Category", width: "100px", attributes: { style: "text-align:left;", filterable: { multi: true, search: true } },
				editor: CategoryDropDownEditor, template: "#=Category.category_name#"
			},
			{ field: "Item", title: "Item Description", width: "350px", attributes: { style: "text-align:left;" }, editor: ItemDropDownEditor, template: "#=Item.item_description#" },
			{
				command: [{ name: "Additional Description", text: " ", iconClass: "k-icon k-i-change-manually", click: LoadDescription, editor: " " }], title: "Description", width: "50px"
			},
			{ field: "BillingUOM", width: "100px", title: "Billing UOM", attributes: { style: "text-align:left;" }, editor: BillingUOMDropDownEditor, template: "#=BillingUOM.description#" },

			{ field: "Qty", width: "100px" },
			{ field: "UOM", width: "100px", title: "UOM", attributes: { style: "text-align:left;" }, editor: UOMDropDownEditor, template: "#=UOM.uom_description#" },
			/*{ field: "uom_id", hidden:true, attributes: { style: "text-align:left;" }, editor: UOMDropDownEditor, template: "#=data.uom_id#" },*/
			{ field: "Price", width: "100px", title: "Price ($)", format: "{0:c}" }, //, footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" }
			{ field: "item_remarks", width: "100px", title: "Remarks", attributes: { style: "text-align:left;" } },
			{
				field: "Amount", width: "100px", title: "Amount", format: "{0:c}", footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;", "class": "Amount_feild", },
				//editor: function (cont, options) {
				//       ////debugger

				//       $("<span class='totalSpan'>" + options.model.Amount + " &dollar;</span>").appendTo(cont);
				//   },

			},
			{
				command: [{
					name: "edit", text: { edit: " ", update: " ", cancel: " " }, visible: function () {
						var StatusId =@Model.status_id; return StatusId == "2"
					}
				},
				{
					name: "destroy", text: " ", iconClass: "k-icon k-i-delete", visible: function () {
						var StatusId =@Model.status_id; return StatusId == "2"
					}
				}], title: "Action", width: "140px"
			},

		],
	editable: "inline",
		edit: function (e) {
			////debugger;
			var priceEditor = e.container.find("input[name=Price]").data("kendoNumericTextBox");
			var quantityEditor = e.container.find("input[name=Qty]").data("kendoNumericTextBox");

			var amountEditor = e.container.find("input[name=Amount]").data("kendoNumericTextBox");
			var uomEditor = e.container.find("input[name=UOM]").data("kendoDropDownList");
			//var uomEditor = e.container.find("input[name=BillingUOM]").data("kendoDropDownList");
			var billinguomValue = e.container.find("[data-container-for='BillingUOM'] .k-input").text();
			var uomValue = e.container.find("[data-container-for='UOM'] .k-input").text();


			if (billinguomValue == "FOC" || billinguomValue == "Inclusive" || billinguomValue == "Complementary") {
				priceEditor.enable(false);
				quantityEditor.enable(false);
				amountEditor.enable(false);
				uomEditor.enable(false);
			}
			if (uomValue == "Lumpsum") {
				priceEditor.enable(false);
				quantityEditor.enable(false);
				//amountEditor.enable(true);
			}

			priceEditor.bind("change", function (e) {
				var price = this.value();
				var quantity = quantityEditor.value();

				amountEditor.value(price * quantity);

				//var totalSpan = this.element.closest("tr").find(".totalSpan");
				//totalSpan.html(price * quantity);

			});

			quantityEditor.bind("change", function (e) {
				var price = priceEditor.value();
				var quantity = this.value();

				amountEditor.value(price * quantity);

				//var totalSpan = this.element.closest("tr").find(".totalSpan");
				//totalSpan.html(price * quantity);
			});
			@*var detailGridWrapper = this.wrapper;
			var parentRow = detailGridWrapper.closest("tr.k-detail-row").prev("tr");
			var parentGrid = parentRow.closest("[data-role=grid]").data("kendoGrid");
			////debugger
			var parentModel = parentGrid.dataItem(parentRow);

			var ParentTaskId = parentModel.Task.Task_Id;
			var ParentTaskName = parentModel.Task.Task_Name;
			////debugger
			var a = this;
			a.dataSource.transport.create.url = '@Url.Action("UpsertContractDetails", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + ParentTaskId + '&TaskName=' + ParentTaskName;*@
				},
complete: function (e) {
	////debugger
	$("#ContractGrid").data("kendoGrid").dataSource.read();
	$("#ContractGrid").data('kendoGrid').refresh();
}
	});
//Nithin Added for hiding Action Column based on status
onpageLoadStatusChange();
}

	function detailInitPackage(e) {
         $("<div id='quotationchildGrid'/>").appendTo(e.detailCell).kendoGrid({
             dataSource: {
                 transport: {

                     read: function (options) {
                         if (e.data.Task.Task_Id == "0" || e.data.Task.Task_Id == 0) {

                         }
                         else {
                             $.ajax({
                                 url: '@Url.Action("GetProjectTasksQuotationItemDetails", "Quotation")?ProjectId=' + ProjectId + '&TaskId=' + e.data.Task.Task_Id + '&IsFromPackage=' + true,
                                 type: "GET",
                                 dataType: "json",
                                 success: function (result) {
                                     debugger
                                     options.success(result);
                                 },
                                 error: function (result) {
                                     debugger
                                     options.error(result);
                                 }
                             });
                         }
                     },
                     parameterMap: function (options, operation) {
                         if (operation !== "read" && options.models) {
                             return { models: kendo.stringify(options.models) };
                         }
                     }
                 },
                 batch: true,
                 pageSize: 10,
                 schema: {
                     data: "data.Items", total: "data.TotalCount",
                     model: {
                         //id: "project_id",
                         id: "project_Id",
                         fields: {
                             project_Id: { editable: false },
                             Project_Det_Id: { editable: false },
                             Task_Id: { defaultValue: e.data.Task.Task_Id, editable: false },
                             Category: { defaultValue: { category_Id: 1, category_name: "No Category" }, validation: { required: true } },
                             Item: { defaultValue: { item_id: null, item_description: "" }, validation: { required: true /*, maxlength: 3*/ } },
                             //AdditionalDescription: { defaultValue: "", validation: { required: false } },
                             BillingUOM: { defaultValue: { status_lookup_id: 1, description: "Standard" }, validation: { required: true } },
                             Qty: { validation: { required: true, min: 0, maxlength: 8 }, type: "number" },
                             UOM: { defaultValue: { uom_id: 0, uom_description: "-- Select --" }, validation: { required: true } },
                             Price: { validation: { required: true, min: 0, maxlength: 20 }, type: "number" },
                             item_remarks: { validation: { required: false, max: 100 } },
                             Amount: { type: "number", maxlength: 30 },
                             Cost_Amount: { type: "number", maxlength: 30 },
                             Profit_Loss: { type: "number", maxlength: 30 },
                             //Highlight: { defaultValue: false, validation: { required: false }/*, editable: false*/ }
                         }
                     }
                 },
                 aggregate: [
                     { field: "Price", aggregate: "sum" },
                     { field: "Amount", aggregate: "sum" }
                 ]
             },
             scrollable: true,
             sortable: true,
             pageable: true,
             navigatable: true,
             /* toolbar: ["create"],*/
             toolbar: [
                /* { name: "create", text: "Add new Quotation Item" }*/
             ],
             autoSync: true,
             resizable: true,
             pageable: {
                 pageSize: 10,
                 buttonCount: 10,
                 pageSizes: [5, 10, 20, 50, 100, 500],

             },

             columns: [

                 //{ field: "Highlight", width: "70px", editor: customBoolEditor },

                 /* { field: "Highlight", width: "70px", title: "Highlight", template: "<input type=\"checkbox\" #= (Highlight == true) ? checked ='checked' : '' #/>", attributes: { style: "text-align:center;" } },*/
                 {
                     field: "Category", width: "120px", title: "Category", attributes: { style: "text-align:left;"/*, filterable: { multi: true, search: true }*/ }, editor: CategoryDropDownEditor, template: "#=Category.category_name#"
                 },
                 { field: "Item", title: "Item Description", width: "120px", attributes: { style: "text-align:left;" }, editor: ItemDropDownEditor, template: "#=Item.item_description#" },
                 //{
                 //    command: [{ name: "Additional Description", text: " ", iconClass: "k-icon k-i-change-manually", click: LoadDescription, editor: " " }], title: "Description", width: "50px"
                 //},
                 { field: "BillingUOM", width: "100px", title: "Billing UOM", attributes: { style: "text-align:left;" }, editor: BillingUOMDropDownEditor, template: "#=BillingUOM.description#" },

                 { field: "Qty", width: "100px", title: "Quantity" },
                 { field: "UOM", width: "100px", title: "UOM", attributes: { style: "text-align:left;" }, editor: UOMDropDownEditor, template: "#=UOM.uom_description#" },
                 { field: "Price", width: "100px", title: "Price ($)", format: "{0:c}" }, //, footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" }
                 { field: "item_remarks", width: "100px", title: "Remarks", attributes: { style: "text-align:left;" } },
                 {
                     field: "Amount", width: "100px", title: "Amount", format: "{0:c}", footerTemplate: "<div style='float: right'>#= kendo.toString(sum, 'c2') #</div>", attributes: { style: "text-align:right;" },

                     //editor: function (cont, options) {
                     //    debugger

                     //    $("<span class='totalSpan'>" + options.model.Amount + " &dollar;</span>").appendTo(cont);
                     //},
                 },
                 {
                     field: "Cost_Amount", width: "100px", title: "Cost Amount", format: "{0:c}",
                     attributes: { style: "text-align:right;" },
                 },
                 {
                     field: "Profit_Loss", width: "100px", title: "Profit Loss", format: "{0:c}",
                     attributes: { style: "text-align:right;" },
                 },

                @*{
                    command: [{ name: "edit", text: { edit: " ", update: " ", cancel: " " }, visible: function () {
                                var StatusId =@Model.status_id;return StatusId == "1"} },
                        {
                            name: "destroy", text: " ", iconClass: "k-icon k-i-delete", visible: function () {
                                var StatusId =@Model.status_id;return StatusId == "1"}}] , title: "Action", width: "100px"
                },*@
             ],
             editable: false,
             complete: function (e) {
                 //debugger
                 //e.data("kendoGrid").dataSource.read();
                 $("#PackageGrid").data("kendoGrid").dataSource.read();
                 $("#PackageGrid").data('kendoGrid').refresh();

             }
         });

        //Nithin Added for hiding Action Column based on status
      //onpageLoadStatusChange();
    }


@* function UploadFile_Contract() {
	////debugger;
	var project_id = $('#ProjectId').val();
	var SalesmenId = $('#frmProject').find("#salesmen_id").val();
	var Customer_Id = $('#frmProject').find("#customer_id").val();
	var Customer = Customer_Id.replace(' ', '_');
	var Salesmen = SalesmenId.replace(' ', '_');
	// var contract_number = '@Model.project_number'.replace('/','_');
	var contract_date = new Date($('#date_range').data('daterangepicker').startDate);
	var ContractYear = contract_date.getFullYear();
	var FileName = /*contract_number + "-" +*/ Customer + "-" + Salesmen + ".jpg";
	var DOCUMENT_NAME = "UploadFile";
	var FILE_TYPE = "jpg";
	var DOCUMENT_PATH = "/Contracts/" + ContractYear + "/" + FileName;
	var data = "";
	var Values = {
		imageData: data,
		Customer: Customer,
		Salesmen: Salesmen,
		contract_number: contract_number,
		contract_date: contract_date,
		ContractYear: ContractYear,
		FileName: FileName,
		DOCUMENT_NAME: DOCUMENT_NAME,
		FILE_TYPE: FILE_TYPE,
		DOCUMENT_PATH: DOCUMENT_PATH,
		project_id: project_id,
	};
	var JsonValues = JSON.stringify(Values);

	$.ajax({
		url: '@Url.Action("UploadDocument_Contract", "Contract")',
		type: "POST",
		dataType: "json",
		data: { JsonSignature: JsonValues },
		success: function (result) {
			////debugger
			if (result.data.Result > 0) {

			}
			else {
				notify(result.data.Errormessage, "error");
			}
			options.success(result);
		},
		error: function (result) {
			////debugger
			options.error(result);
		}
	});
} *@
	//Nithin Added for hiding Action Column based on status

	function LoadDescription(e) {
		debugger;
		var tr = $(e.target).closest("tr");    // get the current table row (tr)
		var item = this.dataItem(tr);
		var id = item.Project_Det_Id;
		var ItemRemarks = item.Item;
		var description = item.Item.item_description;
		/*var Additionaldescription = item.AdditionalDescription;*/
		var EncrptDescription = "";
		//     if (Additionaldescription != "")
		//EncrptDescription = escape(Additionaldescription);
		if (description != undefined)
			EncrptDescription = escape(description);
		else
			EncrptDescription = escape(ItemRemarks);

		openModelpopup('/Quotation/LoadDescription', 'description', EncrptDescription, 'Id', id);
	}

	function onpageLoadStatusChange() {
		//debugger
		var StatusId =@Model.status_id;
		if (StatusId == "5") {
			$("#btnUpdate").prop("disabled", true);
			$("#btnClear").prop("disabled", true);
			$("#btnConfirmed").prop("disabled", true);
			$("#discount").prop("disabled", true);
			$(".k-grid-add").css("display", "none");
			$("#project_name").prop("disabled", true);
			$("#date_range").prop("disabled", true);
			$("#btnClosed").prop("enabled", true);
            $("#createNewVO").css("display", 'inline-block');

			$("#uploadFileId").css("display", "block");
			$("#input-id").css("display", "block");

		}
		else if (StatusId == "6") {
			$("#btnUpdate").prop("disabled", true);
			$("#btnClear").prop("disabled", true);
			$("#btnConfirmed").prop("disabled", true);
			$("#discount").prop("disabled", true);
			$(".k-grid-add").css("display", "none");
			$("#project_name").prop("disabled", true);
			$("#date_range").prop("disabled", true);
			$("#btnClosed").prop("disabled", true);
			$("#uploadFileId").css("display", "none");
			$("#input-id").css("display", "none");
		}
		else {
			$("#btnUpdate").prop("disabled", false);
			$("#btnClear").prop("disabled", false);
			$("#btnConfirmed").prop("disabled", false);
			$("#btnClosed").prop("disabled", true);
			$("#uploadFileId").css("display", "none");
			$("#input-id").css("display", "none");
		}
	}
function onGridEditing(arg) {
	arg.container.find("input[name='item_remarks']").attr('maxlength', '100');
}
function customBoolEditor(container, options) {
	$('<input class="k-checkbox" type="checkbox" name="Highlight" data-type="boolean" data-bind="checked:Highlight">').appendTo(container);
}
function CategoryDropDownEditor(container, options) {
	$('<input required name="' + options.field + '"/>')
		.appendTo(container)
		.kendoDropDownList({
			filter: "contains",
			autoBind: false,
			optionLabel: "Select Category",
			dataTextField: "category_name",
			dataValueField: "category_Id",
			dataSource: {
				type: "json",
				transport: {
					read: {
						url: '@Url.Action("CategoryDropDownList", "Master")',
						type: "GET",
						dataType: "json",
						contentType: "application/json; charset=utf-8"
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				},
				schema: {
					data: "data"
				},
				sort: { field: "category_name", dir: "asc" },
			},
			noDataTemplate: $("#CategoryTemplate").html()
		});
}

function ItemDropDownEditor(container, options) {
	////debugger;
	//   var task_id = options.model.Task_Id;
	// var task_id = "00000000-0000-0000-0000-000000000000";
	var ParentTaskId = $('#ParentTaskId').val();
	var task_id = options.model.Task_Id;
	var id;
	if (ParentTaskId == "" && task_id != 0) {
		id = task_id;
	}
	else {
		id = ParentTaskId;
	}
	$('<input maxlength="250" required name="' + options.field + '"/>')
		.appendTo(container)
		/*.kendoDropDownList({*/
		.kendoComboBox({
			filter: "contains",
			autoBind: false,
			optionLabel: "Select Item Description",
			dataTextField: "item_description",
			dataValueField: "item_id",
			select: onSelectItem,
			dataSource: {
				type: "json",
				transport: {
					read: {
						url: '@Url.Action("ItemDropDownList", "Master")?TaskId=' + id,
						type: "GET",
						dataType: "json",
						contentType: "application/json; charset=utf-8"
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				},
				schema: {
					data: "data"
				},
				sort: { field: "item_description", dir: "asc" },
			}
		});
}

function UOMDropDownEditor(container, options) {
	$('<input required name="' + options.field + '"/>')
		.appendTo(container)
		.kendoDropDownList({
			filter: "contains",
			autoBind: false,
			optionLabel: "Select UOM",
			dataTextField: "uom_description",
			dataValueField: "uom_id",
			select: onSelectUOM,
			dataSource: {
				type: "json",
				transport: {
					read: {
						url: '@Url.Action("UOMDropDownList", "Master")',
						type: "GET",
						dataType: "json",
						contentType: "application/json; charset=utf-8"
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				},
				schema: {
					data: "data"
				},
				sort: { field: "uom_description", dir: "asc" },
			}
		});
}

function onSelectUOM(e) {
	////debugger
	var detailGridWrapper = this.wrapper;
	var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
	var value = e.dataItem.uom_description;

	var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
	var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
	//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
	var amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");

	if (value == "Lumpsum") {
		price.enable(false);
		qty.enable(false);
		//uomDesc.enable(false);
		amount.enable(true);

		//to get total row values in a grid
		var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
		var row = e.sender.element.closest("tr");
		var dataItem = grid.dataItem(row);
		////debugger
		//console.log(dataItem);
		dataItem.set('Price', 0);
		dataItem.set('Qty', 0);
		dataItem.set('Amount', 0);

	} else {
		////debugger
		//var grid = e.sender.element.closest(".k-grid").data("kendogrid");
		//var row = e.sender.element.closest("tr");
		//var dataitem = grid.dataitem(row);
		//dataItem.set('Amount', 0);

		//GetItemDetails(e, ItemId);
		// var priceEditor = e.container.find("input[name=Price]").data("kendoNumericTextBox");
		//var quantityEditor = e.container.find("input[name=Qty]").data("kendoNumericTextBox");

		//var amountEditor = e.container.find("input[name=Amount]").data("kendoNumericTextBox");

		price.enable(true);
		qty.enable(true);
		//uomDesc.enable(true);
		amount.enable(true);
	}

};

function BillingUOMDropDownEditor(container, options) {
	var LookUpColumnId = 1;
	$('<input required name="' + options.field + '"/>')
		.appendTo(container)
		.kendoDropDownList({
			filter: "contains",
			autoBind: false,
			//optionLabel: "Select BillingUOM",
			dataTextField: "description",
			dataValueField: "status_lookup_id",
			select: onSelectBillingUOM,
			dataSource: {
				type: "json",
				transport: {
					read: {
						url: '@Url.Action("Bind_StatusLookUp", "Master")?LookUpColumnId=' + LookUpColumnId,
						type: "GET",
						dataType: "json",
						contentType: "application/json; charset=utf-8"
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				},
				schema: {
					data: "data"
				},
				sort: { field: "description", dir: "asc" },
			}
		});
}

function onSelectBillingUOM(e) {
	////debugger
	var detailGridWrapper = this.wrapper;
	var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
	var value = e.dataItem.description;

	var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
	var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
	var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
	var amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");

	////debugger
	if (value == "FOC" || value == "Inclusive" || value == "Complementary") {
		price.enable(false);
		qty.enable(false);
		uomDesc.enable(false);
		amount.readonly();

		//to get total row values in a grid
		var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
		var row = e.sender.element.closest("tr");
		var dataItem = grid.dataItem(row);
		console.log(dataItem);
		dataItem.set('Price', 0);
		dataItem.set('Qty', 0);
		dataItem.UOM.set('uom_description', '');
		dataItem.UOM.set('uom_id', 0);
		dataItem.set('Amount', 0);
		//qty.value('');
		//price.value('');
		uomDesc.value('');

		//parentTR.find("td[data-container-for='Amount'] .totalSpan").html('');
	} else {
		////debugger
		//to get total row values in a grid
		var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
		var row = e.sender.element.closest("tr");
		var dataItem = grid.dataItem(row);
		// ////debugger
		//console.log(dataItem);
		//////debugger
		var ItemId = dataItem.Item.item_id;
		GetItemDetails(e, ItemId, price, qty);
		price.enable(true);
		qty.enable(true);
		uomDesc.enable(true);
		amount.enable(true);
	}

};

function PaymentTermsDropDownEditor(container, options) {
	$('<input maxlength="250" required name="' + options.field + '"/>')
		.appendTo(container)
		/*.kendoDropDownList({*/
		.kendoComboBox({
			filter: "contains",
			autoBind: false,
			// optionLabel: "Select Payment Description",
			dataTextField: "Master_payment_description",
			dataValueField: "Master_payment_term_id",
			dataSource: {
				type: "json",
				transport: {
					read: {
						url: '@Url.Action("BindMasterpaymentterms", "Master")',
						type: "GET",
						dataType: "json",
						contentType: "application/json; charset=utf-8"
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				},
				schema: {
					data: "data"
				},
				sort: { field: "Master_payment_description", dir: "asc" },
			},
			//  noDataTemplate: $("#PaymentTermTemplate").html()
		});
}
function GetContractTasksListItem(container, options) {
	$('<input required name="' + options.field + '"/>')
		.appendTo(container)
		.kendoDropDownList({
			filter: "contains",
			autoBind: false,
			optionLabel: "Select Task",
			dataTextField: "Task_Name",
			dataValueField: "Task_Id",
			select: onSelect,
			dataSource: {
				type: "json",
				transport: {
					read: {
						url: '@Url.Action("GetContractTasksListItem", "Contract")?ProjectId=' + ProjectId + '&TaskId=' + TaskId,
						dataType: "json",
					}
				},
				parameterMap: function (options, operation) {
					if (operation !== "read" && options.models) {
						return { models: kendo.stringify(options.models) };
					}
				},
				schema: {
					data: "data"
				},
				sort: { field: "Seq_No", dir: "asc" },
			},
			noDataTemplate: $("#TaskTemplate").html()
		});
}
function expand_all(e) {
	var grid = $("#ContractGrid").data("kendoGrid");
	$(".k-master-row").each(function (index) {
		grid.expandRow(this);

	})
	}

	function expand_allPackage(e) {
		debugger;
		var grid = $("#PackageGrid").data("kendoGrid");
		$(".k-master-row").each(function (index) {
			grid.expandRow();
		});
	}

    function collapse_allPackages(e) {
        var grid = $("#PackageGrid").data("kendoGrid");
        $(".k-master-row").each(function (index) {
            grid.collapseRow(this);
        });
    }

function collapse_all(e) {
	var grid = $("#ContractGrid").data("kendoGrid");
	$(".k-master-row").each(function (index) {
		grid.collapseRow(this);

	});
}
function ContractList() {
	window.location = '@Url.Action("ContractList", "Contract")';
}
</script>
<script id="CategoryTemplate" type="text/x-kendo-tmpl">
    <div>
        No data found. Do you want to add new item - '#: instance.filterInput.val() #' ?
    </div>
    <br />
    <button class="k-button" onclick="addNewCategory('#: instance.filterInput.val() #' )">Add new Category</button>
</script>
<script id="TaskTemplate" type="text/x-kendo-tmpl">
    <div>
        No data found. Do you want to add new item - '#: instance.filterInput.val() #' ?
    </div>
    <br />
    <button class="k-button" onclick="addNewTask('#: instance.filterInput.val() #' )">Add new Task</button>
</script>
<script id="PaymentTermTemplate" type="text/x-kendo-tmpl">
    <div>
        No data found. Do you want to add new item - '#: instance.filterInput.val() #' ?
    </div>
    <br />
    <button class="k-button" onclick="addNewPaymentTerm('#: instance.filterInput.val() #' )">Add new Payment Term</button>
</script>
<script>
	function addNewTask(name) {
		var List = new Array();
		////debugger;
		var Values = {
			task_id: "00000000-0000-0000-0000-000000000000",
			// task_cd: "",
			task_name: name,
			task_description: name,
			isactive: 1
		};
		List.push(Values);
		var JsonValues = JSON.stringify(List);
		$.ajax({
			type: 'POST',
			url: '@Url.Action("CreateNewTask", "Master")',
			data: { "JsonValues": JsonValues },
			dataType: 'Json',
			success: function (data) {
				var Result = data.Result;
				if (Result == "1") {
				}
				else {

				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				alert('Fail');
				alert(jqXHR);
			}
		});
	}

	function addNewCategory(name) {
		var List = new Array();
		////debugger;
		var Values = {
			category_Id: 0,
			//  category_cd: 7,
			category_description: name,
			category_name: name,
			isactive: 1
		};
		List.push(Values);
		var JsonValues = JSON.stringify(List);
		$.ajax({
			type: 'POST',
			url: '@Url.Action("CreateNewCategory", "Master")',
			data: { "JsonValues": JsonValues },
			dataType: 'Json',
			success: function (data) {
				var Result = data.Result;
				if (Result == "1") {
				}
				else {

				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				alert('Fail');
				alert(jqXHR);
			}
		});
	}
	function addNewPaymentTerm(name) {
		// var List = new Array();

		////debugger;
		if (name == "" || name == null) {
			notify("Please enter Payment Description", "error");
			return false;
		}
		var Values = {
			master_payment_termid: 0,
			description: name,
		};
		//  List.push(Values);
		var JsonValues = JSON.stringify(Values);
		$.ajax({
			type: 'POST',
			url: '@Url.Action("CreateNewMasterPaymentTerms", "Master")',
			data: { "JsonValues": JsonValues },
			dataType: 'Json',
			success: function (data) {
				var Result = data.Result;
				if (Result == "1") {
					notify("", "success");
				}
				else {

				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				alert('Fail');
				alert(jqXHR);
			}
		});
	}
	function PrintPreview() {
		////debugger;
		wnd.center().open();
		$("#yes").click(function () {
			////debugger
			@* location.href = '@Url.Action("PrintPreview", "Contract")?Id=' + ProjectId +
				"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + true;*@
				window.open('@Url.Action("PrintPreview", "Contract")?Id=' + ProjectId +
					"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + true, "socialPopupWindow",
					"location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
			wnd.close();
		});
		$("#no").click(function () {
			////debugger
			@* location.href = '@Url.Action("PrintPreview", "Contract")?Id=' + ProjectId +
				"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + false;*@
				window.open('@Url.Action("PrintPreview", "Contract")?Id=' + ProjectId +
					"&TaskId=00000000-0000-0000-0000-000000000000&Qty=" + false, "socialPopupWindow",
					"location=no,width=1000,height=600,scrollbars=yes,top=100,left=100,resizable = no");
			wnd.close();
		});
	}
	function CancelProjectDetails() {
		////debugger;
		window.location = '@Url.Action("ContractDetail", "Contract")?ProjectId=' + ProjectId;
	}

	function UpdateProjectDetails(IsdiscountRelated, Det_ErrorMessage) {
		debugger;
		//  var Discount_Amount = parseFloat($("#discount").val().replace('$', ''));
        var Discount_Percentage = parseFloat($("#discountPercentage").val().replace(',', '').replace('$', ''));
		var Discount_Amount = parseFloat($("#discount").val().replace(',', '').replace('$', ''));
		var SubTotal = $("#sub_total_amount").text().replace('$', '');
		var Gst_amount = $("#gst_amount").text().replace('$', '');
		var GrandTotal = $("#grand_total_amount").text().replace('$', '');
		var Total_afterDiscount = $("#total_afterDiscount").text();
		var GstPercentage =  @Model.gst_percentage;

		var project_id = ProjectId;
		var project_number = '@Model.project_number';
		var project_name = $('#project_name').val();
		// var TotalAmount = $('#total_amount').val().replace('$', '');
		var Customer_Id = $("#Customer_Id").val();
		if (Customer_Id == "" || Customer_Id == null || Customer_Id == "0") {
			Customer_Id = '@Model.customer_id';
		}
		var SalesmenId = $('#SalesmenId').val();
		if (SalesmenId == "" || SalesmenId == null || SalesmenId == "0") {
			SalesmenId = '@Model.salesmen_id';
		}
		var saleman_commission = @Model.saleman_commission;
		var contract_date = $('#date_range').data('daterangepicker').startDate;
		var Values = {
			project_id: project_id,
			project_number: project_number,
			project_name: project_name,
			name1: Customer_Id,
			salesmen_name: SalesmenId,
			Customer_id: Customer_Id,
			salesmen_id: SalesmenId,
			saleman_commission: saleman_commission,
			contract_date: contract_date,
			//  total_amount: TotalAmount,
			contract_amount: SubTotal,
			gst_percentage: GstPercentage,
			gst_amount: Gst_amount,
            discount_percentage: Discount_Percentage,
			discount: Discount_Amount,
			total_amount: GrandTotal
		};
		// List.push(Values);
		var JsonValues = JSON.stringify(Values);
		$.ajax({
			type: 'POST',
			url: '@Url.Action("UpsertProjectContract", "Contract")',
			data: { "JsonContract": JsonValues },
			dataType: 'Json',
			success: function (data) {
				////debugger;
				var Result = data.data.Result;
				var Errormessage = data.data.Errormessage;
				if (IsdiscountRelated == 0) {
					if (Result > 0) {
						notify(Errormessage, "success");
					}
					else {
						notify(Errormessage, "error");
					}
				}
				else {
					if (Result > 0) {
						if (Det_ErrorMessage == "") {
							Det_ErrorMessage = Errormessage;//"Updated Successfully";
						}
						notify(Det_ErrorMessage, "success");
					}
					else {
						if (Det_ErrorMessage == "") {
							Det_ErrorMessage = Errormessage;//"Updation Failed";
						}
						notify(Det_ErrorMessage, "error");
					}
				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				notify("Fail", "error");
				notify(jqXHR, "error");
			}
		});

	}
	function BindCustomer() {
		var selectedCustomerId = $("#Customer_Id").val();
		var selectedCustomerText = $("#Customer_Id").text();
		$.get('@Url.Action("BindCustomer", "Master")', function (list) {
			/*////debugger*/
			if (list != null) {
				var items = [];
				// items.push("<option value=" + 0 + ">" + "--Select Customer--" + "</option>");
				var i;
				for (i = 0; i < list.data.length; i++) {
					items.push("<option value=" + list.data[i].Customer_id + ">" + list.data[i].name1 + "</option>");
				}
				items.push("<option selected value=" + selectedCustomerId + ">" + selectedCustomerText + "</option>");
				$("#Customer_Id").html(items.join(' '));
				$('#Customer_Id').select2();
			}
			else {
				var items = [];
				//items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
				$("#Customer_Id").html(items.join(' '));
				$('#Customer_Id').select2();
			}
		});

	}

	function BindSalesMan() {
		var selectedSalesmenId = $("#SalesmenId").val();
		var selectedSalesmentext = $("#SalesmenId").text();
		$.get('@Url.Action("BindSalesmen", "Master")', function (list) {
			/*////debugger*/
			if (list != null) {
				var items = [];
				//items.push("<option value=" + 0 + ">" + "--Select Salesman--" + "</option>");
				var i;
				for (i = 0; i < list.data.length; i++) {
					items.push("<option value=" + list.data[i].id + ">" + list.data[i].salesmen_name + "</option>");
				}
				items.push("<option selected value=" + selectedSalesmenId + ">" + selectedSalesmentext + "</option>");
				$("#SalesmenId").html(items.join(' '));
				$('#SalesmenId').select2();
			}
			else {
				var items = [];
				// items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
				$("#SalesmenId").html(items.join(' '));
				$('#SalesmenId').select2();
			}
		});

	}
	function onSelect(e) {
		////debugger
		/*if ("kendoConsole" in window) {*/
		if (e.dataItem) {
			// ParentTaskId = e.dataItem.Task_Id;
			$("#ParentTaskId").val(e.dataItem.Task_Id);
			//Nithin added for when we select parent grid dropdown cancel child grid row
			$("#contractchildGrid").data("kendoGrid").cancelRow("tr:eq(1)");

		}
		/*}*/
	};
	function BindProjectStatus() {
		var selectedStatusId = $("#StatusId").val();
		var selectedStatustext = $("#StatusId").text();
		$.get('@Url.Action("BindProjectStatus", "Quotation")', function (list) {
			/*////debugger*/
			if (list != null) {
				var items = [];
				/*items.push("<option value=" + 0 + ">" + "ALL" + "</option>");*/
				var i;
				for (i = 0; i < list.data.length; i++) {
					items.push("<option value=" + list.data[i].projectStatusid + ">" + list.data[i].projectStatus + "</option>");
				}
				items.push("<option selected value=" + selectedStatusId + ">" + selectedStatustext + "</option>");
				$("#StatusId").html(items.join(' '));
				$('#StatusId').select2();
			}
			else {
				var items = [];
				// items.push("<option value=" + 0 + ">" + "ALL" + "</option>");
				$("#StatusId").html(items.join(' '));
				$('#StatusId').select2();
			}
		});

	}

	function QuotationList() {
		window.location = '@Url.Action("Quotation", "Quotation")';
	}

	function onSelectItem(e) {
		////debugger
		//Added for disabling price and Qty when it is lumpsum in UOm Default
		var detailGridWrapper = this.wrapper;
		var parentTR = detailGridWrapper.closest("tr.k-grid-edit-row");
		var price = parentTR.find("td[data-container-for='Price'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var qty = parentTR.find("td[data-container-for='Qty'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		var Amount = parentTR.find("td[data-container-for='Amount'] input[data-role='numerictextbox']").data("kendoNumericTextBox");
		var BillingUOM = parentTR.find("td[data-container-for='BillingUOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
		//uomDesc.enable(true);
		//Amount.enable(true);
		//BillingUOM.select(0);
		if (e.dataItem === undefined) {
			/*options.data.models[0].Item = { item_id: 0, item_description: options.data.models[0].Item }*/
		}
		else {
			var ItemId = e.dataItem.item_id;
			GetItemDetails(e, ItemId, price, qty);
		}
	};

	function GetItemDetails(e, ItemId, price, qty) {
		$.ajax({
			url: '@Url.Action("GetItemByItemId", "Master")?ItemId=' + ItemId,
			type: "POST",
			dataType: "json",
			//data: { JsonPackageDetails: JSON.stringify(options.data.models[0]) },
			success: function (result) {
				////debugger
				//to get total row values in a grid
				var grid = e.sender.element.closest(".k-grid").data("kendoGrid");
				var row = e.sender.element.closest("tr");
				var dataItem = grid.dataItem(row);
				dataItem.set('Price', result.data.Items[0].price);
				dataItem.set('Qty', result.data.Items[0].default_qty);
				//dataItem.set('BillingUOM', 1);
				//dataItem.set('BillingUOM', result.data.Items[0].default_qty);
				dataItem.set('Amount', result.data.Items[0].price * result.data.Items[0].default_qty);
				dataItem.set('UOM', result.data.Items[0].UOM);
				//uomDesc.enable(true);
				//Amount.enable(true);

				if (result.data.Items[0].UOM.uom_description == "Lumpsum") {
					////debugger
					price.enable(false);
					qty.enable(false);
					dataItem.set('Price', 0);
					dataItem.set('Qty', 0);

				} else {
					price.enable(true);
					qty.enable(true);
				}
				//var uomDesc = parentTR.find("td[data-container-for='UOM'] input[data-role='dropdownlist']").data("kendoDropDownList");
				//uomDesc.value(result.data.Items[0].uom.uom_id);
			},
			error: function (result) {
				//   ////debugger

			}
		});
	}
	$("#contract_terms_editor").kendoEditor({
		resizable: true,
		tools: []
		//tools: [
		//    "bold",
		//    "italic",
		//    "underline",
		//    "strikethrough",
		//    "justifyLeft",
		//    "justifyCenter",
		//    "justifyRight",
		//    "justifyFull",
		//    "insertUnorderedList",
		//    "insertOrderedList",
		//    "insertUpperRomanList",
		//    "insertLowerRomanList",
		//    "indent",
		//    "outdent",
		//    "createLink",
		//    "unlink",
		//    "insertImage",
		//    "insertFile",
		//    "subscript",
		//    "superscript",
		//    "tableWizard",
		//    "createTable",
		//    "addRowAbove",
		//    "addRowBelow",
		//    "addColumnLeft",
		//    "addColumnRight",
		//    "deleteRow",
		//    "deleteColumn",
		//    "mergeCellsHorizontally",
		//    "mergeCellsVertically",
		//    "splitCellHorizontally",
		//    "splitCellVertically",
		//    "tableAlignLeft",
		//    "tableAlignCenter",
		//    "tableAlignRight",
		//    "viewHtml",
		//    "formatting",
		//    "cleanFormatting",
		//    "copyFormat",
		//    "applyFormat",
		//    "fontName",
		//    "fontSize",
		//    "foreColor",
		//    "backColor",
		//    "print"
		//]
	});
	// $("#contract_terms_editor").kendoTextArea({
	//    resizable: "both"
	//})
	var editor = $("#contract_terms_editor").data("kendoEditor"),
		editorBody = $(editor.body);

	// Make the Editor read-only.
	editorBody.removeAttr("contenteditable").find("a").on("click.readonly", false);
</script>


<script>
	//Nithin Added For Digital Signature For Both Salesman and Customer
	//Salesman Signature
	var geom = kendo.geometry;
	var Point = geom.Point;
	var draw = kendo.drawing;
	var Path = draw.Path;
	var path;

	$("#salesman-surface-container").on("mousemove", function (e) {
		if (!path) {
			return;
		}

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		path.lineTo(newPoint);
	}).on("mousedown", function (e) {
		path = new Path({
			stroke: {
				color: '#E4141B',
				width: 2,
				lineCap: "round",
				lineJoin: "round"
			}
		});

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		for (var i = 0; i < 1; i++) {
			path.lineTo(newPoint.clone().translate(i * 1, 0));
		}

		salesman_surface.draw(path);

	}).on("mouseup", function (e) {
		path = undefined;
	});


	//Customer Signature

	var geom1 = kendo.geometry;
	var Point1 = geom.Point;
	var draw1 = kendo.drawing;
	var Path1 = draw.Path;
	var path1;

	$("#customer-surface-container").on("mousemove", function (e) {
		if (!path1) {
			////debugger
			return;
		}

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		path1.lineTo(newPoint);
	}).on("mousedown", function (e) {
		path1 = new Path({
			stroke: {
				color: '#E4141B',
				width: 2,
				lineCap: "round",
				lineJoin: "round"
			}
		});

		var offset = $(this).offset();
		var newPoint = new Point(e.pageX - offset.left, e.pageY - offset.top);

		for (var i = 0; i < 1; i++) {
			path1.lineTo(newPoint.clone().translate(i * 1, 0));
		}

		customer_surface.draw(path1);

	}).on("mouseup", function (e) {
		path1 = undefined;
	});

	//Saving both the signatures in a variable
	var salesman_surface = draw.Surface.create($("#salesman_surface"));
	var customer_surface = draw.Surface.create($("#customer_surface"));

	//$(".export-svg").click(function () {
	//    // Convert the DOM element to a drawing using kendo.drawing.drawDOM
	//    kendo.drawing.drawDOM($("#salesman_surface"))
	//        .then(function (group) {
	//            // Render the result as a SVG document
	//            return kendo.drawing.exportSVG(group);
	//        })
	//        .done(function (data) {
	//            // Save the SVG document
	//            kendo.saveAs({
	//                dataURI: data,
	//                fileName: "signature.svg",
	//                proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
	//            });
	//        });
	//    kendo.drawing.drawDOM($("#customer_surface"))
	//        .then(function (group) {
	//            // Render the result as a SVG document
	//            return kendo.drawing.exportSVG(group);
	//        })
	//        .done(function (data) {
	//            // Save the SVG document
	//            kendo.saveAs({
	//                dataURI: data,
	//                fileName: "signature.svg",
	//                proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
	//            });
	//        });
	//});


	//Clearing the signature
	$(".clear").click(function () {
		salesman_surface.clear();
		customer_surface.clear();
	});

	function SaveSignature() {

		if (salesman_surface._instance._rootElement.innerHTML == "<defs></defs>") {
			if (salesman_surface.element.length = 0) {
				debugger;
				alert("Please draw Salesman Signature");
			}
		}
		else if (customer_surface._instance._rootElement.innerHTML == "<defs></defs>") {
			alert("Please draw Customer Signature");
			////debugger
		} else {
			var CustImageData;
			kendo.drawing.drawDOM($("#salesman_surface"))
				.then(function (group) {
					////debugger

					// Render the result as a PNG image
					return kendo.drawing.exportImage(group);
				})
				.done(function (data) {
					////debugger
					// Save the image file
					// var FileName = contract_number + "-" + Customer + "-" + Salesmen + ".jpg";
					@* kendo.saveAs({
						dataURI: data,
						fileName: "Contract Sign.png",
						proxyURL: '@Url.Action("SaveSignature", "Contract")',
						forceProxy: true,
						// proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
					});*@

		@*var Path = @PMS.Common.Constants.PhysicalPath + "/Contracts/" + ContractYear + "/" + FileName;*@

					kendo.drawing.drawDOM($("#customer_surface"))
						.then(function (group) {
							// Render the result as a SVG document
							return kendo.drawing.exportImage(group);
						})
						.done(function (data1) {
							CustImageData = data1;                       // Save the SVG document
							//kendo.saveAs({
							//    dataURI: data,
							//    fileName: "signature.svg",
							//    proxyURL: "https://demos.telerik.com/kendo-ui/service/export"
							//});
						});

					debugger;
                    /*str = str.replace(/[_\W]+/g, "-")*/
                    @*var Customer =Regex.Replace('@Model.customer', "[^0-9a-zA-Z]+", "");*@
					var Customer = '@Model.customer'.replace(/[^a-z\s]/gi, '').replace(/[_\s]/g, '_');
                   // var Customer = '@Model.customer'.replace('/[^A-Za-z0-9\-]/', '');
                   // var Customer = '@Model.customer'.replace(' ', '_');//preg_replace('/[^A-Za-z0-9\-]/', '', $string);
					@*var Salesmen = '@Model.salesmen'.replace(' ', '_');*@
					var Salesmen = '@Model.salesmen'.replace(/[^a-z\s]/gi, '').replace(/[_\s]/g, '_');

					var contract_number = '@Model.project_number'.replace('/', '_');
					var contract_date = new Date($('#date_range').data('daterangepicker').startDate);
					var ContractYear = contract_date.getFullYear();
					var CustomerFileName = contract_number + "-" + Customer + ".jpg";
					var SalesmenFileName = contract_number + "-" + Salesmen + ".jpg";
					var DOCUMENT_NAME = "Signature";
					var FILE_TYPE = "jpg";
					var CustomerImage_PATH = "/Contracts/" + ContractYear + "/" + CustomerFileName;
					var SalesmenImage_PATH = "/Contracts/" + ContractYear + "/" + SalesmenFileName;
					var project_id = $('#ProjectId').val();
                    var customer_id = $("#CustomerId").val();
					// var Path = "D:\\Proj\\BTS\\PMS2\\PMS2" + "/Contracts/" + ContractYear;
					// kendo.saveAs(Path, FileName);
					var Values = {
						SalesmanimageData: data,
						CustomerimageData: CustImageData,
						Customer: Customer,
						Salesmen: Salesmen,
						contract_number: contract_number,
						contract_date: contract_date,
						ContractYear: ContractYear,
						CustomerFileName: CustomerFileName,
						SalesmenFileName: SalesmenFileName,
						DOCUMENT_NAME: DOCUMENT_NAME,
						FILE_TYPE: FILE_TYPE,
						CustomerImage_PATH: CustomerImage_PATH,
						SalesmenImage_PATH: SalesmenImage_PATH,
						SuperId: project_id,
                        CustomerId: customer_id,
					};
					var JsonValues = JSON.stringify(Values);
                    $.loader({ content: "<table><tr><td><h5>Confirmation of Contract in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
					$.ajax({
						url: '@Url.Action("UploadSignature", "Contract")',
						type: "POST",
						dataType: "json",
						data: { JsonSignature: JsonValues },
						success: function (result) {
							////debugger
							if (result.data.Result > 0) {

								//notify(result.data.Errormessage, "success");
								Submit_StatusChange(5);
							}
							else {
								notify(result.data.Errormessage, "error");
							}
							options.success(result);
						},
						error: function (result) {
							////debugger
							options.error(result);
						}
					});
				});
			salesman_surface.clear();
			customer_surface.clear();
			$("#signature_modal").modal('hide');
		}
	}

    function OnClickSendMail() {
        debugger;
        var ProjectId = $('#ProjectId').val();
        var customer_id = $("#CustomerId").val();
		var ContractDate = $("#ContractDate").val();
        var CustomerName = $("#CustomerName").val();
		var SalesmenName = $("#SalesmenName").val();
		var CustomerAddress = $("#CustomerAddress").val();
		var ContractNumber = $("#ContractNumber").val();


        var Values = {
			project_id: ProjectId,
			CustomerId: customer_id,
            ContractDate: ContractDate,
            Customer: CustomerName,
            Salesmen: SalesmenName,
			CustomerAddress: CustomerAddress,
			contract_number: ContractNumber,
            SuperId: ProjectId
        };
		var JsonValues = JSON.stringify(Values);
        $.loader({ content: "<table><tr><td><h5>Sending Email</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
        $.ajax({
            type: "POST",
            url: "/Contract/SendingMail", // the URL of the controller action method
            data: { "JsonValues": JsonValues },
            dataType: 'Json',
            success: function (data) {
                //  debugger;
                $.loader('close');
                var Result = data.data.Result;
                var Errormessage = data.data.Errormessage;
                if (Result == "1") {
                    notify(Errormessage, "success");
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $.loader('close');
                notify("Fail", "error");
                notify(jqXHR, "error");
            }
        });
    }

	function Submit_StatusChange(statusId) {
		////debugger;
		var project_id = $('#ProjectId').val();
		var Values = {
			project_id: project_id,
			Status_Id: statusId,
		};
		var JsonValues = JSON.stringify(Values);
        //$.loader({ content: "<table><tr><td><h5>Confirmation of Contract in Progress</h5></td></tr> <tr><td><br><img src='/Content/img/Preloader_3.gif' /></td></tr></table>" });
		$.ajax({
			type: "POST",
			url: "/Contract/Update_ContractStatus", // the URL of the controller action method
			data: { "JsonValues": JsonValues },
			dataType: 'Json',
			success: function (data) {
				////debugger;
                $.loader('close');
				var Result = data.data.Result;
				var Errormessage = data.data.Errormessage;
				if (Result > 0) {
					// $("#btnConfirmed").prop("disabled", true);
					// $("#StatusId").text('Confirmed');
					// BindProjectStatus();
					// $("#discount").prop("disabled", true);
					// $("#btnUpdate").prop("disabled", true);
					// $("#btnClear").prop("disabled", true);
					// $("#project_name").prop("disabled", true);
					// $("#date_range").prop("disabled", true);
					//// $("#ContractGrid").data('kendoGrid').dataSource.read();
					//// $("#ContractGrid").data('kendoGrid').refresh();
					// $("#btnClosed").prop("enabled", true);
					var ProjectId = $('#ProjectId').val();
					window.location = '@Url.Action("ContractDetail", "Contract")?ProjectId=' + ProjectId;
					notify(Errormessage, "success");
				}
				else {
					notify(Errormessage, "error");
				}
			},
			error: function (jqXHR, textStatus, errorThrown) {
				$.loader('close');
				notify("Fail", "error");
				notify(jqXHR, "error");
			}
		});

	}

	//Tooltips For Kendogrid Action Btn

	$("#ContractGrid").kendoTooltip({
		filter: ".k-grid-cancel",
		autoHide: true,
		content: function (e) {
			return "Cancel Item";
		}
	});
	$("#ContractGrid").kendoTooltip({
		filter: ".k-grid-edit",
		autoHide: true,
		content: function (e) {
			return "Edit Item Details";
		}
	});
	$("#ContractGrid").kendoTooltip({
		filter: ".k-grid-delete",
		autoHide: true,
		content: function (e) {
			return "Delete Item";
		}
	});
	$("#ContractGrid").kendoTooltip({
		filter: ".k-grid-update",
		autoHide: true,
		content: function (e) {
			return "Update Item";
		}
	});


	//Tooltips For Kendogrid Action Btn payment terms

	$("#TermsGrid").kendoTooltip({
		filter: ".k-grid-cancel",
		autoHide: true,
		content: function (e) {
			return "Cancel Terms";
		}
	});
	$("#TermsGrid").kendoTooltip({
		filter: ".k-grid-edit",
		autoHide: true,
		content: function (e) {
			return "Edit Terms";
		}
	});
	$("#TermsGrid").kendoTooltip({
		filter: ".k-grid-delete",
		autoHide: true,
		content: function (e) {
			return "Delete Terms";
		}
	});
	$("#TermsGrid").kendoTooltip({
		filter: ".k-grid-update",
		autoHide: true,
		content: function (e) {
			return "Update Terms";
		}
	});

	$(".allow_decimal").on("input", function (evt) {
		var self = $(this);
		self.val(self.val().replace(/[^0-9\,$]/g, ''));
		if ((evt.which != 46 || self.val().indexOf('.') != -1) && (evt.which < 48 || evt.which > 57)) {
			evt.preventDefault();
		}
	});

	$("#discount").focus(function () {
		debugger
		$(this).select();
	});
//$(".Amount_feild input[role='spinbutton'] ").focus(function () {
//		debugger
//           $(this).select();
//});


//$(".Amount_feild input[role='spinbutton'] ").on('focus', function () {
//       var input = $(this);
//       setTimeout(function () { input.select(); });
//   });


    function CreateVO() {
        debugger;

        var project_id = $('#ProjectId').val();
        $.ajax({
                    url: '@Url.Action("GetRowsCount", "VariationOrder")',
                    type: "POST",
                    dataType: "json",
            data: { ProjectId: project_id },
                    success: function (result) {
                        debugger

                        if (result.data.Result > 1) {
                            window.location = '@Url.Action("VariationOrderList", "VariationOrder")?ProjectId=' + project_id;
                        }
                        else {
                            window.location = '@Url.Action("AdditionOmission", "VariationOrder")?ProjectId=' + project_id + '&ShowHide=' + true;
                        }
                        options.success(result);
                    },
                    error: function (result) {
                        debugger

                        options.error(result);
                    }
        });
	}

	function CreateSupplierToContract() {
		//alert("testing")
        var project_id = $('#ProjectId').val();
		window.location = '@Url.Action("ContractSupplierMapping", "Contract")?ProjectId=' + project_id;
    }
</script>